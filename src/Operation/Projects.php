<?php

declare(strict_types=1);

namespace ApiClients\Client\GitHub\Operation;

use ApiClients\Client\GitHub\Internal;
use ApiClients\Client\GitHub\Schema;
use ApiClients\Client\GitHub\Schema\Operations\Projects\MoveCard\Response\ApplicationJson\Created\Application\Json;
use ApiClients\Client\GitHub\Schema\Project;
use ApiClients\Client\GitHub\Schema\ProjectCard;
use ApiClients\Client\GitHub\Schema\ProjectCollaboratorPermission;
use ApiClients\Client\GitHub\Schema\ProjectColumn;
use ApiClients\Tools\OpenApiClient\Utils\Response\WithoutBody;

final class Projects
{
    public function __construct(private Internal\Operators $operators)
    {
    }

    /** @return iterable<int,Schema\Project> */
    public function listForOrg(string $org, string $state, int $perPage, int $page): iterable
    {
        return $this->operators->projectsðŸ‘·ListForOrg()->call($org, $state, $perPage, $page);
    }

    /** @return iterable<int,Schema\Project> */
    public function listForOrgListing(string $org, string $state, int $perPage, int $page): iterable
    {
        return $this->operators->projectsðŸ‘·ListForOrgListing()->call($org, $state, $perPage, $page);
    }

    /** @return */
    public function createForOrg(string $org, array $params): Project
    {
        return $this->operators->projectsðŸ‘·CreateForOrg()->call($org, $params);
    }

    /** @return */
    public function getCard(int $cardId): ProjectCard|WithoutBody
    {
        return $this->operators->projectsðŸ‘·GetCard()->call($cardId);
    }

    /** @return */
    public function deleteCard(int $cardId): WithoutBody
    {
        return $this->operators->projectsðŸ‘·DeleteCard()->call($cardId);
    }

    /** @return */
    public function updateCard(int $cardId, array $params): ProjectCard|WithoutBody
    {
        return $this->operators->projectsðŸ‘·UpdateCard()->call($cardId, $params);
    }

    /** @return */
    public function moveCard(int $cardId, array $params): Json|WithoutBody
    {
        return $this->operators->projectsðŸ‘·MoveCard()->call($cardId, $params);
    }

    /** @return */
    public function getColumn(int $columnId): ProjectColumn|WithoutBody
    {
        return $this->operators->projectsðŸ‘·GetColumn()->call($columnId);
    }

    /** @return */
    public function deleteColumn(int $columnId): WithoutBody
    {
        return $this->operators->projectsðŸ‘·DeleteColumn()->call($columnId);
    }

    /** @return */
    public function updateColumn(int $columnId, array $params): ProjectColumn|WithoutBody
    {
        return $this->operators->projectsðŸ‘·UpdateColumn()->call($columnId, $params);
    }

    /** @return iterable<int,Schema\ProjectCard>|WithoutBody */
    public function listCards(int $columnId, string $archivedState, int $perPage, int $page): iterable|WithoutBody
    {
        return $this->operators->projectsðŸ‘·ListCards()->call($columnId, $archivedState, $perPage, $page);
    }

    /** @return iterable<int,Schema\ProjectCard>|WithoutBody */
    public function listCardsListing(int $columnId, string $archivedState, int $perPage, int $page): iterable|WithoutBody
    {
        return $this->operators->projectsðŸ‘·ListCardsListing()->call($columnId, $archivedState, $perPage, $page);
    }

    /** @return */
    public function createCard(int $columnId, array $params): ProjectCard|WithoutBody
    {
        return $this->operators->projectsðŸ‘·CreateCard()->call($columnId, $params);
    }

    /** @return */
    public function moveColumn(int $columnId, array $params): \ApiClients\Client\GitHub\Schema\Operations\Projects\MoveColumn\Response\ApplicationJson\Created\Application\Json|WithoutBody
    {
        return $this->operators->projectsðŸ‘·MoveColumn()->call($columnId, $params);
    }

    /** @return */
    public function get(int $projectId): Project|WithoutBody
    {
        return $this->operators->projectsðŸ‘·Get()->call($projectId);
    }

    /** @return */
    public function delete(int $projectId): WithoutBody
    {
        return $this->operators->projectsðŸ‘·Delete()->call($projectId);
    }

    /** @return */
    public function update(int $projectId, array $params): Project|WithoutBody
    {
        return $this->operators->projectsðŸ‘·Update()->call($projectId, $params);
    }

    /** @return iterable<int,Schema\SimpleUser>|WithoutBody */
    public function listCollaborators(int $projectId, string $affiliation, int $perPage, int $page): iterable|WithoutBody
    {
        return $this->operators->projectsðŸ‘·ListCollaborators()->call($projectId, $affiliation, $perPage, $page);
    }

    /** @return iterable<int,Schema\SimpleUser>|WithoutBody */
    public function listCollaboratorsListing(int $projectId, string $affiliation, int $perPage, int $page): iterable|WithoutBody
    {
        return $this->operators->projectsðŸ‘·ListCollaboratorsListing()->call($projectId, $affiliation, $perPage, $page);
    }

    /** @return */
    public function addCollaborator(int $projectId, string $username, array $params): WithoutBody
    {
        return $this->operators->projectsðŸ‘·AddCollaborator()->call($projectId, $username, $params);
    }

    /** @return */
    public function removeCollaborator(int $projectId, string $username): WithoutBody
    {
        return $this->operators->projectsðŸ‘·RemoveCollaborator()->call($projectId, $username);
    }

    /** @return */
    public function getPermissionForUser(int $projectId, string $username): ProjectCollaboratorPermission|WithoutBody
    {
        return $this->operators->projectsðŸ‘·GetPermissionForUser()->call($projectId, $username);
    }

    /** @return iterable<int,Schema\ProjectColumn>|WithoutBody */
    public function listColumns(int $projectId, int $perPage, int $page): iterable|WithoutBody
    {
        return $this->operators->projectsðŸ‘·ListColumns()->call($projectId, $perPage, $page);
    }

    /** @return iterable<int,Schema\ProjectColumn>|WithoutBody */
    public function listColumnsListing(int $projectId, int $perPage, int $page): iterable|WithoutBody
    {
        return $this->operators->projectsðŸ‘·ListColumnsListing()->call($projectId, $perPage, $page);
    }

    /** @return */
    public function createColumn(int $projectId, array $params): ProjectColumn|WithoutBody
    {
        return $this->operators->projectsðŸ‘·CreateColumn()->call($projectId, $params);
    }

    /** @return iterable<int,Schema\Project> */
    public function listForRepo(string $owner, string $repo, string $state, int $perPage, int $page): iterable
    {
        return $this->operators->projectsðŸ‘·ListForRepo()->call($owner, $repo, $state, $perPage, $page);
    }

    /** @return iterable<int,Schema\Project> */
    public function listForRepoListing(string $owner, string $repo, string $state, int $perPage, int $page): iterable
    {
        return $this->operators->projectsðŸ‘·ListForRepoListing()->call($owner, $repo, $state, $perPage, $page);
    }

    /** @return */
    public function createForRepo(string $owner, string $repo, array $params): Project
    {
        return $this->operators->projectsðŸ‘·CreateForRepo()->call($owner, $repo, $params);
    }

    /** @return */
    public function createForAuthenticatedUser(array $params): Project|WithoutBody
    {
        return $this->operators->projectsðŸ‘·CreateForAuthenticatedUser()->call($params);
    }

    /** @return iterable<int,Schema\Project> */
    public function listForUser(string $username, string $state, int $perPage, int $page): iterable
    {
        return $this->operators->projectsðŸ‘·ListForUser()->call($username, $state, $perPage, $page);
    }

    /** @return iterable<int,Schema\Project> */
    public function listForUserListing(string $username, string $state, int $perPage, int $page): iterable
    {
        return $this->operators->projectsðŸ‘·ListForUserListing()->call($username, $state, $perPage, $page);
    }
}
