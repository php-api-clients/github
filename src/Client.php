<?php

declare (strict_types=1);
namespace ApiClients\Client\Github;

use ApiClients\Client\Github\Error as ErrorSchemas;
use ApiClients\Client\Github\Hydrator;
use ApiClients\Client\Github\Operation;
use ApiClients\Client\Github\Schema;
use ApiClients\Client\Github\WebHook;
final class Client implements ClientInterface
{
    private readonly \ApiClients\Contracts\HTTP\Headers\AuthenticationInterface $authentication;
    private readonly \React\Http\Browser $browser;
    private readonly \League\OpenAPIValidation\Schema\SchemaValidator $requestSchemaValidator;
    private readonly \League\OpenAPIValidation\Schema\SchemaValidator $responseSchemaValidator;
    /**
     * @var array<class-string, \EventSauce\ObjectHydrator\ObjectMapper>
     */
    private array $hydrator = array();
    private readonly WebHooks $webHooks;
    private readonly Hydrators $hydrators;
    public function __construct(\ApiClients\Contracts\HTTP\Headers\AuthenticationInterface $authentication, \React\Http\Browser $browser)
    {
        $this->authentication = $authentication;
        $this->browser = $browser->withBase('https://api.github.com')->withFollowRedirects(false);
        $this->requestSchemaValidator = new \League\OpenAPIValidation\Schema\SchemaValidator(\League\OpenAPIValidation\Schema\SchemaValidator::VALIDATE_AS_REQUEST);
        $this->responseSchemaValidator = new \League\OpenAPIValidation\Schema\SchemaValidator(\League\OpenAPIValidation\Schema\SchemaValidator::VALIDATE_AS_RESPONSE);
        $this->hydrators = new Hydrators();
        $this->webHooks = new WebHooks($this->requestSchemaValidator, $this->hydrators);
    }
    /**
     * @return ($call is Operation\Meta\Root::OPERATION_MATCH ? Schema\Root : ($call is Operation\Apps\GetAuthenticated::OPERATION_MATCH ? Schema\Integration : ($call is Operation\Apps\CreateFromManifest::OPERATION_MATCH ? Schema\Operation\Apps\CreateFromManifest\Response\Applicationjson\H201 : ($call is Operation\Apps\GetWebhookConfigForApp::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Operation\Apps\UpdateWebhookConfigForApp::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Operation\Apps\ListWebhookDeliveries::OPERATION_MATCH ? Schema\HookDeliveryItem : ($call is Operation\Apps\GetWebhookDelivery::OPERATION_MATCH ? Schema\HookDelivery : ($call is Operation\Apps\RedeliverWebhookDelivery::OPERATION_MATCH ? Schema\Operation\Apps\RedeliverWebhookDelivery\Response\Applicationjson\H202 : ($call is Operation\Apps\ListInstallationRequestsForAuthenticatedApp::OPERATION_MATCH ? Schema\IntegrationInstallationRequest : ($call is Operation\Apps\ListInstallations::OPERATION_MATCH ? Schema\Installation : ($call is Operation\Apps\GetInstallation::OPERATION_MATCH ? Schema\Installation : ($call is Operation\Apps\DeleteInstallation::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Apps\CreateInstallationAccessToken::OPERATION_MATCH ? Schema\InstallationToken : ($call is Operation\Apps\SuspendInstallation::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Apps\UnsuspendInstallation::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Apps\DeleteAuthorization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Apps\CheckToken::OPERATION_MATCH ? Schema\Authorization : ($call is Operation\Apps\DeleteToken::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Apps\ResetToken::OPERATION_MATCH ? Schema\Authorization : ($call is Operation\Apps\ScopeToken::OPERATION_MATCH ? Schema\Authorization : ($call is Operation\Apps\GetBySlug::OPERATION_MATCH ? Schema\Integration : ($call is Operation\CodesOfConduct\GetAllCodesOfConduct::OPERATION_MATCH ? Schema\CodeOfConduct : ($call is Operation\CodesOfConduct\GetConductCode::OPERATION_MATCH ? Schema\CodeOfConduct : ($call is Operation\Emojis\Get::OPERATION_MATCH ? Schema\Operation\Emojis\Get\Response\Applicationjson\H200 : ($call is Operation\Dependabot\ListAlertsForEnterprise::OPERATION_MATCH ? Schema\DependabotAlertWithRepository : ($call is Operation\SecretScanning\ListAlertsForEnterprise::OPERATION_MATCH ? Schema\OrganizationSecretScanningAlert : ($call is Operation\Activity\ListPublicEvents::OPERATION_MATCH ? Schema\Event : ($call is Operation\Activity\GetFeeds::OPERATION_MATCH ? Schema\Feed : ($call is Operation\Gists\List_::OPERATION_MATCH ? Schema\BaseGist : ($call is Operation\Gists\Create::OPERATION_MATCH ? Schema\GistSimple : ($call is Operation\Gists\ListPublic::OPERATION_MATCH ? Schema\BaseGist : ($call is Operation\Gists\ListStarred::OPERATION_MATCH ? Schema\BaseGist : ($call is Operation\Gists\Get::OPERATION_MATCH ? Schema\GistSimple : ($call is Operation\Gists\Delete::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Gists\Update::OPERATION_MATCH ? Schema\GistSimple : ($call is Operation\Gists\ListComments::OPERATION_MATCH ? Schema\GistComment : ($call is Operation\Gists\CreateComment::OPERATION_MATCH ? Schema\GistComment : ($call is Operation\Gists\GetComment::OPERATION_MATCH ? Schema\GistComment : ($call is Operation\Gists\DeleteComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Gists\UpdateComment::OPERATION_MATCH ? Schema\GistComment : ($call is Operation\Gists\ListCommits::OPERATION_MATCH ? Schema\GistCommit : ($call is Operation\Gists\ListForks::OPERATION_MATCH ? Schema\GistSimple : ($call is Operation\Gists\Fork::OPERATION_MATCH ? Schema\BaseGist : ($call is Operation\Gists\CheckIsStarred::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Gists\Star::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Gists\Unstar::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Gists\GetRevision::OPERATION_MATCH ? Schema\GistSimple : ($call is Operation\Gitignore\GetAllTemplates::OPERATION_MATCH ? Schema\Operation\Gitignore\GetAllTemplates\Response\Applicationjson\H200 : ($call is Operation\Gitignore\GetTemplate::OPERATION_MATCH ? Schema\GitignoreTemplate : ($call is Operation\Apps\ListReposAccessibleToInstallation::OPERATION_MATCH ? Schema\Operation\Apps\ListReposAccessibleToInstallation\Response\Applicationjson\H200 : ($call is Operation\Apps\RevokeInstallationAccessToken::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Issues\List_::OPERATION_MATCH ? Schema\Issue : ($call is Operation\Licenses\GetAllCommonlyUsed::OPERATION_MATCH ? Schema\LicenseSimple : ($call is Operation\Licenses\Get::OPERATION_MATCH ? Schema\License : ($call is Operation\Markdown\Render::OPERATION_MATCH ? Schema\Operation\Markdown\Render\Response\Texthtml\H200 : ($call is Operation\Markdown\RenderRaw::OPERATION_MATCH ? Schema\Operation\Markdown\RenderRaw\Response\Texthtml\H200 : ($call is Operation\Apps\GetSubscriptionPlanForAccount::OPERATION_MATCH ? Schema\MarketplacePurchase : ($call is Operation\Apps\ListPlans::OPERATION_MATCH ? Schema\MarketplaceListingPlan : ($call is Operation\Apps\ListAccountsForPlan::OPERATION_MATCH ? Schema\MarketplacePurchase : ($call is Operation\Apps\GetSubscriptionPlanForAccountStubbed::OPERATION_MATCH ? Schema\MarketplacePurchase : ($call is Operation\Apps\ListPlansStubbed::OPERATION_MATCH ? Schema\MarketplaceListingPlan : ($call is Operation\Apps\ListAccountsForPlanStubbed::OPERATION_MATCH ? Schema\MarketplacePurchase : ($call is Operation\Meta\Get::OPERATION_MATCH ? Schema\ApiOverview : ($call is Operation\Activity\ListPublicEventsForRepoNetwork::OPERATION_MATCH ? Schema\Event|Schema\BasicError : ($call is Operation\Activity\ListNotificationsForAuthenticatedUser::OPERATION_MATCH ? Schema\Thread : ($call is Operation\Activity\MarkNotificationsAsRead::OPERATION_MATCH ? Schema\Operation\Activity\MarkNotificationsAsRead\Response\Applicationjson\H202 : ($call is Operation\Activity\GetThread::OPERATION_MATCH ? Schema\Thread : ($call is Operation\Activity\MarkThreadAsRead::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Activity\GetThreadSubscriptionForAuthenticatedUser::OPERATION_MATCH ? Schema\ThreadSubscription : ($call is Operation\Activity\SetThreadSubscription::OPERATION_MATCH ? Schema\ThreadSubscription : ($call is Operation\Activity\DeleteThreadSubscription::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Meta\GetOctocat::OPERATION_MATCH ? Schema\Operation\Meta\GetOctocat\Response\ApplicationoctocatStream\H200 : ($call is Operation\Orgs\List_::OPERATION_MATCH ? Schema\OrganizationSimple : ($call is Operation\Orgs\ListPatGrantRequests::OPERATION_MATCH ? Schema\OrganizationProgrammaticAccessGrantRequest : ($call is Operation\Orgs\ReviewPatGrantRequestsInBulk::OPERATION_MATCH ? Schema\Operation\Orgs\ReviewPatGrantRequestsInBulk\Response\Applicationjson\H202 : ($call is Operation\Orgs\ReviewPatGrantRequest::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Orgs\ListPatGrantRequestRepositories::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Operation\Orgs\ListPatGrants::OPERATION_MATCH ? Schema\OrganizationProgrammaticAccessGrant : ($call is Operation\Orgs\UpdatePatAccesses::OPERATION_MATCH ? Schema\Operation\Orgs\UpdatePatAccesses\Response\Applicationjson\H202 : ($call is Operation\Orgs\UpdatePatAccess::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Orgs\ListPatGrantRepositories::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Operation\Orgs\Get::OPERATION_MATCH ? Schema\OrganizationFull : ($call is Operation\Orgs\Delete::OPERATION_MATCH ? Schema\Operation\Orgs\Delete\Response\Applicationjson\H202 : ($call is Operation\Orgs\Update::OPERATION_MATCH ? Schema\OrganizationFull : ($call is Operation\Actions\GetActionsCacheUsageForOrg::OPERATION_MATCH ? Schema\ActionsCacheUsageOrgEnterprise : ($call is Operation\Actions\GetActionsCacheUsageByRepoForOrg::OPERATION_MATCH ? Schema\Operation\Actions\GetActionsCacheUsageByRepoForOrg\Response\Applicationjson\H200 : ($call is Operation\Oidc\GetOidcCustomSubTemplateForOrg::OPERATION_MATCH ? Schema\OidcCustomSub : ($call is Operation\Oidc\UpdateOidcCustomSubTemplateForOrg::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\GetGithubActionsPermissionsOrganization::OPERATION_MATCH ? Schema\ActionsOrganizationPermissions : ($call is Operation\Actions\SetGithubActionsPermissionsOrganization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization::OPERATION_MATCH ? Schema\Operation\Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization\Response\Applicationjson\H200 : ($call is Operation\Actions\SetSelectedRepositoriesEnabledGithubActionsOrganization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\EnableSelectedRepositoryGithubActionsOrganization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\DisableSelectedRepositoryGithubActionsOrganization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\GetAllowedActionsOrganization::OPERATION_MATCH ? Schema\SelectedActions : ($call is Operation\Actions\SetAllowedActionsOrganization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\GetGithubActionsDefaultWorkflowPermissionsOrganization::OPERATION_MATCH ? Schema\ActionsGetDefaultWorkflowPermissions : ($call is Operation\Actions\SetGithubActionsDefaultWorkflowPermissionsOrganization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListRequiredWorkflows::OPERATION_MATCH ? Schema\Operation\Actions\ListRequiredWorkflows\Response\Applicationjson\H200 : ($call is Operation\Actions\CreateRequiredWorkflow::OPERATION_MATCH ? Schema\RequiredWorkflow : ($call is Operation\Actions\GetRequiredWorkflow::OPERATION_MATCH ? Schema\RequiredWorkflow : ($call is Operation\Actions\DeleteRequiredWorkflow::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\UpdateRequiredWorkflow::OPERATION_MATCH ? Schema\RequiredWorkflow : ($call is Operation\Actions\ListSelectedRepositoriesRequiredWorkflow::OPERATION_MATCH ? Schema\Operation\Actions\ListSelectedRepositoriesRequiredWorkflow\Response\Applicationjson\H200 : ($call is Operation\Actions\SetSelectedReposToRequiredWorkflow::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\AddSelectedRepoToRequiredWorkflow::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\RemoveSelectedRepoFromRequiredWorkflow::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListSelfHostedRunnersForOrg::OPERATION_MATCH ? Schema\Operation\Actions\ListSelfHostedRunnersForOrg\Response\Applicationjson\H200 : ($call is Operation\Actions\ListRunnerApplicationsForOrg::OPERATION_MATCH ? Schema\RunnerApplication : ($call is Operation\Actions\CreateRegistrationTokenForOrg::OPERATION_MATCH ? Schema\AuthenticationToken : ($call is Operation\Actions\CreateRemoveTokenForOrg::OPERATION_MATCH ? Schema\AuthenticationToken : ($call is Operation\Actions\GetSelfHostedRunnerForOrg::OPERATION_MATCH ? Schema\Runner : ($call is Operation\Actions\DeleteSelfHostedRunnerFromOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListLabelsForSelfHostedRunnerForOrg::OPERATION_MATCH ? Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200 : ($call is Operation\Actions\SetCustomLabelsForSelfHostedRunnerForOrg::OPERATION_MATCH ? Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200 : ($call is Operation\Actions\AddCustomLabelsToSelfHostedRunnerForOrg::OPERATION_MATCH ? Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200 : ($call is Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForOrg::OPERATION_MATCH ? Schema\Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForOrg\Response\Applicationjson\H200 : ($call is Operation\Actions\RemoveCustomLabelFromSelfHostedRunnerForOrg::OPERATION_MATCH ? Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200 : ($call is Operation\Actions\ListOrgSecrets::OPERATION_MATCH ? Schema\Operation\Actions\ListOrgSecrets\Response\Applicationjson\H200 : ($call is Operation\Actions\GetOrgPublicKey::OPERATION_MATCH ? Schema\ActionsPublicKey : ($call is Operation\Actions\GetOrgSecret::OPERATION_MATCH ? Schema\OrganizationActionsSecret : ($call is Operation\Actions\CreateOrUpdateOrgSecret::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\DeleteOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListSelectedReposForOrgSecret::OPERATION_MATCH ? Schema\Operation\Actions\ListSelectedReposForOrgSecret\Response\Applicationjson\H200 : ($call is Operation\Actions\SetSelectedReposForOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\AddSelectedRepoToOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\RemoveSelectedRepoFromOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListOrgVariables::OPERATION_MATCH ? Schema\Operation\Actions\ListOrgVariables\Response\Applicationjson\H200 : ($call is Operation\Actions\CreateOrgVariable::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\GetOrgVariable::OPERATION_MATCH ? Schema\OrganizationActionsVariable : ($call is Operation\Actions\DeleteOrgVariable::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\UpdateOrgVariable::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListSelectedReposForOrgVariable::OPERATION_MATCH ? Schema\Operation\Actions\ListSelectedReposForOrgVariable\Response\Applicationjson\H200 : ($call is Operation\Actions\SetSelectedReposForOrgVariable::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\AddSelectedRepoToOrgVariable::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\RemoveSelectedRepoFromOrgVariable::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Orgs\ListBlockedUsers::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Orgs\CheckBlockedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Orgs\BlockUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Orgs\UnblockUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\CodeScanning\ListAlertsForOrg::OPERATION_MATCH ? Schema\CodeScanningOrganizationAlertItems : ($call is Operation\Codespaces\ListInOrganization::OPERATION_MATCH ? Schema\Operation\Codespaces\ListInOrganization\Response\Applicationjson\H200 : ($call is Operation\Codespaces\SetCodespacesBilling::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Codespaces\SetCodespacesBillingUsers::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Codespaces\DeleteCodespacesBillingUsers::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Codespaces\ListOrgSecrets::OPERATION_MATCH ? Schema\Operation\Codespaces\ListOrgSecrets\Response\Applicationjson\H200 : ($call is Operation\Codespaces\GetOrgPublicKey::OPERATION_MATCH ? Schema\CodespacesPublicKey : ($call is Operation\Codespaces\GetOrgSecret::OPERATION_MATCH ? Schema\CodespacesOrgSecret : ($call is Operation\Codespaces\CreateOrUpdateOrgSecret::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Codespaces\DeleteOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Codespaces\ListSelectedReposForOrgSecret::OPERATION_MATCH ? Schema\Operation\Codespaces\ListSelectedReposForOrgSecret\Response\Applicationjson\H200 : ($call is Operation\Codespaces\SetSelectedReposForOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Codespaces\AddSelectedRepoToOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Codespaces\RemoveSelectedRepoFromOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Dependabot\ListAlertsForOrg::OPERATION_MATCH ? Schema\DependabotAlertWithRepository : ($call is Operation\Dependabot\ListOrgSecrets::OPERATION_MATCH ? Schema\Operation\Dependabot\ListOrgSecrets\Response\Applicationjson\H200 : ($call is Operation\Dependabot\GetOrgPublicKey::OPERATION_MATCH ? Schema\DependabotPublicKey : ($call is Operation\Dependabot\GetOrgSecret::OPERATION_MATCH ? Schema\OrganizationDependabotSecret : ($call is Operation\Dependabot\CreateOrUpdateOrgSecret::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Dependabot\DeleteOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Dependabot\ListSelectedReposForOrgSecret::OPERATION_MATCH ? Schema\Operation\Dependabot\ListSelectedReposForOrgSecret\Response\Applicationjson\H200 : ($call is Operation\Dependabot\SetSelectedReposForOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Dependabot\AddSelectedRepoToOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Dependabot\RemoveSelectedRepoFromOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Packages\ListDockerMigrationConflictingPackagesForOrganization::OPERATION_MATCH ? Schema\Package : ($call is Operation\Activity\ListPublicOrgEvents::OPERATION_MATCH ? Schema\Event : ($call is Operation\Orgs\ListFailedInvitations::OPERATION_MATCH ? Schema\OrganizationInvitation : ($call is Operation\Orgs\ListWebhooks::OPERATION_MATCH ? Schema\OrgHook : ($call is Operation\Orgs\CreateWebhook::OPERATION_MATCH ? Schema\OrgHook : ($call is Operation\Orgs\GetWebhook::OPERATION_MATCH ? Schema\OrgHook : ($call is Operation\Orgs\DeleteWebhook::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Orgs\UpdateWebhook::OPERATION_MATCH ? Schema\OrgHook : ($call is Operation\Orgs\GetWebhookConfigForOrg::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Operation\Orgs\UpdateWebhookConfigForOrg::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Operation\Orgs\ListWebhookDeliveries::OPERATION_MATCH ? Schema\HookDeliveryItem : ($call is Operation\Orgs\GetWebhookDelivery::OPERATION_MATCH ? Schema\HookDelivery : ($call is Operation\Orgs\RedeliverWebhookDelivery::OPERATION_MATCH ? Schema\Operation\Orgs\RedeliverWebhookDelivery\Response\Applicationjson\H202 : ($call is Operation\Orgs\PingWebhook::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Apps\GetOrgInstallation::OPERATION_MATCH ? Schema\Installation : ($call is Operation\Orgs\ListAppInstallations::OPERATION_MATCH ? Schema\Operation\Orgs\ListAppInstallations\Response\Applicationjson\H200 : ($call is Operation\Interactions\GetRestrictionsForOrg::OPERATION_MATCH ? Schema\Operation\Interactions\GetRestrictionsForOrg\Response\Applicationjson\H200 : ($call is Operation\Interactions\SetRestrictionsForOrg::OPERATION_MATCH ? Schema\InteractionLimitResponse : ($call is Operation\Interactions\RemoveRestrictionsForOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Orgs\ListPendingInvitations::OPERATION_MATCH ? Schema\OrganizationInvitation : ($call is Operation\Orgs\CreateInvitation::OPERATION_MATCH ? Schema\OrganizationInvitation : ($call is Operation\Orgs\CancelInvitation::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Orgs\ListInvitationTeams::OPERATION_MATCH ? Schema\Team : ($call is Operation\Issues\ListForOrg::OPERATION_MATCH ? Schema\Issue : ($call is Operation\Orgs\ListMembers::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Orgs\CheckMembershipForUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Orgs\RemoveMember::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Codespaces\GetCodespacesForUserInOrg::OPERATION_MATCH ? Schema\Operation\Codespaces\GetCodespacesForUserInOrg\Response\Applicationjson\H200 : ($call is Operation\Codespaces\DeleteFromOrganization::OPERATION_MATCH ? Schema\Operation\Codespaces\DeleteFromOrganization\Response\Applicationjson\H202 : ($call is Operation\Codespaces\StopInOrganization::OPERATION_MATCH ? Schema\Codespace : ($call is Operation\Orgs\GetMembershipForUser::OPERATION_MATCH ? Schema\OrgMembership : ($call is Operation\Orgs\SetMembershipForUser::OPERATION_MATCH ? Schema\OrgMembership : ($call is Operation\Orgs\RemoveMembershipForUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Migrations\ListForOrg::OPERATION_MATCH ? Schema\Migration : ($call is Operation\Migrations\StartForOrg::OPERATION_MATCH ? Schema\Migration : ($call is Operation\Migrations\GetStatusForOrg::OPERATION_MATCH ? Schema\Migration : ($call is Operation\Migrations\DownloadArchiveForOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Migrations\DownloadArchiveForOrgStreaming::OPERATION_MATCH ? iterable<string>|\Psr\Http\Message\ResponseInterface : ($call is Operation\Migrations\DeleteArchiveForOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Migrations\UnlockRepoForOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Migrations\ListReposForOrg::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Operation\Orgs\ListOutsideCollaborators::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Orgs\ConvertMemberToOutsideCollaborator::OPERATION_MATCH ? Schema\Operation\Orgs\ConvertMemberToOutsideCollaborator\Response\Applicationjson\H202 : ($call is Operation\Orgs\RemoveOutsideCollaborator::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Packages\ListPackagesForOrganization::OPERATION_MATCH ? Schema\Package : ($call is Operation\Packages\GetPackageForOrganization::OPERATION_MATCH ? Schema\Package : ($call is Operation\Packages\DeletePackageForOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Packages\RestorePackageForOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Packages\GetAllPackageVersionsForPackageOwnedByOrg::OPERATION_MATCH ? Schema\PackageVersion : ($call is Operation\Packages\GetPackageVersionForOrganization::OPERATION_MATCH ? Schema\PackageVersion : ($call is Operation\Packages\DeletePackageVersionForOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Packages\RestorePackageVersionForOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Projects\ListForOrg::OPERATION_MATCH ? Schema\Project : ($call is Operation\Projects\CreateForOrg::OPERATION_MATCH ? Schema\Project : ($call is Operation\Orgs\ListPublicMembers::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Orgs\CheckPublicMembershipForUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Orgs\SetPublicMembershipForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Orgs\RemovePublicMembershipForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\ListForOrg::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Operation\Repos\CreateInOrg::OPERATION_MATCH ? Schema\Repository : ($call is Operation\SecretScanning\ListAlertsForOrg::OPERATION_MATCH ? Schema\OrganizationSecretScanningAlert : ($call is Operation\Orgs\ListSecurityManagerTeams::OPERATION_MATCH ? Schema\TeamSimple : ($call is Operation\Orgs\AddSecurityManagerTeam::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Orgs\RemoveSecurityManagerTeam::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Billing\GetGithubActionsBillingOrg::OPERATION_MATCH ? Schema\ActionsBillingUsage : ($call is Operation\Billing\GetGithubPackagesBillingOrg::OPERATION_MATCH ? Schema\PackagesBillingUsage : ($call is Operation\Billing\GetSharedStorageBillingOrg::OPERATION_MATCH ? Schema\CombinedBillingUsage : ($call is Operation\Teams\List_::OPERATION_MATCH ? Schema\Team : ($call is Operation\Teams\Create::OPERATION_MATCH ? Schema\TeamFull : ($call is Operation\Teams\GetByName::OPERATION_MATCH ? Schema\TeamFull : ($call is Operation\Teams\DeleteInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\UpdateInOrg::OPERATION_MATCH ? Schema\TeamFull : ($call is Operation\Teams\ListDiscussionsInOrg::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Operation\Teams\CreateDiscussionInOrg::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Operation\Teams\GetDiscussionInOrg::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Operation\Teams\DeleteDiscussionInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\UpdateDiscussionInOrg::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Operation\Teams\ListDiscussionCommentsInOrg::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Operation\Teams\CreateDiscussionCommentInOrg::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Operation\Teams\GetDiscussionCommentInOrg::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Operation\Teams\DeleteDiscussionCommentInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\UpdateDiscussionCommentInOrg::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Operation\Reactions\ListForTeamDiscussionCommentInOrg::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\CreateForTeamDiscussionCommentInOrg::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\DeleteForTeamDiscussionComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Reactions\ListForTeamDiscussionInOrg::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\CreateForTeamDiscussionInOrg::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\DeleteForTeamDiscussion::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\ListPendingInvitationsInOrg::OPERATION_MATCH ? Schema\OrganizationInvitation : ($call is Operation\Teams\ListMembersInOrg::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Teams\GetMembershipForUserInOrg::OPERATION_MATCH ? Schema\TeamMembership : ($call is Operation\Teams\AddOrUpdateMembershipForUserInOrg::OPERATION_MATCH ? Schema\TeamMembership : ($call is Operation\Teams\RemoveMembershipForUserInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\ListProjectsInOrg::OPERATION_MATCH ? Schema\TeamProject : ($call is Operation\Teams\CheckPermissionsForProjectInOrg::OPERATION_MATCH ? Schema\TeamProject : ($call is Operation\Teams\AddOrUpdateProjectPermissionsInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\RemoveProjectInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\ListReposInOrg::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Operation\Teams\CheckPermissionsForRepoInOrg::OPERATION_MATCH ? Schema\TeamRepository : ($call is Operation\Teams\AddOrUpdateRepoPermissionsInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\RemoveRepoInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\ListChildInOrg::OPERATION_MATCH ? Schema\Team : ($call is Operation\Orgs\EnableOrDisableSecurityProductOnAllOrgRepos::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Projects\GetCard::OPERATION_MATCH ? Schema\ProjectCard : ($call is Operation\Projects\DeleteCard::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Projects\UpdateCard::OPERATION_MATCH ? Schema\ProjectCard : ($call is Operation\Projects\MoveCard::OPERATION_MATCH ? Schema\Operation\Projects\MoveCard\Response\Applicationjson\H201 : ($call is Operation\Projects\GetColumn::OPERATION_MATCH ? Schema\ProjectColumn : ($call is Operation\Projects\DeleteColumn::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Projects\UpdateColumn::OPERATION_MATCH ? Schema\ProjectColumn : ($call is Operation\Projects\ListCards::OPERATION_MATCH ? Schema\ProjectCard : ($call is Operation\Projects\CreateCard::OPERATION_MATCH ? Schema\ProjectCard : ($call is Operation\Projects\MoveColumn::OPERATION_MATCH ? Schema\Operation\Projects\MoveColumn\Response\Applicationjson\H201 : ($call is Operation\Projects\Get::OPERATION_MATCH ? Schema\Project : ($call is Operation\Projects\Delete::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Projects\Update::OPERATION_MATCH ? Schema\Project : ($call is Operation\Projects\ListCollaborators::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Projects\AddCollaborator::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Projects\RemoveCollaborator::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Projects\GetPermissionForUser::OPERATION_MATCH ? Schema\ProjectCollaboratorPermission : ($call is Operation\Projects\ListColumns::OPERATION_MATCH ? Schema\ProjectColumn : ($call is Operation\Projects\CreateColumn::OPERATION_MATCH ? Schema\ProjectColumn : ($call is Operation\RateLimit\Get::OPERATION_MATCH ? Schema\RateLimitOverview : ($call is Operation\Actions\ListRepoRequiredWorkflows::OPERATION_MATCH ? Schema\Operation\Actions\ListRepoRequiredWorkflows\Response\Applicationjson\H200 : ($call is Operation\Actions\GetRepoRequiredWorkflow::OPERATION_MATCH ? Schema\RepoRequiredWorkflow : ($call is Operation\Actions\GetRepoRequiredWorkflowUsage::OPERATION_MATCH ? Schema\WorkflowUsage : ($call is Operation\Repos\Get::OPERATION_MATCH ? Schema\FullRepository|Schema\BasicError : ($call is Operation\Repos\Delete::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Repos\Update::OPERATION_MATCH ? Schema\FullRepository|Schema\BasicError : ($call is Operation\Actions\ListArtifactsForRepo::OPERATION_MATCH ? Schema\Operation\Actions\ListArtifactsForRepo\Response\Applicationjson\H200 : ($call is Operation\Actions\GetArtifact::OPERATION_MATCH ? Schema\Artifact : ($call is Operation\Actions\DeleteArtifact::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\DownloadArtifact::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\DownloadArtifactStreaming::OPERATION_MATCH ? iterable<string>|\Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\GetActionsCacheUsage::OPERATION_MATCH ? Schema\ActionsCacheUsageByRepository : ($call is Operation\Actions\GetActionsCacheList::OPERATION_MATCH ? Schema\ActionsCacheList : ($call is Operation\Actions\DeleteActionsCacheByKey::OPERATION_MATCH ? Schema\ActionsCacheList : ($call is Operation\Actions\DeleteActionsCacheById::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\GetJobForWorkflowRun::OPERATION_MATCH ? Schema\Job : ($call is Operation\Actions\DownloadJobLogsForWorkflowRun::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\DownloadJobLogsForWorkflowRunStreaming::OPERATION_MATCH ? iterable<string>|\Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ReRunJobForWorkflowRun::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\GetCustomOidcSubClaimForRepo::OPERATION_MATCH ? Schema\OidcCustomSubRepo : ($call is Operation\Actions\SetCustomOidcSubClaimForRepo::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\ListRepoOrganizationSecrets::OPERATION_MATCH ? Schema\Operation\Actions\ListRepoOrganizationSecrets\Response\Applicationjson\H200 : ($call is Operation\Actions\ListRepoOrganizationVariables::OPERATION_MATCH ? Schema\Operation\Actions\ListRepoOrganizationVariables\Response\Applicationjson\H200 : ($call is Operation\Actions\GetGithubActionsPermissionsRepository::OPERATION_MATCH ? Schema\ActionsRepositoryPermissions : ($call is Operation\Actions\SetGithubActionsPermissionsRepository::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\GetWorkflowAccessToRepository::OPERATION_MATCH ? Schema\ActionsWorkflowAccessToRepository : ($call is Operation\Actions\SetWorkflowAccessToRepository::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\GetAllowedActionsRepository::OPERATION_MATCH ? Schema\SelectedActions : ($call is Operation\Actions\SetAllowedActionsRepository::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\GetGithubActionsDefaultWorkflowPermissionsRepository::OPERATION_MATCH ? Schema\ActionsGetDefaultWorkflowPermissions : ($call is Operation\Actions\SetGithubActionsDefaultWorkflowPermissionsRepository::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListRequiredWorkflowRuns::OPERATION_MATCH ? Schema\Operation\Actions\ListRequiredWorkflowRuns\Response\Applicationjson\H200 : ($call is Operation\Actions\ListSelfHostedRunnersForRepo::OPERATION_MATCH ? Schema\Operation\Actions\ListSelfHostedRunnersForRepo\Response\Applicationjson\H200 : ($call is Operation\Actions\ListRunnerApplicationsForRepo::OPERATION_MATCH ? Schema\RunnerApplication : ($call is Operation\Actions\CreateRegistrationTokenForRepo::OPERATION_MATCH ? Schema\AuthenticationToken : ($call is Operation\Actions\CreateRemoveTokenForRepo::OPERATION_MATCH ? Schema\AuthenticationToken : ($call is Operation\Actions\GetSelfHostedRunnerForRepo::OPERATION_MATCH ? Schema\Runner : ($call is Operation\Actions\DeleteSelfHostedRunnerFromRepo::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListLabelsForSelfHostedRunnerForRepo::OPERATION_MATCH ? Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200 : ($call is Operation\Actions\SetCustomLabelsForSelfHostedRunnerForRepo::OPERATION_MATCH ? Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200 : ($call is Operation\Actions\AddCustomLabelsToSelfHostedRunnerForRepo::OPERATION_MATCH ? Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200 : ($call is Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForRepo::OPERATION_MATCH ? Schema\Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForRepo\Response\Applicationjson\H200 : ($call is Operation\Actions\RemoveCustomLabelFromSelfHostedRunnerForRepo::OPERATION_MATCH ? Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200 : ($call is Operation\Actions\ListWorkflowRunsForRepo::OPERATION_MATCH ? Schema\Operation\Actions\ListWorkflowRunsForRepo\Response\Applicationjson\H200 : ($call is Operation\Actions\GetWorkflowRun::OPERATION_MATCH ? Schema\WorkflowRun : ($call is Operation\Actions\DeleteWorkflowRun::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\GetReviewsForRun::OPERATION_MATCH ? Schema\EnvironmentApprovals : ($call is Operation\Actions\ApproveWorkflowRun::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\ListWorkflowRunArtifacts::OPERATION_MATCH ? Schema\Operation\Actions\ListWorkflowRunArtifacts\Response\Applicationjson\H200 : ($call is Operation\Actions\GetWorkflowRunAttempt::OPERATION_MATCH ? Schema\WorkflowRun : ($call is Operation\Actions\ListJobsForWorkflowRunAttempt::OPERATION_MATCH ? Schema\Operation\Actions\ListJobsForWorkflowRunAttempt\Response\Applicationjson\H200 : ($call is Operation\Actions\DownloadWorkflowRunAttemptLogs::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\DownloadWorkflowRunAttemptLogsStreaming::OPERATION_MATCH ? iterable<string>|\Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\CancelWorkflowRun::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\ListJobsForWorkflowRun::OPERATION_MATCH ? Schema\Operation\Actions\ListJobsForWorkflowRun\Response\Applicationjson\H200 : ($call is Operation\Actions\DownloadWorkflowRunLogs::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\DownloadWorkflowRunLogsStreaming::OPERATION_MATCH ? iterable<string>|\Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\DeleteWorkflowRunLogs::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\GetPendingDeploymentsForRun::OPERATION_MATCH ? Schema\PendingDeployment : ($call is Operation\Actions\ReviewPendingDeploymentsForRun::OPERATION_MATCH ? Schema\Deployment : ($call is Operation\Actions\ReRunWorkflow::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\ReRunWorkflowFailedJobs::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\GetWorkflowRunUsage::OPERATION_MATCH ? Schema\WorkflowRunUsage : ($call is Operation\Actions\ListRepoSecrets::OPERATION_MATCH ? Schema\Operation\Actions\ListRepoSecrets\Response\Applicationjson\H200 : ($call is Operation\Actions\GetRepoPublicKey::OPERATION_MATCH ? Schema\ActionsPublicKey : ($call is Operation\Actions\GetRepoSecret::OPERATION_MATCH ? Schema\ActionsSecret : ($call is Operation\Actions\CreateOrUpdateRepoSecret::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\DeleteRepoSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListRepoVariables::OPERATION_MATCH ? Schema\Operation\Actions\ListRepoVariables\Response\Applicationjson\H200 : ($call is Operation\Actions\CreateRepoVariable::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\GetRepoVariable::OPERATION_MATCH ? Schema\ActionsVariable : ($call is Operation\Actions\DeleteRepoVariable::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\UpdateRepoVariable::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListRepoWorkflows::OPERATION_MATCH ? Schema\Operation\Actions\ListRepoWorkflows\Response\Applicationjson\H200 : ($call is Operation\Actions\GetWorkflow::OPERATION_MATCH ? Schema\Workflow : ($call is Operation\Actions\DisableWorkflow::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\CreateWorkflowDispatch::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\EnableWorkflow::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListWorkflowRuns::OPERATION_MATCH ? Schema\Operation\Actions\ListWorkflowRuns\Response\Applicationjson\H200 : ($call is Operation\Actions\GetWorkflowUsage::OPERATION_MATCH ? Schema\WorkflowUsage : ($call is Operation\Issues\ListAssignees::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Issues\CheckUserCanBeAssigned::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\ListAutolinks::OPERATION_MATCH ? Schema\Autolink : ($call is Operation\Repos\CreateAutolink::OPERATION_MATCH ? Schema\Autolink : ($call is Operation\Repos\GetAutolink::OPERATION_MATCH ? Schema\Autolink : ($call is Operation\Repos\DeleteAutolink::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\EnableAutomatedSecurityFixes::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\DisableAutomatedSecurityFixes::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\ListBranches::OPERATION_MATCH ? Schema\ShortBranch : ($call is Operation\Repos\GetBranch::OPERATION_MATCH ? Schema\BranchWithProtection|Schema\BasicError : ($call is Operation\Repos\GetBranchProtection::OPERATION_MATCH ? Schema\BranchProtection : ($call is Operation\Repos\UpdateBranchProtection::OPERATION_MATCH ? Schema\ProtectedBranch : ($call is Operation\Repos\DeleteBranchProtection::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\GetAdminBranchProtection::OPERATION_MATCH ? Schema\ProtectedBranchAdminEnforced : ($call is Operation\Repos\SetAdminBranchProtection::OPERATION_MATCH ? Schema\ProtectedBranchAdminEnforced : ($call is Operation\Repos\DeleteAdminBranchProtection::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\GetPullRequestReviewProtection::OPERATION_MATCH ? Schema\ProtectedBranchPullRequestReview : ($call is Operation\Repos\DeletePullRequestReviewProtection::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\UpdatePullRequestReviewProtection::OPERATION_MATCH ? Schema\ProtectedBranchPullRequestReview : ($call is Operation\Repos\GetCommitSignatureProtection::OPERATION_MATCH ? Schema\ProtectedBranchAdminEnforced : ($call is Operation\Repos\CreateCommitSignatureProtection::OPERATION_MATCH ? Schema\ProtectedBranchAdminEnforced : ($call is Operation\Repos\DeleteCommitSignatureProtection::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\GetStatusChecksProtection::OPERATION_MATCH ? Schema\StatusCheckPolicy : ($call is Operation\Repos\RemoveStatusCheckProtection::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\UpdateStatusCheckProtection::OPERATION_MATCH ? Schema\StatusCheckPolicy : ($call is Operation\Repos\GetAllStatusCheckContexts::OPERATION_MATCH ? Schema\Operation\Repos\GetAllStatusCheckContexts\Response\Applicationjson\H200 : ($call is Operation\Repos\SetStatusCheckContexts::OPERATION_MATCH ? Schema\Operation\Repos\SetStatusCheckContexts\Response\Applicationjson\H200 : ($call is Operation\Repos\AddStatusCheckContexts::OPERATION_MATCH ? Schema\Operation\Repos\AddStatusCheckContexts\Response\Applicationjson\H200 : ($call is Operation\Repos\RemoveStatusCheckContexts::OPERATION_MATCH ? Schema\Operation\Repos\RemoveStatusCheckContexts\Response\Applicationjson\H200 : ($call is Operation\Repos\GetAccessRestrictions::OPERATION_MATCH ? Schema\BranchRestrictionPolicy : ($call is Operation\Repos\DeleteAccessRestrictions::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\GetAppsWithAccessToProtectedBranch::OPERATION_MATCH ? Schema\Integration : ($call is Operation\Repos\SetAppAccessRestrictions::OPERATION_MATCH ? Schema\Integration : ($call is Operation\Repos\AddAppAccessRestrictions::OPERATION_MATCH ? Schema\Integration : ($call is Operation\Repos\RemoveAppAccessRestrictions::OPERATION_MATCH ? Schema\Integration : ($call is Operation\Repos\GetTeamsWithAccessToProtectedBranch::OPERATION_MATCH ? Schema\Team : ($call is Operation\Repos\SetTeamAccessRestrictions::OPERATION_MATCH ? Schema\Team : ($call is Operation\Repos\AddTeamAccessRestrictions::OPERATION_MATCH ? Schema\Team : ($call is Operation\Repos\RemoveTeamAccessRestrictions::OPERATION_MATCH ? Schema\Team : ($call is Operation\Repos\GetUsersWithAccessToProtectedBranch::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Repos\SetUserAccessRestrictions::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Repos\AddUserAccessRestrictions::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Repos\RemoveUserAccessRestrictions::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Repos\RenameBranch::OPERATION_MATCH ? Schema\BranchWithProtection : ($call is Operation\Checks\Create::OPERATION_MATCH ? Schema\CheckRun : ($call is Operation\Checks\Get::OPERATION_MATCH ? Schema\CheckRun : ($call is Operation\Checks\Update::OPERATION_MATCH ? Schema\CheckRun : ($call is Operation\Checks\ListAnnotations::OPERATION_MATCH ? Schema\CheckAnnotation : ($call is Operation\Checks\RerequestRun::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Checks\CreateSuite::OPERATION_MATCH ? Schema\CheckSuite : ($call is Operation\Checks\SetSuitesPreferences::OPERATION_MATCH ? Schema\CheckSuitePreference : ($call is Operation\Checks\GetSuite::OPERATION_MATCH ? Schema\CheckSuite : ($call is Operation\Checks\ListForSuite::OPERATION_MATCH ? Schema\Operation\Checks\ListForSuite\Response\Applicationjson\H200 : ($call is Operation\Checks\RerequestSuite::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\CodeScanning\ListAlertsForRepo::OPERATION_MATCH ? Schema\CodeScanningAlertItems : ($call is Operation\CodeScanning\GetAlert::OPERATION_MATCH ? Schema\CodeScanningAlert : ($call is Operation\CodeScanning\UpdateAlert::OPERATION_MATCH ? Schema\CodeScanningAlert : ($call is Operation\CodeScanning\ListAlertInstances::OPERATION_MATCH ? Schema\CodeScanningAlertInstance : ($call is Operation\CodeScanning\ListRecentAnalyses::OPERATION_MATCH ? Schema\CodeScanningAnalysis : ($call is Operation\CodeScanning\GetAnalysis::OPERATION_MATCH ? Schema\CodeScanningAnalysis|Schema\Operation\CodeScanning\GetAnalysis\Response\ApplicationjsonPlusSarif\H200 : ($call is Operation\CodeScanning\DeleteAnalysis::OPERATION_MATCH ? Schema\CodeScanningAnalysisDeletion : ($call is Operation\CodeScanning\ListCodeqlDatabases::OPERATION_MATCH ? Schema\CodeScanningCodeqlDatabase : ($call is Operation\CodeScanning\GetCodeqlDatabase::OPERATION_MATCH ? Schema\CodeScanningCodeqlDatabase : ($call is Operation\CodeScanning\GetDefaultSetup::OPERATION_MATCH ? Schema\CodeScanningDefaultSetup : ($call is Operation\CodeScanning\UpdateDefaultSetup::OPERATION_MATCH ? Schema\EmptyObject|Schema\CodeScanningDefaultSetupUpdateResponse : ($call is Operation\CodeScanning\UploadSarif::OPERATION_MATCH ? Schema\CodeScanningSarifsReceipt : ($call is Operation\CodeScanning\GetSarif::OPERATION_MATCH ? Schema\CodeScanningSarifsStatus : ($call is Operation\Repos\CodeownersErrors::OPERATION_MATCH ? Schema\CodeownersErrors : ($call is Operation\Codespaces\ListInRepositoryForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Codespaces\ListInRepositoryForAuthenticatedUser\Response\Applicationjson\H200 : ($call is Operation\Codespaces\CreateWithRepoForAuthenticatedUser::OPERATION_MATCH ? Schema\Codespace : ($call is Operation\Codespaces\ListDevcontainersInRepositoryForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Codespaces\ListDevcontainersInRepositoryForAuthenticatedUser\Response\Applicationjson\H200 : ($call is Operation\Codespaces\RepoMachinesForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Codespaces\RepoMachinesForAuthenticatedUser\Response\Applicationjson\H200 : ($call is Operation\Codespaces\PreFlightWithRepoForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Codespaces\PreFlightWithRepoForAuthenticatedUser\Response\Applicationjson\H200 : ($call is Operation\Codespaces\ListRepoSecrets::OPERATION_MATCH ? Schema\Operation\Codespaces\ListRepoSecrets\Response\Applicationjson\H200 : ($call is Operation\Codespaces\GetRepoPublicKey::OPERATION_MATCH ? Schema\CodespacesPublicKey : ($call is Operation\Codespaces\GetRepoSecret::OPERATION_MATCH ? Schema\RepoCodespacesSecret : ($call is Operation\Codespaces\CreateOrUpdateRepoSecret::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Codespaces\DeleteRepoSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\ListCollaborators::OPERATION_MATCH ? Schema\Collaborator : ($call is Operation\Repos\CheckCollaborator::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\AddCollaborator::OPERATION_MATCH ? Schema\RepositoryInvitation : ($call is Operation\Repos\RemoveCollaborator::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\GetCollaboratorPermissionLevel::OPERATION_MATCH ? Schema\RepositoryCollaboratorPermission : ($call is Operation\Repos\ListCommitCommentsForRepo::OPERATION_MATCH ? Schema\CommitComment : ($call is Operation\Repos\GetCommitComment::OPERATION_MATCH ? Schema\CommitComment : ($call is Operation\Repos\DeleteCommitComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\UpdateCommitComment::OPERATION_MATCH ? Schema\CommitComment : ($call is Operation\Reactions\ListForCommitComment::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\CreateForCommitComment::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\DeleteForCommitComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\ListCommits::OPERATION_MATCH ? Schema\Commit : ($call is Operation\Repos\ListBranchesForHeadCommit::OPERATION_MATCH ? Schema\BranchShort : ($call is Operation\Repos\ListCommentsForCommit::OPERATION_MATCH ? Schema\CommitComment : ($call is Operation\Repos\CreateCommitComment::OPERATION_MATCH ? Schema\CommitComment : ($call is Operation\Repos\ListPullRequestsAssociatedWithCommit::OPERATION_MATCH ? Schema\PullRequestSimple : ($call is Operation\Repos\GetCommit::OPERATION_MATCH ? Schema\Commit : ($call is Operation\Checks\ListForRef::OPERATION_MATCH ? Schema\Operation\Checks\ListForRef\Response\Applicationjson\H200 : ($call is Operation\Checks\ListSuitesForRef::OPERATION_MATCH ? Schema\Operation\Checks\ListSuitesForRef\Response\Applicationjson\H200 : ($call is Operation\Repos\GetCombinedStatusForRef::OPERATION_MATCH ? Schema\CombinedCommitStatus : ($call is Operation\Repos\ListCommitStatusesForRef::OPERATION_MATCH ? Schema\Status|Schema\BasicError : ($call is Operation\Repos\GetCommunityProfileMetrics::OPERATION_MATCH ? Schema\CommunityProfile : ($call is Operation\Repos\CompareCommits::OPERATION_MATCH ? Schema\CommitComparison : ($call is Operation\Repos\GetContent::OPERATION_MATCH ? Schema\ContentTree|Schema\Operation\Repos\GetContent\Response\Applicationjson\H200 : ($call is Operation\Repos\CreateOrUpdateFileContents::OPERATION_MATCH ? Schema\FileCommit : ($call is Operation\Repos\DeleteFile::OPERATION_MATCH ? Schema\FileCommit : ($call is Operation\Repos\ListContributors::OPERATION_MATCH ? Schema\Contributor : ($call is Operation\Dependabot\ListAlertsForRepo::OPERATION_MATCH ? Schema\DependabotAlert : ($call is Operation\Dependabot\GetAlert::OPERATION_MATCH ? Schema\DependabotAlert : ($call is Operation\Dependabot\UpdateAlert::OPERATION_MATCH ? Schema\DependabotAlert : ($call is Operation\Dependabot\ListRepoSecrets::OPERATION_MATCH ? Schema\Operation\Dependabot\ListRepoSecrets\Response\Applicationjson\H200 : ($call is Operation\Dependabot\GetRepoPublicKey::OPERATION_MATCH ? Schema\DependabotPublicKey : ($call is Operation\Dependabot\GetRepoSecret::OPERATION_MATCH ? Schema\DependabotSecret : ($call is Operation\Dependabot\CreateOrUpdateRepoSecret::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Dependabot\DeleteRepoSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\DependencyGraph\DiffRange::OPERATION_MATCH ? Schema\DependencyGraphDiff : ($call is Operation\DependencyGraph\ExportSbom::OPERATION_MATCH ? Schema\DependencyGraphSpdxSbom : ($call is Operation\DependencyGraph\CreateRepositorySnapshot::OPERATION_MATCH ? Schema\Operation\DependencyGraph\CreateRepositorySnapshot\Response\Applicationjson\H201 : ($call is Operation\Repos\ListDeployments::OPERATION_MATCH ? Schema\Deployment : ($call is Operation\Repos\CreateDeployment::OPERATION_MATCH ? Schema\Deployment|Schema\Operation\Repos\CreateDeployment\Response\Applicationjson\H202 : ($call is Operation\Repos\GetDeployment::OPERATION_MATCH ? Schema\Deployment : ($call is Operation\Repos\DeleteDeployment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\ListDeploymentStatuses::OPERATION_MATCH ? Schema\DeploymentStatus : ($call is Operation\Repos\CreateDeploymentStatus::OPERATION_MATCH ? Schema\DeploymentStatus : ($call is Operation\Repos\GetDeploymentStatus::OPERATION_MATCH ? Schema\DeploymentStatus : ($call is Operation\Repos\CreateDispatchEvent::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\GetAllEnvironments::OPERATION_MATCH ? Schema\Operation\Repos\GetAllEnvironments\Response\Applicationjson\H200 : ($call is Operation\Repos\GetEnvironment::OPERATION_MATCH ? Schema\Environment : ($call is Operation\Repos\CreateOrUpdateEnvironment::OPERATION_MATCH ? Schema\Environment : ($call is Operation\Repos\DeleteAnEnvironment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\ListDeploymentBranchPolicies::OPERATION_MATCH ? Schema\Operation\Repos\ListDeploymentBranchPolicies\Response\Applicationjson\H200 : ($call is Operation\Repos\CreateDeploymentBranchPolicy::OPERATION_MATCH ? Schema\DeploymentBranchPolicy : ($call is Operation\Repos\GetDeploymentBranchPolicy::OPERATION_MATCH ? Schema\DeploymentBranchPolicy : ($call is Operation\Repos\UpdateDeploymentBranchPolicy::OPERATION_MATCH ? Schema\DeploymentBranchPolicy : ($call is Operation\Repos\DeleteDeploymentBranchPolicy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Activity\ListRepoEvents::OPERATION_MATCH ? Schema\Event : ($call is Operation\Repos\ListForks::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Operation\Repos\CreateFork::OPERATION_MATCH ? Schema\FullRepository : ($call is Operation\Git\CreateBlob::OPERATION_MATCH ? Schema\ShortBlob : ($call is Operation\Git\GetBlob::OPERATION_MATCH ? Schema\Blob : ($call is Operation\Git\CreateCommit::OPERATION_MATCH ? Schema\GitCommit : ($call is Operation\Git\GetCommit::OPERATION_MATCH ? Schema\GitCommit : ($call is Operation\Git\ListMatchingRefs::OPERATION_MATCH ? Schema\GitRef : ($call is Operation\Git\GetRef::OPERATION_MATCH ? Schema\GitRef : ($call is Operation\Git\CreateRef::OPERATION_MATCH ? Schema\GitRef : ($call is Operation\Git\DeleteRef::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Git\UpdateRef::OPERATION_MATCH ? Schema\GitRef : ($call is Operation\Git\CreateTag::OPERATION_MATCH ? Schema\GitTag : ($call is Operation\Git\GetTag::OPERATION_MATCH ? Schema\GitTag : ($call is Operation\Git\CreateTree::OPERATION_MATCH ? Schema\GitTree : ($call is Operation\Git\GetTree::OPERATION_MATCH ? Schema\GitTree : ($call is Operation\Repos\ListWebhooks::OPERATION_MATCH ? Schema\Hook : ($call is Operation\Repos\CreateWebhook::OPERATION_MATCH ? Schema\Hook : ($call is Operation\Repos\GetWebhook::OPERATION_MATCH ? Schema\Hook : ($call is Operation\Repos\DeleteWebhook::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\UpdateWebhook::OPERATION_MATCH ? Schema\Hook : ($call is Operation\Repos\GetWebhookConfigForRepo::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Operation\Repos\UpdateWebhookConfigForRepo::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Operation\Repos\ListWebhookDeliveries::OPERATION_MATCH ? Schema\HookDeliveryItem : ($call is Operation\Repos\GetWebhookDelivery::OPERATION_MATCH ? Schema\HookDelivery : ($call is Operation\Repos\RedeliverWebhookDelivery::OPERATION_MATCH ? Schema\Operation\Repos\RedeliverWebhookDelivery\Response\Applicationjson\H202 : ($call is Operation\Repos\PingWebhook::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\TestPushWebhook::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Migrations\GetImportStatus::OPERATION_MATCH ? Schema\Import : ($call is Operation\Migrations\StartImport::OPERATION_MATCH ? Schema\Import : ($call is Operation\Migrations\CancelImport::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Migrations\UpdateImport::OPERATION_MATCH ? Schema\Import : ($call is Operation\Migrations\GetCommitAuthors::OPERATION_MATCH ? Schema\PorterAuthor : ($call is Operation\Migrations\MapCommitAuthor::OPERATION_MATCH ? Schema\PorterAuthor : ($call is Operation\Migrations\GetLargeFiles::OPERATION_MATCH ? Schema\PorterLargeFile : ($call is Operation\Migrations\SetLfsPreference::OPERATION_MATCH ? Schema\Import : ($call is Operation\Apps\GetRepoInstallation::OPERATION_MATCH ? Schema\Installation|Schema\BasicError : ($call is Operation\Interactions\GetRestrictionsForRepo::OPERATION_MATCH ? Schema\Operation\Interactions\GetRestrictionsForRepo\Response\Applicationjson\H200 : ($call is Operation\Interactions\SetRestrictionsForRepo::OPERATION_MATCH ? Schema\InteractionLimitResponse : ($call is Operation\Interactions\RemoveRestrictionsForRepo::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\ListInvitations::OPERATION_MATCH ? Schema\RepositoryInvitation : ($call is Operation\Repos\DeleteInvitation::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\UpdateInvitation::OPERATION_MATCH ? Schema\RepositoryInvitation : ($call is Operation\Issues\ListForRepo::OPERATION_MATCH ? Schema\Issue|Schema\BasicError : ($call is Operation\Issues\Create::OPERATION_MATCH ? Schema\Issue : ($call is Operation\Issues\ListCommentsForRepo::OPERATION_MATCH ? Schema\IssueComment : ($call is Operation\Issues\GetComment::OPERATION_MATCH ? Schema\IssueComment : ($call is Operation\Issues\DeleteComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Issues\UpdateComment::OPERATION_MATCH ? Schema\IssueComment : ($call is Operation\Reactions\ListForIssueComment::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\CreateForIssueComment::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\DeleteForIssueComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Issues\ListEventsForRepo::OPERATION_MATCH ? Schema\IssueEvent : ($call is Operation\Issues\GetEvent::OPERATION_MATCH ? Schema\IssueEvent : ($call is Operation\Issues\Get::OPERATION_MATCH ? Schema\Issue|Schema\BasicError : ($call is Operation\Issues\Update::OPERATION_MATCH ? Schema\Issue|Schema\BasicError : ($call is Operation\Issues\AddAssignees::OPERATION_MATCH ? Schema\Issue : ($call is Operation\Issues\RemoveAssignees::OPERATION_MATCH ? Schema\Issue : ($call is Operation\Issues\CheckUserCanBeAssignedToIssue::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Issues\ListComments::OPERATION_MATCH ? Schema\IssueComment : ($call is Operation\Issues\CreateComment::OPERATION_MATCH ? Schema\IssueComment : ($call is Operation\Issues\ListEvents::OPERATION_MATCH ? Schema\IssueEventForIssue : ($call is Operation\Issues\ListLabelsOnIssue::OPERATION_MATCH ? Schema\Label|Schema\BasicError : ($call is Operation\Issues\SetLabels::OPERATION_MATCH ? Schema\Label|Schema\BasicError : ($call is Operation\Issues\AddLabels::OPERATION_MATCH ? Schema\Label|Schema\BasicError : ($call is Operation\Issues\RemoveAllLabels::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Issues\RemoveLabel::OPERATION_MATCH ? Schema\Label|Schema\BasicError : ($call is Operation\Issues\Lock::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Issues\Unlock::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Reactions\ListForIssue::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\CreateForIssue::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\DeleteForIssue::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Issues\ListEventsForTimeline::OPERATION_MATCH ? Schema\TimelineIssueEvents : ($call is Operation\Repos\ListDeployKeys::OPERATION_MATCH ? Schema\DeployKey : ($call is Operation\Repos\CreateDeployKey::OPERATION_MATCH ? Schema\DeployKey : ($call is Operation\Repos\GetDeployKey::OPERATION_MATCH ? Schema\DeployKey : ($call is Operation\Repos\DeleteDeployKey::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Issues\ListLabelsForRepo::OPERATION_MATCH ? Schema\Label : ($call is Operation\Issues\CreateLabel::OPERATION_MATCH ? Schema\Label : ($call is Operation\Issues\GetLabel::OPERATION_MATCH ? Schema\Label : ($call is Operation\Issues\DeleteLabel::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Issues\UpdateLabel::OPERATION_MATCH ? Schema\Label : ($call is Operation\Repos\ListLanguages::OPERATION_MATCH ? Schema\Language : ($call is Operation\Repos\EnableLfsForRepo::OPERATION_MATCH ? Schema\Operation\Repos\EnableLfsForRepo\Response\Applicationjson\H202 : ($call is Operation\Repos\DisableLfsForRepo::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Licenses\GetForRepo::OPERATION_MATCH ? Schema\LicenseContent : ($call is Operation\Repos\MergeUpstream::OPERATION_MATCH ? Schema\MergedUpstream : ($call is Operation\Repos\Merge::OPERATION_MATCH ? Schema\Commit : ($call is Operation\Issues\ListMilestones::OPERATION_MATCH ? Schema\Milestone : ($call is Operation\Issues\CreateMilestone::OPERATION_MATCH ? Schema\Milestone : ($call is Operation\Issues\GetMilestone::OPERATION_MATCH ? Schema\Milestone : ($call is Operation\Issues\DeleteMilestone::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Issues\UpdateMilestone::OPERATION_MATCH ? Schema\Milestone : ($call is Operation\Issues\ListLabelsForMilestone::OPERATION_MATCH ? Schema\Label : ($call is Operation\Activity\ListRepoNotificationsForAuthenticatedUser::OPERATION_MATCH ? Schema\Thread : ($call is Operation\Activity\MarkRepoNotificationsAsRead::OPERATION_MATCH ? Schema\Operation\Activity\MarkRepoNotificationsAsRead\Response\Applicationjson\H202 : ($call is Operation\Repos\GetPages::OPERATION_MATCH ? Schema\Page : ($call is Operation\Repos\UpdateInformationAboutPagesSite::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\CreatePagesSite::OPERATION_MATCH ? Schema\Page : ($call is Operation\Repos\DeletePagesSite::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\ListPagesBuilds::OPERATION_MATCH ? Schema\PageBuild : ($call is Operation\Repos\RequestPagesBuild::OPERATION_MATCH ? Schema\PageBuildStatus : ($call is Operation\Repos\GetLatestPagesBuild::OPERATION_MATCH ? Schema\PageBuild : ($call is Operation\Repos\GetPagesBuild::OPERATION_MATCH ? Schema\PageBuild : ($call is Operation\Repos\CreatePagesDeployment::OPERATION_MATCH ? Schema\PageDeployment : ($call is Operation\Repos\GetPagesHealthCheck::OPERATION_MATCH ? Schema\PagesHealthCheck|Schema\EmptyObject : ($call is Operation\Projects\ListForRepo::OPERATION_MATCH ? Schema\Project : ($call is Operation\Projects\CreateForRepo::OPERATION_MATCH ? Schema\Project : ($call is Operation\Pulls\List_::OPERATION_MATCH ? Schema\PullRequestSimple : ($call is Operation\Pulls\Create::OPERATION_MATCH ? Schema\PullRequest : ($call is Operation\Pulls\ListReviewCommentsForRepo::OPERATION_MATCH ? Schema\PullRequestReviewComment : ($call is Operation\Pulls\GetReviewComment::OPERATION_MATCH ? Schema\PullRequestReviewComment : ($call is Operation\Pulls\DeleteReviewComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Pulls\UpdateReviewComment::OPERATION_MATCH ? Schema\PullRequestReviewComment : ($call is Operation\Reactions\ListForPullRequestReviewComment::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\CreateForPullRequestReviewComment::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\DeleteForPullRequestComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Pulls\Get::OPERATION_MATCH ? Schema\PullRequest : ($call is Operation\Pulls\Update::OPERATION_MATCH ? Schema\PullRequest : ($call is Operation\Codespaces\CreateWithPrForAuthenticatedUser::OPERATION_MATCH ? Schema\Codespace : ($call is Operation\Pulls\ListReviewComments::OPERATION_MATCH ? Schema\PullRequestReviewComment : ($call is Operation\Pulls\CreateReviewComment::OPERATION_MATCH ? Schema\PullRequestReviewComment : ($call is Operation\Pulls\CreateReplyForReviewComment::OPERATION_MATCH ? Schema\PullRequestReviewComment : ($call is Operation\Pulls\ListCommits::OPERATION_MATCH ? Schema\Commit : ($call is Operation\Pulls\ListFiles::OPERATION_MATCH ? Schema\DiffEntry : ($call is Operation\Pulls\CheckIfMerged::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Pulls\Merge::OPERATION_MATCH ? Schema\PullRequestMergeResult : ($call is Operation\Pulls\ListRequestedReviewers::OPERATION_MATCH ? Schema\PullRequestReviewRequest : ($call is Operation\Pulls\RequestReviewers::OPERATION_MATCH ? Schema\PullRequestSimple : ($call is Operation\Pulls\RemoveRequestedReviewers::OPERATION_MATCH ? Schema\PullRequestSimple : ($call is Operation\Pulls\ListReviews::OPERATION_MATCH ? Schema\PullRequestReview : ($call is Operation\Pulls\CreateReview::OPERATION_MATCH ? Schema\PullRequestReview : ($call is Operation\Pulls\GetReview::OPERATION_MATCH ? Schema\PullRequestReview : ($call is Operation\Pulls\UpdateReview::OPERATION_MATCH ? Schema\PullRequestReview : ($call is Operation\Pulls\DeletePendingReview::OPERATION_MATCH ? Schema\PullRequestReview : ($call is Operation\Pulls\ListCommentsForReview::OPERATION_MATCH ? Schema\ReviewComment : ($call is Operation\Pulls\DismissReview::OPERATION_MATCH ? Schema\PullRequestReview : ($call is Operation\Pulls\SubmitReview::OPERATION_MATCH ? Schema\PullRequestReview : ($call is Operation\Pulls\UpdateBranch::OPERATION_MATCH ? Schema\Operation\Pulls\UpdateBranch\Response\Applicationjson\H202 : ($call is Operation\Repos\GetReadme::OPERATION_MATCH ? Schema\ContentFile : ($call is Operation\Repos\GetReadmeInDirectory::OPERATION_MATCH ? Schema\ContentFile : ($call is Operation\Repos\ListReleases::OPERATION_MATCH ? Schema\Release : ($call is Operation\Repos\CreateRelease::OPERATION_MATCH ? Schema\Release : ($call is Operation\Repos\GetReleaseAsset::OPERATION_MATCH ? Schema\ReleaseAsset : ($call is Operation\Repos\DeleteReleaseAsset::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\UpdateReleaseAsset::OPERATION_MATCH ? Schema\ReleaseAsset : ($call is Operation\Repos\GenerateReleaseNotes::OPERATION_MATCH ? Schema\ReleaseNotesContent : ($call is Operation\Repos\GetLatestRelease::OPERATION_MATCH ? Schema\Release : ($call is Operation\Repos\GetReleaseByTag::OPERATION_MATCH ? Schema\Release : ($call is Operation\Repos\GetRelease::OPERATION_MATCH ? Schema\Release : ($call is Operation\Repos\DeleteRelease::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\UpdateRelease::OPERATION_MATCH ? Schema\Release : ($call is Operation\Repos\ListReleaseAssets::OPERATION_MATCH ? Schema\ReleaseAsset : ($call is Operation\Repos\UploadReleaseAsset::OPERATION_MATCH ? Schema\ReleaseAsset : ($call is Operation\Reactions\ListForRelease::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\CreateForRelease::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\DeleteForRelease::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\SecretScanning\ListAlertsForRepo::OPERATION_MATCH ? Schema\SecretScanningAlert : ($call is Operation\SecretScanning\GetAlert::OPERATION_MATCH ? Schema\SecretScanningAlert : ($call is Operation\SecretScanning\UpdateAlert::OPERATION_MATCH ? Schema\SecretScanningAlert : ($call is Operation\SecretScanning\ListLocationsForAlert::OPERATION_MATCH ? Schema\SecretScanningLocation : ($call is Operation\SecurityAdvisories\ListRepositoryAdvisories::OPERATION_MATCH ? Schema\RepositoryAdvisory : ($call is Operation\SecurityAdvisories\CreateRepositoryAdvisory::OPERATION_MATCH ? Schema\RepositoryAdvisory : ($call is Operation\SecurityAdvisories\GetRepositoryAdvisory::OPERATION_MATCH ? Schema\RepositoryAdvisory : ($call is Operation\SecurityAdvisories\UpdateRepositoryAdvisory::OPERATION_MATCH ? Schema\RepositoryAdvisory : ($call is Operation\Activity\ListStargazersForRepo::OPERATION_MATCH ? Schema\Operation\Activity\ListStargazersForRepo\Response\Applicationjson\H200 : ($call is Operation\Repos\GetCodeFrequencyStats::OPERATION_MATCH ? Schema\Operation\Repos\GetCodeFrequencyStats\Response\Applicationjson\H200|Schema\Operation\Repos\GetCodeFrequencyStats\Response\Applicationjson\H202 : ($call is Operation\Repos\GetCommitActivityStats::OPERATION_MATCH ? Schema\CommitActivity|Schema\Operation\Repos\GetCommitActivityStats\Response\Applicationjson\H202 : ($call is Operation\Repos\GetContributorsStats::OPERATION_MATCH ? Schema\ContributorActivity|Schema\Operation\Repos\GetContributorsStats\Response\Applicationjson\H202 : ($call is Operation\Repos\GetParticipationStats::OPERATION_MATCH ? Schema\ParticipationStats : ($call is Operation\Repos\GetPunchCardStats::OPERATION_MATCH ? Schema\Operation\Repos\GetCodeFrequencyStats\Response\Applicationjson\H200 : ($call is Operation\Repos\CreateCommitStatus::OPERATION_MATCH ? Schema\Status : ($call is Operation\Activity\ListWatchersForRepo::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Activity\GetRepoSubscription::OPERATION_MATCH ? Schema\RepositorySubscription : ($call is Operation\Activity\SetRepoSubscription::OPERATION_MATCH ? Schema\RepositorySubscription : ($call is Operation\Activity\DeleteRepoSubscription::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\ListTags::OPERATION_MATCH ? Schema\Tag : ($call is Operation\Repos\ListTagProtection::OPERATION_MATCH ? Schema\TagProtection : ($call is Operation\Repos\CreateTagProtection::OPERATION_MATCH ? Schema\TagProtection : ($call is Operation\Repos\DeleteTagProtection::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\DownloadTarballArchive::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\DownloadTarballArchiveStreaming::OPERATION_MATCH ? iterable<string>|\Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\ListTeams::OPERATION_MATCH ? Schema\Team : ($call is Operation\Repos\GetAllTopics::OPERATION_MATCH ? Schema\Topic : ($call is Operation\Repos\ReplaceAllTopics::OPERATION_MATCH ? Schema\Topic : ($call is Operation\Repos\GetClones::OPERATION_MATCH ? Schema\CloneTraffic : ($call is Operation\Repos\GetTopPaths::OPERATION_MATCH ? Schema\ContentTraffic : ($call is Operation\Repos\GetTopReferrers::OPERATION_MATCH ? Schema\ReferrerTraffic : ($call is Operation\Repos\GetViews::OPERATION_MATCH ? Schema\ViewTraffic : ($call is Operation\Repos\Transfer::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Operation\Repos\CheckVulnerabilityAlerts::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\EnableVulnerabilityAlerts::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\DisableVulnerabilityAlerts::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\DownloadZipballArchive::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\DownloadZipballArchiveStreaming::OPERATION_MATCH ? iterable<string>|\Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\CreateUsingTemplate::OPERATION_MATCH ? Schema\Repository : ($call is Operation\Repos\ListPublic::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Operation\Actions\ListEnvironmentSecrets::OPERATION_MATCH ? Schema\Operation\Actions\ListEnvironmentSecrets\Response\Applicationjson\H200 : ($call is Operation\Actions\GetEnvironmentPublicKey::OPERATION_MATCH ? Schema\ActionsPublicKey : ($call is Operation\Actions\GetEnvironmentSecret::OPERATION_MATCH ? Schema\ActionsSecret : ($call is Operation\Actions\CreateOrUpdateEnvironmentSecret::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\DeleteEnvironmentSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListEnvironmentVariables::OPERATION_MATCH ? Schema\Operation\Actions\ListEnvironmentVariables\Response\Applicationjson\H200 : ($call is Operation\Actions\CreateEnvironmentVariable::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\GetEnvironmentVariable::OPERATION_MATCH ? Schema\ActionsVariable : ($call is Operation\Actions\DeleteEnvironmentVariable::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\UpdateEnvironmentVariable::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Search\Code::OPERATION_MATCH ? Schema\Operation\Search\Code\Response\Applicationjson\H200 : ($call is Operation\Search\Commits::OPERATION_MATCH ? Schema\Operation\Search\Commits\Response\Applicationjson\H200 : ($call is Operation\Search\IssuesAndPullRequests::OPERATION_MATCH ? Schema\Operation\Search\IssuesAndPullRequests\Response\Applicationjson\H200 : ($call is Operation\Search\Labels::OPERATION_MATCH ? Schema\Operation\Search\Labels\Response\Applicationjson\H200 : ($call is Operation\Search\Repos::OPERATION_MATCH ? Schema\Operation\Search\Repos\Response\Applicationjson\H200 : ($call is Operation\Search\Topics::OPERATION_MATCH ? Schema\Operation\Search\Topics\Response\Applicationjson\H200 : ($call is Operation\Search\Users::OPERATION_MATCH ? Schema\Operation\Search\Users\Response\Applicationjson\H200 : ($call is Operation\Teams\GetLegacy::OPERATION_MATCH ? Schema\TeamFull : ($call is Operation\Teams\DeleteLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\UpdateLegacy::OPERATION_MATCH ? Schema\TeamFull : ($call is Operation\Teams\ListDiscussionsLegacy::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Operation\Teams\CreateDiscussionLegacy::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Operation\Teams\GetDiscussionLegacy::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Operation\Teams\DeleteDiscussionLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\UpdateDiscussionLegacy::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Operation\Teams\ListDiscussionCommentsLegacy::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Operation\Teams\CreateDiscussionCommentLegacy::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Operation\Teams\GetDiscussionCommentLegacy::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Operation\Teams\DeleteDiscussionCommentLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\UpdateDiscussionCommentLegacy::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Operation\Reactions\ListForTeamDiscussionCommentLegacy::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\CreateForTeamDiscussionCommentLegacy::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\ListForTeamDiscussionLegacy::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\CreateForTeamDiscussionLegacy::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Teams\ListPendingInvitationsLegacy::OPERATION_MATCH ? Schema\OrganizationInvitation : ($call is Operation\Teams\ListMembersLegacy::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Teams\GetMemberLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\AddMemberLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\RemoveMemberLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\GetMembershipForUserLegacy::OPERATION_MATCH ? Schema\TeamMembership : ($call is Operation\Teams\AddOrUpdateMembershipForUserLegacy::OPERATION_MATCH ? Schema\TeamMembership : ($call is Operation\Teams\RemoveMembershipForUserLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\ListProjectsLegacy::OPERATION_MATCH ? Schema\TeamProject : ($call is Operation\Teams\CheckPermissionsForProjectLegacy::OPERATION_MATCH ? Schema\TeamProject : ($call is Operation\Teams\AddOrUpdateProjectPermissionsLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\RemoveProjectLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\ListReposLegacy::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Operation\Teams\CheckPermissionsForRepoLegacy::OPERATION_MATCH ? Schema\TeamRepository : ($call is Operation\Teams\AddOrUpdateRepoPermissionsLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\RemoveRepoLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\ListChildLegacy::OPERATION_MATCH ? Schema\Team : ($call is Operation\Users\GetAuthenticated::OPERATION_MATCH ? Schema\Operation\Users\GetAuthenticated\Response\Applicationjson\H200 : ($call is Operation\Users\UpdateAuthenticated::OPERATION_MATCH ? Schema\PrivateUser : ($call is Operation\Users\ListBlockedByAuthenticatedUser::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Users\CheckBlocked::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Users\Block::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Users\Unblock::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Codespaces\ListForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Codespaces\ListForAuthenticatedUser\Response\Applicationjson\H200 : ($call is Operation\Codespaces\CreateForAuthenticatedUser::OPERATION_MATCH ? Schema\Codespace : ($call is Operation\Codespaces\ListSecretsForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Codespaces\ListSecretsForAuthenticatedUser\Response\Applicationjson\H200 : ($call is Operation\Codespaces\GetPublicKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\CodespacesUserPublicKey : ($call is Operation\Codespaces\GetSecretForAuthenticatedUser::OPERATION_MATCH ? Schema\CodespacesSecret : ($call is Operation\Codespaces\CreateOrUpdateSecretForAuthenticatedUser::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Codespaces\DeleteSecretForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Codespaces\ListRepositoriesForSecretForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Codespaces\ListRepositoriesForSecretForAuthenticatedUser\Response\Applicationjson\H200 : ($call is Operation\Codespaces\SetRepositoriesForSecretForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Codespaces\AddRepositoryForSecretForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Codespaces\RemoveRepositoryForSecretForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Codespaces\GetForAuthenticatedUser::OPERATION_MATCH ? Schema\Codespace : ($call is Operation\Codespaces\DeleteForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Codespaces\DeleteForAuthenticatedUser\Response\Applicationjson\H202 : ($call is Operation\Codespaces\UpdateForAuthenticatedUser::OPERATION_MATCH ? Schema\Codespace : ($call is Operation\Codespaces\ExportForAuthenticatedUser::OPERATION_MATCH ? Schema\CodespaceExportDetails : ($call is Operation\Codespaces\GetExportDetailsForAuthenticatedUser::OPERATION_MATCH ? Schema\CodespaceExportDetails : ($call is Operation\Codespaces\CodespaceMachinesForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Codespaces\CodespaceMachinesForAuthenticatedUser\Response\Applicationjson\H200 : ($call is Operation\Codespaces\PublishForAuthenticatedUser::OPERATION_MATCH ? Schema\CodespaceWithFullRepository : ($call is Operation\Codespaces\StartForAuthenticatedUser::OPERATION_MATCH ? Schema\Codespace : ($call is Operation\Codespaces\StopForAuthenticatedUser::OPERATION_MATCH ? Schema\Codespace : ($call is Operation\Packages\ListDockerMigrationConflictingPackagesForAuthenticatedUser::OPERATION_MATCH ? Schema\Package : ($call is Operation\Users\SetPrimaryEmailVisibilityForAuthenticatedUser::OPERATION_MATCH ? Schema\Email : ($call is Operation\Users\ListEmailsForAuthenticatedUser::OPERATION_MATCH ? Schema\Email : ($call is Operation\Users\AddEmailForAuthenticatedUser::OPERATION_MATCH ? Schema\Email : ($call is Operation\Users\DeleteEmailForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Users\ListFollowersForAuthenticatedUser::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Users\ListFollowedByAuthenticatedUser::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Users\CheckPersonIsFollowedByAuthenticated::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Users\Follow::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Users\Unfollow::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Users\ListGpgKeysForAuthenticatedUser::OPERATION_MATCH ? Schema\GpgKey : ($call is Operation\Users\CreateGpgKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\GpgKey : ($call is Operation\Users\GetGpgKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\GpgKey : ($call is Operation\Users\DeleteGpgKeyForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Apps\ListInstallationsForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Apps\ListInstallationsForAuthenticatedUser\Response\Applicationjson\H200 : ($call is Operation\Apps\ListInstallationReposForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Apps\ListInstallationReposForAuthenticatedUser\Response\Applicationjson\H200 : ($call is Operation\Apps\AddRepoToInstallationForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Apps\RemoveRepoFromInstallationForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Interactions\GetRestrictionsForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Interactions\GetRestrictionsForAuthenticatedUser\Response\Applicationjson\H200 : ($call is Operation\Interactions\SetRestrictionsForAuthenticatedUser::OPERATION_MATCH ? Schema\InteractionLimitResponse : ($call is Operation\Interactions\RemoveRestrictionsForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Issues\ListForAuthenticatedUser::OPERATION_MATCH ? Schema\Issue : ($call is Operation\Users\ListPublicSshKeysForAuthenticatedUser::OPERATION_MATCH ? Schema\Key : ($call is Operation\Users\CreatePublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\Key : ($call is Operation\Users\GetPublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\Key : ($call is Operation\Users\DeletePublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Apps\ListSubscriptionsForAuthenticatedUser::OPERATION_MATCH ? Schema\UserMarketplacePurchase : ($call is Operation\Apps\ListSubscriptionsForAuthenticatedUserStubbed::OPERATION_MATCH ? Schema\UserMarketplacePurchase : ($call is Operation\Orgs\ListMembershipsForAuthenticatedUser::OPERATION_MATCH ? Schema\OrgMembership : ($call is Operation\Orgs\GetMembershipForAuthenticatedUser::OPERATION_MATCH ? Schema\OrgMembership : ($call is Operation\Orgs\UpdateMembershipForAuthenticatedUser::OPERATION_MATCH ? Schema\OrgMembership : ($call is Operation\Migrations\ListForAuthenticatedUser::OPERATION_MATCH ? Schema\Migration : ($call is Operation\Migrations\StartForAuthenticatedUser::OPERATION_MATCH ? Schema\Migration : ($call is Operation\Migrations\GetStatusForAuthenticatedUser::OPERATION_MATCH ? Schema\Migration : ($call is Operation\Migrations\GetArchiveForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Migrations\DeleteArchiveForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Migrations\UnlockRepoForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Migrations\ListReposForAuthenticatedUser::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Operation\Orgs\ListForAuthenticatedUser::OPERATION_MATCH ? Schema\OrganizationSimple : ($call is Operation\Packages\ListPackagesForAuthenticatedUser::OPERATION_MATCH ? Schema\Package : ($call is Operation\Packages\GetPackageForAuthenticatedUser::OPERATION_MATCH ? Schema\Package : ($call is Operation\Packages\DeletePackageForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Packages\RestorePackageForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Packages\GetAllPackageVersionsForPackageOwnedByAuthenticatedUser::OPERATION_MATCH ? Schema\PackageVersion : ($call is Operation\Packages\GetPackageVersionForAuthenticatedUser::OPERATION_MATCH ? Schema\PackageVersion : ($call is Operation\Packages\DeletePackageVersionForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Packages\RestorePackageVersionForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Projects\CreateForAuthenticatedUser::OPERATION_MATCH ? Schema\Project : ($call is Operation\Users\ListPublicEmailsForAuthenticatedUser::OPERATION_MATCH ? Schema\Email : ($call is Operation\Repos\ListForAuthenticatedUser::OPERATION_MATCH ? Schema\Repository : ($call is Operation\Repos\CreateForAuthenticatedUser::OPERATION_MATCH ? Schema\Repository : ($call is Operation\Repos\ListInvitationsForAuthenticatedUser::OPERATION_MATCH ? Schema\RepositoryInvitation : ($call is Operation\Repos\DeclineInvitationForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\AcceptInvitationForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Users\ListSocialAccountsForAuthenticatedUser::OPERATION_MATCH ? Schema\SocialAccount : ($call is Operation\Users\AddSocialAccountForAuthenticatedUser::OPERATION_MATCH ? Schema\SocialAccount : ($call is Operation\Users\DeleteSocialAccountForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Users\ListSshSigningKeysForAuthenticatedUser::OPERATION_MATCH ? Schema\SshSigningKey : ($call is Operation\Users\CreateSshSigningKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\SshSigningKey : ($call is Operation\Users\GetSshSigningKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\SshSigningKey : ($call is Operation\Users\DeleteSshSigningKeyForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Activity\ListReposStarredByAuthenticatedUser::OPERATION_MATCH ? Schema\Repository|Schema\StarredRepository : ($call is Operation\Activity\CheckRepoIsStarredByAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Activity\StarRepoForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Activity\UnstarRepoForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Activity\ListWatchedReposForAuthenticatedUser::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Operation\Teams\ListForAuthenticatedUser::OPERATION_MATCH ? Schema\TeamFull : ($call is Operation\Users\List_::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Users\GetByUsername::OPERATION_MATCH ? Schema\Operation\Users\GetByUsername\Response\Applicationjson\H200 : ($call is Operation\Packages\ListDockerMigrationConflictingPackagesForUser::OPERATION_MATCH ? Schema\Package : ($call is Operation\Activity\ListEventsForAuthenticatedUser::OPERATION_MATCH ? Schema\Event : ($call is Operation\Activity\ListOrgEventsForAuthenticatedUser::OPERATION_MATCH ? Schema\Event : ($call is Operation\Activity\ListPublicEventsForUser::OPERATION_MATCH ? Schema\Event : ($call is Operation\Users\ListFollowersForUser::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Users\ListFollowingForUser::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Users\CheckFollowingForUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Gists\ListForUser::OPERATION_MATCH ? Schema\BaseGist : ($call is Operation\Users\ListGpgKeysForUser::OPERATION_MATCH ? Schema\GpgKey : ($call is Operation\Users\GetContextForUser::OPERATION_MATCH ? Schema\Hovercard : ($call is Operation\Apps\GetUserInstallation::OPERATION_MATCH ? Schema\Installation : ($call is Operation\Users\ListPublicKeysForUser::OPERATION_MATCH ? Schema\KeySimple : ($call is Operation\Orgs\ListForUser::OPERATION_MATCH ? Schema\OrganizationSimple : ($call is Operation\Packages\ListPackagesForUser::OPERATION_MATCH ? Schema\Package : ($call is Operation\Packages\GetPackageForUser::OPERATION_MATCH ? Schema\Package : ($call is Operation\Packages\DeletePackageForUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Packages\RestorePackageForUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Packages\GetAllPackageVersionsForPackageOwnedByUser::OPERATION_MATCH ? Schema\PackageVersion : ($call is Operation\Packages\GetPackageVersionForUser::OPERATION_MATCH ? Schema\PackageVersion : ($call is Operation\Packages\DeletePackageVersionForUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Packages\RestorePackageVersionForUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Projects\ListForUser::OPERATION_MATCH ? Schema\Project : ($call is Operation\Activity\ListReceivedEventsForUser::OPERATION_MATCH ? Schema\Event : ($call is Operation\Activity\ListReceivedPublicEventsForUser::OPERATION_MATCH ? Schema\Event : ($call is Operation\Repos\ListForUser::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Operation\Billing\GetGithubActionsBillingUser::OPERATION_MATCH ? Schema\ActionsBillingUsage : ($call is Operation\Billing\GetGithubPackagesBillingUser::OPERATION_MATCH ? Schema\PackagesBillingUsage : ($call is Operation\Billing\GetSharedStorageBillingUser::OPERATION_MATCH ? Schema\CombinedBillingUsage : ($call is Operation\Users\ListSocialAccountsForUser::OPERATION_MATCH ? Schema\SocialAccount : ($call is Operation\Users\ListSshSigningKeysForUser::OPERATION_MATCH ? Schema\SshSigningKey : ($call is Operation\Activity\ListReposStarredByUser::OPERATION_MATCH ? Schema\Operation\Activity\ListReposStarredByUser\Response\Applicationjson\H200 : ($call is Operation\Activity\ListReposWatchedByUser::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Operation\Meta\GetAllVersions::OPERATION_MATCH ? Schema\Operation\Meta\GetAllVersions\Response\Applicationjson\H200 : Schema\Operation\Meta\GetZen\Response\Textplain
     */
    public function call(string $call, array $params = array())
    {
        $result = \React\Async\await($this->callAsync($call, $params));
        if ($result instanceof \Rx\Observable) {
            $result = \WyriHaximus\React\awaitObservable($result);
        }
        return $result;
    }
    /**
     * @return ($call is Operation\Meta\Root::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Root> : ($call is Operation\Apps\GetAuthenticated::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Integration> : ($call is Operation\Apps\CreateFromManifest::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Apps\CreateFromManifest\Response\Applicationjson\H201> : ($call is Operation\Apps\GetWebhookConfigForApp::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebhookConfig> : ($call is Operation\Apps\UpdateWebhookConfigForApp::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebhookConfig> : ($call is Operation\Apps\ListWebhookDeliveries::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\HookDeliveryItem> : ($call is Operation\Apps\GetWebhookDelivery::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\HookDelivery> : ($call is Operation\Apps\RedeliverWebhookDelivery::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Apps\RedeliverWebhookDelivery\Response\Applicationjson\H202> : ($call is Operation\Apps\ListInstallationRequestsForAuthenticatedApp::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IntegrationInstallationRequest> : ($call is Operation\Apps\ListInstallations::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Installation> : ($call is Operation\Apps\GetInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Installation> : ($call is Operation\Apps\DeleteInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Apps\CreateInstallationAccessToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\InstallationToken> : ($call is Operation\Apps\SuspendInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Apps\UnsuspendInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Apps\DeleteAuthorization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Apps\CheckToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Authorization> : ($call is Operation\Apps\DeleteToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Apps\ResetToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Authorization> : ($call is Operation\Apps\ScopeToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Authorization> : ($call is Operation\Apps\GetBySlug::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Integration> : ($call is Operation\CodesOfConduct\GetAllCodesOfConduct::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeOfConduct> : ($call is Operation\CodesOfConduct\GetConductCode::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeOfConduct> : ($call is Operation\Emojis\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Emojis\Get\Response\Applicationjson\H200> : ($call is Operation\Dependabot\ListAlertsForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DependabotAlertWithRepository> : ($call is Operation\SecretScanning\ListAlertsForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationSecretScanningAlert> : ($call is Operation\Activity\ListPublicEvents::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event> : ($call is Operation\Activity\GetFeeds::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Feed> : ($call is Operation\Gists\List_::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BaseGist> : ($call is Operation\Gists\Create::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistSimple> : ($call is Operation\Gists\ListPublic::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BaseGist> : ($call is Operation\Gists\ListStarred::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BaseGist> : ($call is Operation\Gists\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistSimple> : ($call is Operation\Gists\Delete::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Gists\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistSimple> : ($call is Operation\Gists\ListComments::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistComment> : ($call is Operation\Gists\CreateComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistComment> : ($call is Operation\Gists\GetComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistComment> : ($call is Operation\Gists\DeleteComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Gists\UpdateComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistComment> : ($call is Operation\Gists\ListCommits::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistCommit> : ($call is Operation\Gists\ListForks::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistSimple> : ($call is Operation\Gists\Fork::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BaseGist> : ($call is Operation\Gists\CheckIsStarred::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Gists\Star::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Gists\Unstar::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Gists\GetRevision::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistSimple> : ($call is Operation\Gitignore\GetAllTemplates::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Gitignore\GetAllTemplates\Response\Applicationjson\H200> : ($call is Operation\Gitignore\GetTemplate::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitignoreTemplate> : ($call is Operation\Apps\ListReposAccessibleToInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Apps\ListReposAccessibleToInstallation\Response\Applicationjson\H200> : ($call is Operation\Apps\RevokeInstallationAccessToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Issues\List_::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue> : ($call is Operation\Licenses\GetAllCommonlyUsed::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\LicenseSimple> : ($call is Operation\Licenses\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\License> : ($call is Operation\Markdown\Render::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Markdown\Render\Response\Texthtml\H200> : ($call is Operation\Markdown\RenderRaw::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Markdown\RenderRaw\Response\Texthtml\H200> : ($call is Operation\Apps\GetSubscriptionPlanForAccount::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MarketplacePurchase> : ($call is Operation\Apps\ListPlans::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MarketplaceListingPlan> : ($call is Operation\Apps\ListAccountsForPlan::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MarketplacePurchase> : ($call is Operation\Apps\GetSubscriptionPlanForAccountStubbed::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MarketplacePurchase> : ($call is Operation\Apps\ListPlansStubbed::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MarketplaceListingPlan> : ($call is Operation\Apps\ListAccountsForPlanStubbed::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MarketplacePurchase> : ($call is Operation\Meta\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ApiOverview> : ($call is Operation\Activity\ListPublicEventsForRepoNetwork::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event|Schema\BasicError> : ($call is Operation\Activity\ListNotificationsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Thread> : ($call is Operation\Activity\MarkNotificationsAsRead::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Activity\MarkNotificationsAsRead\Response\Applicationjson\H202> : ($call is Operation\Activity\GetThread::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Thread> : ($call is Operation\Activity\MarkThreadAsRead::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Activity\GetThreadSubscriptionForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ThreadSubscription> : ($call is Operation\Activity\SetThreadSubscription::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ThreadSubscription> : ($call is Operation\Activity\DeleteThreadSubscription::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Meta\GetOctocat::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Meta\GetOctocat\Response\ApplicationoctocatStream\H200> : ($call is Operation\Orgs\List_::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationSimple> : ($call is Operation\Orgs\ListPatGrantRequests::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationProgrammaticAccessGrantRequest> : ($call is Operation\Orgs\ReviewPatGrantRequestsInBulk::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Orgs\ReviewPatGrantRequestsInBulk\Response\Applicationjson\H202> : ($call is Operation\Orgs\ReviewPatGrantRequest::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Orgs\ListPatGrantRequestRepositories::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Operation\Orgs\ListPatGrants::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationProgrammaticAccessGrant> : ($call is Operation\Orgs\UpdatePatAccesses::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Orgs\UpdatePatAccesses\Response\Applicationjson\H202> : ($call is Operation\Orgs\UpdatePatAccess::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Orgs\ListPatGrantRepositories::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Operation\Orgs\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationFull> : ($call is Operation\Orgs\Delete::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Orgs\Delete\Response\Applicationjson\H202> : ($call is Operation\Orgs\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationFull> : ($call is Operation\Actions\GetActionsCacheUsageForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsCacheUsageOrgEnterprise> : ($call is Operation\Actions\GetActionsCacheUsageByRepoForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\GetActionsCacheUsageByRepoForOrg\Response\Applicationjson\H200> : ($call is Operation\Oidc\GetOidcCustomSubTemplateForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OidcCustomSub> : ($call is Operation\Oidc\UpdateOidcCustomSubTemplateForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\GetGithubActionsPermissionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsOrganizationPermissions> : ($call is Operation\Actions\SetGithubActionsPermissionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization\Response\Applicationjson\H200> : ($call is Operation\Actions\SetSelectedRepositoriesEnabledGithubActionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\EnableSelectedRepositoryGithubActionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\DisableSelectedRepositoryGithubActionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\GetAllowedActionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SelectedActions> : ($call is Operation\Actions\SetAllowedActionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\GetGithubActionsDefaultWorkflowPermissionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsGetDefaultWorkflowPermissions> : ($call is Operation\Actions\SetGithubActionsDefaultWorkflowPermissionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListRequiredWorkflows::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListRequiredWorkflows\Response\Applicationjson\H200> : ($call is Operation\Actions\CreateRequiredWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RequiredWorkflow> : ($call is Operation\Actions\GetRequiredWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RequiredWorkflow> : ($call is Operation\Actions\DeleteRequiredWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\UpdateRequiredWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RequiredWorkflow> : ($call is Operation\Actions\ListSelectedRepositoriesRequiredWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListSelectedRepositoriesRequiredWorkflow\Response\Applicationjson\H200> : ($call is Operation\Actions\SetSelectedReposToRequiredWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\AddSelectedRepoToRequiredWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\RemoveSelectedRepoFromRequiredWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListSelfHostedRunnersForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListSelfHostedRunnersForOrg\Response\Applicationjson\H200> : ($call is Operation\Actions\ListRunnerApplicationsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerApplication> : ($call is Operation\Actions\CreateRegistrationTokenForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuthenticationToken> : ($call is Operation\Actions\CreateRemoveTokenForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuthenticationToken> : ($call is Operation\Actions\GetSelfHostedRunnerForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Runner> : ($call is Operation\Actions\DeleteSelfHostedRunnerFromOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListLabelsForSelfHostedRunnerForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200> : ($call is Operation\Actions\SetCustomLabelsForSelfHostedRunnerForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200> : ($call is Operation\Actions\AddCustomLabelsToSelfHostedRunnerForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200> : ($call is Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForOrg\Response\Applicationjson\H200> : ($call is Operation\Actions\RemoveCustomLabelFromSelfHostedRunnerForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200> : ($call is Operation\Actions\ListOrgSecrets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListOrgSecrets\Response\Applicationjson\H200> : ($call is Operation\Actions\GetOrgPublicKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsPublicKey> : ($call is Operation\Actions\GetOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationActionsSecret> : ($call is Operation\Actions\CreateOrUpdateOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\DeleteOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListSelectedReposForOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListSelectedReposForOrgSecret\Response\Applicationjson\H200> : ($call is Operation\Actions\SetSelectedReposForOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\AddSelectedRepoToOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\RemoveSelectedRepoFromOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListOrgVariables::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListOrgVariables\Response\Applicationjson\H200> : ($call is Operation\Actions\CreateOrgVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\GetOrgVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationActionsVariable> : ($call is Operation\Actions\DeleteOrgVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\UpdateOrgVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListSelectedReposForOrgVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListSelectedReposForOrgVariable\Response\Applicationjson\H200> : ($call is Operation\Actions\SetSelectedReposForOrgVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\AddSelectedRepoToOrgVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\RemoveSelectedRepoFromOrgVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Orgs\ListBlockedUsers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Orgs\CheckBlockedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Orgs\BlockUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Orgs\UnblockUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\CodeScanning\ListAlertsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningOrganizationAlertItems> : ($call is Operation\Codespaces\ListInOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\ListInOrganization\Response\Applicationjson\H200> : ($call is Operation\Codespaces\SetCodespacesBilling::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Codespaces\SetCodespacesBillingUsers::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Codespaces\DeleteCodespacesBillingUsers::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Codespaces\ListOrgSecrets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\ListOrgSecrets\Response\Applicationjson\H200> : ($call is Operation\Codespaces\GetOrgPublicKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodespacesPublicKey> : ($call is Operation\Codespaces\GetOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodespacesOrgSecret> : ($call is Operation\Codespaces\CreateOrUpdateOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Codespaces\DeleteOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Codespaces\ListSelectedReposForOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\ListSelectedReposForOrgSecret\Response\Applicationjson\H200> : ($call is Operation\Codespaces\SetSelectedReposForOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Codespaces\AddSelectedRepoToOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Codespaces\RemoveSelectedRepoFromOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Dependabot\ListAlertsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DependabotAlertWithRepository> : ($call is Operation\Dependabot\ListOrgSecrets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Dependabot\ListOrgSecrets\Response\Applicationjson\H200> : ($call is Operation\Dependabot\GetOrgPublicKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DependabotPublicKey> : ($call is Operation\Dependabot\GetOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationDependabotSecret> : ($call is Operation\Dependabot\CreateOrUpdateOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Dependabot\DeleteOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Dependabot\ListSelectedReposForOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Dependabot\ListSelectedReposForOrgSecret\Response\Applicationjson\H200> : ($call is Operation\Dependabot\SetSelectedReposForOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Dependabot\AddSelectedRepoToOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Dependabot\RemoveSelectedRepoFromOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Packages\ListDockerMigrationConflictingPackagesForOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Package> : ($call is Operation\Activity\ListPublicOrgEvents::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event> : ($call is Operation\Orgs\ListFailedInvitations::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationInvitation> : ($call is Operation\Orgs\ListWebhooks::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgHook> : ($call is Operation\Orgs\CreateWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgHook> : ($call is Operation\Orgs\GetWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgHook> : ($call is Operation\Orgs\DeleteWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Orgs\UpdateWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgHook> : ($call is Operation\Orgs\GetWebhookConfigForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebhookConfig> : ($call is Operation\Orgs\UpdateWebhookConfigForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebhookConfig> : ($call is Operation\Orgs\ListWebhookDeliveries::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\HookDeliveryItem> : ($call is Operation\Orgs\GetWebhookDelivery::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\HookDelivery> : ($call is Operation\Orgs\RedeliverWebhookDelivery::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Orgs\RedeliverWebhookDelivery\Response\Applicationjson\H202> : ($call is Operation\Orgs\PingWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Apps\GetOrgInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Installation> : ($call is Operation\Orgs\ListAppInstallations::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Orgs\ListAppInstallations\Response\Applicationjson\H200> : ($call is Operation\Interactions\GetRestrictionsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Interactions\GetRestrictionsForOrg\Response\Applicationjson\H200> : ($call is Operation\Interactions\SetRestrictionsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\InteractionLimitResponse> : ($call is Operation\Interactions\RemoveRestrictionsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Orgs\ListPendingInvitations::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationInvitation> : ($call is Operation\Orgs\CreateInvitation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationInvitation> : ($call is Operation\Orgs\CancelInvitation::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Orgs\ListInvitationTeams::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team> : ($call is Operation\Issues\ListForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue> : ($call is Operation\Orgs\ListMembers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Orgs\CheckMembershipForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Orgs\RemoveMember::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Codespaces\GetCodespacesForUserInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\GetCodespacesForUserInOrg\Response\Applicationjson\H200> : ($call is Operation\Codespaces\DeleteFromOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\DeleteFromOrganization\Response\Applicationjson\H202> : ($call is Operation\Codespaces\StopInOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Codespace> : ($call is Operation\Orgs\GetMembershipForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgMembership> : ($call is Operation\Orgs\SetMembershipForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgMembership> : ($call is Operation\Orgs\RemoveMembershipForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Migrations\ListForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Migration> : ($call is Operation\Migrations\StartForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Migration> : ($call is Operation\Migrations\GetStatusForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Migration> : ($call is Operation\Migrations\DownloadArchiveForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Migrations\DownloadArchiveForOrgStreaming::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Rx\Observable<string>|\Psr\Http\Message\ResponseInterface> : ($call is Operation\Migrations\DeleteArchiveForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Migrations\UnlockRepoForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Migrations\ListReposForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Operation\Orgs\ListOutsideCollaborators::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Orgs\ConvertMemberToOutsideCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Orgs\ConvertMemberToOutsideCollaborator\Response\Applicationjson\H202> : ($call is Operation\Orgs\RemoveOutsideCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Packages\ListPackagesForOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Package> : ($call is Operation\Packages\GetPackageForOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Package> : ($call is Operation\Packages\DeletePackageForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Packages\RestorePackageForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Packages\GetAllPackageVersionsForPackageOwnedByOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PackageVersion> : ($call is Operation\Packages\GetPackageVersionForOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PackageVersion> : ($call is Operation\Packages\DeletePackageVersionForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Packages\RestorePackageVersionForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Projects\ListForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project> : ($call is Operation\Projects\CreateForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project> : ($call is Operation\Orgs\ListPublicMembers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Orgs\CheckPublicMembershipForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Orgs\SetPublicMembershipForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Orgs\RemovePublicMembershipForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\ListForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Operation\Repos\CreateInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Repository> : ($call is Operation\SecretScanning\ListAlertsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationSecretScanningAlert> : ($call is Operation\Orgs\ListSecurityManagerTeams::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamSimple> : ($call is Operation\Orgs\AddSecurityManagerTeam::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Orgs\RemoveSecurityManagerTeam::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Billing\GetGithubActionsBillingOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsBillingUsage> : ($call is Operation\Billing\GetGithubPackagesBillingOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PackagesBillingUsage> : ($call is Operation\Billing\GetSharedStorageBillingOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CombinedBillingUsage> : ($call is Operation\Teams\List_::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team> : ($call is Operation\Teams\Create::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamFull> : ($call is Operation\Teams\GetByName::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamFull> : ($call is Operation\Teams\DeleteInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\UpdateInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamFull> : ($call is Operation\Teams\ListDiscussionsInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Operation\Teams\CreateDiscussionInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Operation\Teams\GetDiscussionInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Operation\Teams\DeleteDiscussionInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\UpdateDiscussionInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Operation\Teams\ListDiscussionCommentsInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Operation\Teams\CreateDiscussionCommentInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Operation\Teams\GetDiscussionCommentInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Operation\Teams\DeleteDiscussionCommentInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\UpdateDiscussionCommentInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Operation\Reactions\ListForTeamDiscussionCommentInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\CreateForTeamDiscussionCommentInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\DeleteForTeamDiscussionComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Reactions\ListForTeamDiscussionInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\CreateForTeamDiscussionInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\DeleteForTeamDiscussion::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\ListPendingInvitationsInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationInvitation> : ($call is Operation\Teams\ListMembersInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Teams\GetMembershipForUserInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamMembership> : ($call is Operation\Teams\AddOrUpdateMembershipForUserInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamMembership> : ($call is Operation\Teams\RemoveMembershipForUserInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\ListProjectsInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamProject> : ($call is Operation\Teams\CheckPermissionsForProjectInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamProject> : ($call is Operation\Teams\AddOrUpdateProjectPermissionsInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\RemoveProjectInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\ListReposInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Operation\Teams\CheckPermissionsForRepoInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamRepository> : ($call is Operation\Teams\AddOrUpdateRepoPermissionsInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\RemoveRepoInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\ListChildInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team> : ($call is Operation\Orgs\EnableOrDisableSecurityProductOnAllOrgRepos::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Projects\GetCard::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectCard> : ($call is Operation\Projects\DeleteCard::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Projects\UpdateCard::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectCard> : ($call is Operation\Projects\MoveCard::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Projects\MoveCard\Response\Applicationjson\H201> : ($call is Operation\Projects\GetColumn::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectColumn> : ($call is Operation\Projects\DeleteColumn::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Projects\UpdateColumn::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectColumn> : ($call is Operation\Projects\ListCards::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectCard> : ($call is Operation\Projects\CreateCard::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectCard> : ($call is Operation\Projects\MoveColumn::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Projects\MoveColumn\Response\Applicationjson\H201> : ($call is Operation\Projects\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project> : ($call is Operation\Projects\Delete::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Projects\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project> : ($call is Operation\Projects\ListCollaborators::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Projects\AddCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Projects\RemoveCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Projects\GetPermissionForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectCollaboratorPermission> : ($call is Operation\Projects\ListColumns::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectColumn> : ($call is Operation\Projects\CreateColumn::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectColumn> : ($call is Operation\RateLimit\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RateLimitOverview> : ($call is Operation\Actions\ListRepoRequiredWorkflows::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListRepoRequiredWorkflows\Response\Applicationjson\H200> : ($call is Operation\Actions\GetRepoRequiredWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepoRequiredWorkflow> : ($call is Operation\Actions\GetRepoRequiredWorkflowUsage::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WorkflowUsage> : ($call is Operation\Repos\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\FullRepository|Schema\BasicError> : ($call is Operation\Repos\Delete::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Repos\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\FullRepository|Schema\BasicError> : ($call is Operation\Actions\ListArtifactsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListArtifactsForRepo\Response\Applicationjson\H200> : ($call is Operation\Actions\GetArtifact::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Artifact> : ($call is Operation\Actions\DeleteArtifact::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\DownloadArtifact::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\DownloadArtifactStreaming::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Rx\Observable<string>|\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\GetActionsCacheUsage::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsCacheUsageByRepository> : ($call is Operation\Actions\GetActionsCacheList::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsCacheList> : ($call is Operation\Actions\DeleteActionsCacheByKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsCacheList> : ($call is Operation\Actions\DeleteActionsCacheById::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\GetJobForWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Job> : ($call is Operation\Actions\DownloadJobLogsForWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\DownloadJobLogsForWorkflowRunStreaming::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Rx\Observable<string>|\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ReRunJobForWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\GetCustomOidcSubClaimForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OidcCustomSubRepo> : ($call is Operation\Actions\SetCustomOidcSubClaimForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\ListRepoOrganizationSecrets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListRepoOrganizationSecrets\Response\Applicationjson\H200> : ($call is Operation\Actions\ListRepoOrganizationVariables::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListRepoOrganizationVariables\Response\Applicationjson\H200> : ($call is Operation\Actions\GetGithubActionsPermissionsRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsRepositoryPermissions> : ($call is Operation\Actions\SetGithubActionsPermissionsRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\GetWorkflowAccessToRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsWorkflowAccessToRepository> : ($call is Operation\Actions\SetWorkflowAccessToRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\GetAllowedActionsRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SelectedActions> : ($call is Operation\Actions\SetAllowedActionsRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\GetGithubActionsDefaultWorkflowPermissionsRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsGetDefaultWorkflowPermissions> : ($call is Operation\Actions\SetGithubActionsDefaultWorkflowPermissionsRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListRequiredWorkflowRuns::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListRequiredWorkflowRuns\Response\Applicationjson\H200> : ($call is Operation\Actions\ListSelfHostedRunnersForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListSelfHostedRunnersForRepo\Response\Applicationjson\H200> : ($call is Operation\Actions\ListRunnerApplicationsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerApplication> : ($call is Operation\Actions\CreateRegistrationTokenForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuthenticationToken> : ($call is Operation\Actions\CreateRemoveTokenForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuthenticationToken> : ($call is Operation\Actions\GetSelfHostedRunnerForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Runner> : ($call is Operation\Actions\DeleteSelfHostedRunnerFromRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListLabelsForSelfHostedRunnerForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200> : ($call is Operation\Actions\SetCustomLabelsForSelfHostedRunnerForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200> : ($call is Operation\Actions\AddCustomLabelsToSelfHostedRunnerForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200> : ($call is Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForRepo\Response\Applicationjson\H200> : ($call is Operation\Actions\RemoveCustomLabelFromSelfHostedRunnerForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200> : ($call is Operation\Actions\ListWorkflowRunsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListWorkflowRunsForRepo\Response\Applicationjson\H200> : ($call is Operation\Actions\GetWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WorkflowRun> : ($call is Operation\Actions\DeleteWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\GetReviewsForRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EnvironmentApprovals> : ($call is Operation\Actions\ApproveWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\ListWorkflowRunArtifacts::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListWorkflowRunArtifacts\Response\Applicationjson\H200> : ($call is Operation\Actions\GetWorkflowRunAttempt::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WorkflowRun> : ($call is Operation\Actions\ListJobsForWorkflowRunAttempt::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListJobsForWorkflowRunAttempt\Response\Applicationjson\H200> : ($call is Operation\Actions\DownloadWorkflowRunAttemptLogs::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\DownloadWorkflowRunAttemptLogsStreaming::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Rx\Observable<string>|\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\CancelWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\ListJobsForWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListJobsForWorkflowRun\Response\Applicationjson\H200> : ($call is Operation\Actions\DownloadWorkflowRunLogs::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\DownloadWorkflowRunLogsStreaming::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Rx\Observable<string>|\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\DeleteWorkflowRunLogs::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\GetPendingDeploymentsForRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PendingDeployment> : ($call is Operation\Actions\ReviewPendingDeploymentsForRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Deployment> : ($call is Operation\Actions\ReRunWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\ReRunWorkflowFailedJobs::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\GetWorkflowRunUsage::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WorkflowRunUsage> : ($call is Operation\Actions\ListRepoSecrets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListRepoSecrets\Response\Applicationjson\H200> : ($call is Operation\Actions\GetRepoPublicKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsPublicKey> : ($call is Operation\Actions\GetRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsSecret> : ($call is Operation\Actions\CreateOrUpdateRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\DeleteRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListRepoVariables::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListRepoVariables\Response\Applicationjson\H200> : ($call is Operation\Actions\CreateRepoVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\GetRepoVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsVariable> : ($call is Operation\Actions\DeleteRepoVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\UpdateRepoVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListRepoWorkflows::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListRepoWorkflows\Response\Applicationjson\H200> : ($call is Operation\Actions\GetWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Workflow> : ($call is Operation\Actions\DisableWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\CreateWorkflowDispatch::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\EnableWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListWorkflowRuns::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListWorkflowRuns\Response\Applicationjson\H200> : ($call is Operation\Actions\GetWorkflowUsage::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WorkflowUsage> : ($call is Operation\Issues\ListAssignees::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Issues\CheckUserCanBeAssigned::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\ListAutolinks::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Autolink> : ($call is Operation\Repos\CreateAutolink::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Autolink> : ($call is Operation\Repos\GetAutolink::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Autolink> : ($call is Operation\Repos\DeleteAutolink::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\EnableAutomatedSecurityFixes::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\DisableAutomatedSecurityFixes::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\ListBranches::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ShortBranch> : ($call is Operation\Repos\GetBranch::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BranchWithProtection|Schema\BasicError> : ($call is Operation\Repos\GetBranchProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BranchProtection> : ($call is Operation\Repos\UpdateBranchProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranch> : ($call is Operation\Repos\DeleteBranchProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\GetAdminBranchProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranchAdminEnforced> : ($call is Operation\Repos\SetAdminBranchProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranchAdminEnforced> : ($call is Operation\Repos\DeleteAdminBranchProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\GetPullRequestReviewProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranchPullRequestReview> : ($call is Operation\Repos\DeletePullRequestReviewProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\UpdatePullRequestReviewProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranchPullRequestReview> : ($call is Operation\Repos\GetCommitSignatureProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranchAdminEnforced> : ($call is Operation\Repos\CreateCommitSignatureProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranchAdminEnforced> : ($call is Operation\Repos\DeleteCommitSignatureProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\GetStatusChecksProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\StatusCheckPolicy> : ($call is Operation\Repos\RemoveStatusCheckProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\UpdateStatusCheckProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\StatusCheckPolicy> : ($call is Operation\Repos\GetAllStatusCheckContexts::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Repos\GetAllStatusCheckContexts\Response\Applicationjson\H200> : ($call is Operation\Repos\SetStatusCheckContexts::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Repos\SetStatusCheckContexts\Response\Applicationjson\H200> : ($call is Operation\Repos\AddStatusCheckContexts::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Repos\AddStatusCheckContexts\Response\Applicationjson\H200> : ($call is Operation\Repos\RemoveStatusCheckContexts::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Repos\RemoveStatusCheckContexts\Response\Applicationjson\H200> : ($call is Operation\Repos\GetAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BranchRestrictionPolicy> : ($call is Operation\Repos\DeleteAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\GetAppsWithAccessToProtectedBranch::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Integration> : ($call is Operation\Repos\SetAppAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Integration> : ($call is Operation\Repos\AddAppAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Integration> : ($call is Operation\Repos\RemoveAppAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Integration> : ($call is Operation\Repos\GetTeamsWithAccessToProtectedBranch::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team> : ($call is Operation\Repos\SetTeamAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team> : ($call is Operation\Repos\AddTeamAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team> : ($call is Operation\Repos\RemoveTeamAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team> : ($call is Operation\Repos\GetUsersWithAccessToProtectedBranch::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Repos\SetUserAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Repos\AddUserAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Repos\RemoveUserAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Repos\RenameBranch::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BranchWithProtection> : ($call is Operation\Checks\Create::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckRun> : ($call is Operation\Checks\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckRun> : ($call is Operation\Checks\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckRun> : ($call is Operation\Checks\ListAnnotations::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckAnnotation> : ($call is Operation\Checks\RerequestRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Checks\CreateSuite::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckSuite> : ($call is Operation\Checks\SetSuitesPreferences::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckSuitePreference> : ($call is Operation\Checks\GetSuite::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckSuite> : ($call is Operation\Checks\ListForSuite::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Checks\ListForSuite\Response\Applicationjson\H200> : ($call is Operation\Checks\RerequestSuite::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\CodeScanning\ListAlertsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAlertItems> : ($call is Operation\CodeScanning\GetAlert::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAlert> : ($call is Operation\CodeScanning\UpdateAlert::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAlert> : ($call is Operation\CodeScanning\ListAlertInstances::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAlertInstance> : ($call is Operation\CodeScanning\ListRecentAnalyses::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAnalysis> : ($call is Operation\CodeScanning\GetAnalysis::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAnalysis|Schema\Operation\CodeScanning\GetAnalysis\Response\ApplicationjsonPlusSarif\H200> : ($call is Operation\CodeScanning\DeleteAnalysis::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAnalysisDeletion> : ($call is Operation\CodeScanning\ListCodeqlDatabases::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningCodeqlDatabase> : ($call is Operation\CodeScanning\GetCodeqlDatabase::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningCodeqlDatabase> : ($call is Operation\CodeScanning\GetDefaultSetup::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningDefaultSetup> : ($call is Operation\CodeScanning\UpdateDefaultSetup::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject|Schema\CodeScanningDefaultSetupUpdateResponse> : ($call is Operation\CodeScanning\UploadSarif::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningSarifsReceipt> : ($call is Operation\CodeScanning\GetSarif::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningSarifsStatus> : ($call is Operation\Repos\CodeownersErrors::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeownersErrors> : ($call is Operation\Codespaces\ListInRepositoryForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\ListInRepositoryForAuthenticatedUser\Response\Applicationjson\H200> : ($call is Operation\Codespaces\CreateWithRepoForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Codespace> : ($call is Operation\Codespaces\ListDevcontainersInRepositoryForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\ListDevcontainersInRepositoryForAuthenticatedUser\Response\Applicationjson\H200> : ($call is Operation\Codespaces\RepoMachinesForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\RepoMachinesForAuthenticatedUser\Response\Applicationjson\H200> : ($call is Operation\Codespaces\PreFlightWithRepoForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\PreFlightWithRepoForAuthenticatedUser\Response\Applicationjson\H200> : ($call is Operation\Codespaces\ListRepoSecrets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\ListRepoSecrets\Response\Applicationjson\H200> : ($call is Operation\Codespaces\GetRepoPublicKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodespacesPublicKey> : ($call is Operation\Codespaces\GetRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepoCodespacesSecret> : ($call is Operation\Codespaces\CreateOrUpdateRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Codespaces\DeleteRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\ListCollaborators::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Collaborator> : ($call is Operation\Repos\CheckCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\AddCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryInvitation> : ($call is Operation\Repos\RemoveCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\GetCollaboratorPermissionLevel::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryCollaboratorPermission> : ($call is Operation\Repos\ListCommitCommentsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitComment> : ($call is Operation\Repos\GetCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitComment> : ($call is Operation\Repos\DeleteCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\UpdateCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitComment> : ($call is Operation\Reactions\ListForCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\CreateForCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\DeleteForCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\ListCommits::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Commit> : ($call is Operation\Repos\ListBranchesForHeadCommit::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BranchShort> : ($call is Operation\Repos\ListCommentsForCommit::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitComment> : ($call is Operation\Repos\CreateCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitComment> : ($call is Operation\Repos\ListPullRequestsAssociatedWithCommit::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestSimple> : ($call is Operation\Repos\GetCommit::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Commit> : ($call is Operation\Checks\ListForRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Checks\ListForRef\Response\Applicationjson\H200> : ($call is Operation\Checks\ListSuitesForRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Checks\ListSuitesForRef\Response\Applicationjson\H200> : ($call is Operation\Repos\GetCombinedStatusForRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CombinedCommitStatus> : ($call is Operation\Repos\ListCommitStatusesForRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Status|Schema\BasicError> : ($call is Operation\Repos\GetCommunityProfileMetrics::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommunityProfile> : ($call is Operation\Repos\CompareCommits::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitComparison> : ($call is Operation\Repos\GetContent::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ContentTree|Schema\Operation\Repos\GetContent\Response\Applicationjson\H200> : ($call is Operation\Repos\CreateOrUpdateFileContents::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\FileCommit> : ($call is Operation\Repos\DeleteFile::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\FileCommit> : ($call is Operation\Repos\ListContributors::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Contributor> : ($call is Operation\Dependabot\ListAlertsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DependabotAlert> : ($call is Operation\Dependabot\GetAlert::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DependabotAlert> : ($call is Operation\Dependabot\UpdateAlert::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DependabotAlert> : ($call is Operation\Dependabot\ListRepoSecrets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Dependabot\ListRepoSecrets\Response\Applicationjson\H200> : ($call is Operation\Dependabot\GetRepoPublicKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DependabotPublicKey> : ($call is Operation\Dependabot\GetRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DependabotSecret> : ($call is Operation\Dependabot\CreateOrUpdateRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Dependabot\DeleteRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\DependencyGraph\DiffRange::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DependencyGraphDiff> : ($call is Operation\DependencyGraph\ExportSbom::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DependencyGraphSpdxSbom> : ($call is Operation\DependencyGraph\CreateRepositorySnapshot::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\DependencyGraph\CreateRepositorySnapshot\Response\Applicationjson\H201> : ($call is Operation\Repos\ListDeployments::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Deployment> : ($call is Operation\Repos\CreateDeployment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Deployment|Schema\Operation\Repos\CreateDeployment\Response\Applicationjson\H202> : ($call is Operation\Repos\GetDeployment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Deployment> : ($call is Operation\Repos\DeleteDeployment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\ListDeploymentStatuses::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeploymentStatus> : ($call is Operation\Repos\CreateDeploymentStatus::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeploymentStatus> : ($call is Operation\Repos\GetDeploymentStatus::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeploymentStatus> : ($call is Operation\Repos\CreateDispatchEvent::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\GetAllEnvironments::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Repos\GetAllEnvironments\Response\Applicationjson\H200> : ($call is Operation\Repos\GetEnvironment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Environment> : ($call is Operation\Repos\CreateOrUpdateEnvironment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Environment> : ($call is Operation\Repos\DeleteAnEnvironment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\ListDeploymentBranchPolicies::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Repos\ListDeploymentBranchPolicies\Response\Applicationjson\H200> : ($call is Operation\Repos\CreateDeploymentBranchPolicy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeploymentBranchPolicy> : ($call is Operation\Repos\GetDeploymentBranchPolicy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeploymentBranchPolicy> : ($call is Operation\Repos\UpdateDeploymentBranchPolicy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeploymentBranchPolicy> : ($call is Operation\Repos\DeleteDeploymentBranchPolicy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Activity\ListRepoEvents::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event> : ($call is Operation\Repos\ListForks::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Operation\Repos\CreateFork::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\FullRepository> : ($call is Operation\Git\CreateBlob::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ShortBlob> : ($call is Operation\Git\GetBlob::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Blob> : ($call is Operation\Git\CreateCommit::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitCommit> : ($call is Operation\Git\GetCommit::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitCommit> : ($call is Operation\Git\ListMatchingRefs::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitRef> : ($call is Operation\Git\GetRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitRef> : ($call is Operation\Git\CreateRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitRef> : ($call is Operation\Git\DeleteRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Git\UpdateRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitRef> : ($call is Operation\Git\CreateTag::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitTag> : ($call is Operation\Git\GetTag::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitTag> : ($call is Operation\Git\CreateTree::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitTree> : ($call is Operation\Git\GetTree::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitTree> : ($call is Operation\Repos\ListWebhooks::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Hook> : ($call is Operation\Repos\CreateWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Hook> : ($call is Operation\Repos\GetWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Hook> : ($call is Operation\Repos\DeleteWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\UpdateWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Hook> : ($call is Operation\Repos\GetWebhookConfigForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebhookConfig> : ($call is Operation\Repos\UpdateWebhookConfigForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebhookConfig> : ($call is Operation\Repos\ListWebhookDeliveries::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\HookDeliveryItem> : ($call is Operation\Repos\GetWebhookDelivery::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\HookDelivery> : ($call is Operation\Repos\RedeliverWebhookDelivery::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Repos\RedeliverWebhookDelivery\Response\Applicationjson\H202> : ($call is Operation\Repos\PingWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\TestPushWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Migrations\GetImportStatus::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Import> : ($call is Operation\Migrations\StartImport::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Import> : ($call is Operation\Migrations\CancelImport::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Migrations\UpdateImport::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Import> : ($call is Operation\Migrations\GetCommitAuthors::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PorterAuthor> : ($call is Operation\Migrations\MapCommitAuthor::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PorterAuthor> : ($call is Operation\Migrations\GetLargeFiles::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PorterLargeFile> : ($call is Operation\Migrations\SetLfsPreference::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Import> : ($call is Operation\Apps\GetRepoInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Installation|Schema\BasicError> : ($call is Operation\Interactions\GetRestrictionsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Interactions\GetRestrictionsForRepo\Response\Applicationjson\H200> : ($call is Operation\Interactions\SetRestrictionsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\InteractionLimitResponse> : ($call is Operation\Interactions\RemoveRestrictionsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\ListInvitations::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryInvitation> : ($call is Operation\Repos\DeleteInvitation::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\UpdateInvitation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryInvitation> : ($call is Operation\Issues\ListForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue|Schema\BasicError> : ($call is Operation\Issues\Create::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue> : ($call is Operation\Issues\ListCommentsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueComment> : ($call is Operation\Issues\GetComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueComment> : ($call is Operation\Issues\DeleteComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Issues\UpdateComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueComment> : ($call is Operation\Reactions\ListForIssueComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\CreateForIssueComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\DeleteForIssueComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Issues\ListEventsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueEvent> : ($call is Operation\Issues\GetEvent::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueEvent> : ($call is Operation\Issues\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue|Schema\BasicError> : ($call is Operation\Issues\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue|Schema\BasicError> : ($call is Operation\Issues\AddAssignees::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue> : ($call is Operation\Issues\RemoveAssignees::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue> : ($call is Operation\Issues\CheckUserCanBeAssignedToIssue::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Issues\ListComments::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueComment> : ($call is Operation\Issues\CreateComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueComment> : ($call is Operation\Issues\ListEvents::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueEventForIssue> : ($call is Operation\Issues\ListLabelsOnIssue::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label|Schema\BasicError> : ($call is Operation\Issues\SetLabels::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label|Schema\BasicError> : ($call is Operation\Issues\AddLabels::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label|Schema\BasicError> : ($call is Operation\Issues\RemoveAllLabels::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Issues\RemoveLabel::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label|Schema\BasicError> : ($call is Operation\Issues\Lock::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Issues\Unlock::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Reactions\ListForIssue::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\CreateForIssue::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\DeleteForIssue::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Issues\ListEventsForTimeline::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TimelineIssueEvents> : ($call is Operation\Repos\ListDeployKeys::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeployKey> : ($call is Operation\Repos\CreateDeployKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeployKey> : ($call is Operation\Repos\GetDeployKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeployKey> : ($call is Operation\Repos\DeleteDeployKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Issues\ListLabelsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label> : ($call is Operation\Issues\CreateLabel::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label> : ($call is Operation\Issues\GetLabel::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label> : ($call is Operation\Issues\DeleteLabel::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Issues\UpdateLabel::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label> : ($call is Operation\Repos\ListLanguages::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Language> : ($call is Operation\Repos\EnableLfsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Repos\EnableLfsForRepo\Response\Applicationjson\H202> : ($call is Operation\Repos\DisableLfsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Licenses\GetForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\LicenseContent> : ($call is Operation\Repos\MergeUpstream::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MergedUpstream> : ($call is Operation\Repos\Merge::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Commit> : ($call is Operation\Issues\ListMilestones::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Milestone> : ($call is Operation\Issues\CreateMilestone::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Milestone> : ($call is Operation\Issues\GetMilestone::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Milestone> : ($call is Operation\Issues\DeleteMilestone::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Issues\UpdateMilestone::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Milestone> : ($call is Operation\Issues\ListLabelsForMilestone::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label> : ($call is Operation\Activity\ListRepoNotificationsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Thread> : ($call is Operation\Activity\MarkRepoNotificationsAsRead::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Activity\MarkRepoNotificationsAsRead\Response\Applicationjson\H202> : ($call is Operation\Repos\GetPages::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Page> : ($call is Operation\Repos\UpdateInformationAboutPagesSite::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\CreatePagesSite::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Page> : ($call is Operation\Repos\DeletePagesSite::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\ListPagesBuilds::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PageBuild> : ($call is Operation\Repos\RequestPagesBuild::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PageBuildStatus> : ($call is Operation\Repos\GetLatestPagesBuild::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PageBuild> : ($call is Operation\Repos\GetPagesBuild::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PageBuild> : ($call is Operation\Repos\CreatePagesDeployment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PageDeployment> : ($call is Operation\Repos\GetPagesHealthCheck::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PagesHealthCheck|Schema\EmptyObject> : ($call is Operation\Projects\ListForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project> : ($call is Operation\Projects\CreateForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project> : ($call is Operation\Pulls\List_::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestSimple> : ($call is Operation\Pulls\Create::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequest> : ($call is Operation\Pulls\ListReviewCommentsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewComment> : ($call is Operation\Pulls\GetReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewComment> : ($call is Operation\Pulls\DeleteReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Pulls\UpdateReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewComment> : ($call is Operation\Reactions\ListForPullRequestReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\CreateForPullRequestReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\DeleteForPullRequestComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Pulls\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequest> : ($call is Operation\Pulls\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequest> : ($call is Operation\Codespaces\CreateWithPrForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Codespace> : ($call is Operation\Pulls\ListReviewComments::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewComment> : ($call is Operation\Pulls\CreateReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewComment> : ($call is Operation\Pulls\CreateReplyForReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewComment> : ($call is Operation\Pulls\ListCommits::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Commit> : ($call is Operation\Pulls\ListFiles::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DiffEntry> : ($call is Operation\Pulls\CheckIfMerged::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Pulls\Merge::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestMergeResult> : ($call is Operation\Pulls\ListRequestedReviewers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewRequest> : ($call is Operation\Pulls\RequestReviewers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestSimple> : ($call is Operation\Pulls\RemoveRequestedReviewers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestSimple> : ($call is Operation\Pulls\ListReviews::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview> : ($call is Operation\Pulls\CreateReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview> : ($call is Operation\Pulls\GetReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview> : ($call is Operation\Pulls\UpdateReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview> : ($call is Operation\Pulls\DeletePendingReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview> : ($call is Operation\Pulls\ListCommentsForReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ReviewComment> : ($call is Operation\Pulls\DismissReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview> : ($call is Operation\Pulls\SubmitReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview> : ($call is Operation\Pulls\UpdateBranch::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Pulls\UpdateBranch\Response\Applicationjson\H202> : ($call is Operation\Repos\GetReadme::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ContentFile> : ($call is Operation\Repos\GetReadmeInDirectory::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ContentFile> : ($call is Operation\Repos\ListReleases::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Release> : ($call is Operation\Repos\CreateRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Release> : ($call is Operation\Repos\GetReleaseAsset::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ReleaseAsset> : ($call is Operation\Repos\DeleteReleaseAsset::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\UpdateReleaseAsset::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ReleaseAsset> : ($call is Operation\Repos\GenerateReleaseNotes::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ReleaseNotesContent> : ($call is Operation\Repos\GetLatestRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Release> : ($call is Operation\Repos\GetReleaseByTag::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Release> : ($call is Operation\Repos\GetRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Release> : ($call is Operation\Repos\DeleteRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\UpdateRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Release> : ($call is Operation\Repos\ListReleaseAssets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ReleaseAsset> : ($call is Operation\Repos\UploadReleaseAsset::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ReleaseAsset> : ($call is Operation\Reactions\ListForRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\CreateForRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\DeleteForRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\SecretScanning\ListAlertsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SecretScanningAlert> : ($call is Operation\SecretScanning\GetAlert::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SecretScanningAlert> : ($call is Operation\SecretScanning\UpdateAlert::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SecretScanningAlert> : ($call is Operation\SecretScanning\ListLocationsForAlert::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SecretScanningLocation> : ($call is Operation\SecurityAdvisories\ListRepositoryAdvisories::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryAdvisory> : ($call is Operation\SecurityAdvisories\CreateRepositoryAdvisory::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryAdvisory> : ($call is Operation\SecurityAdvisories\GetRepositoryAdvisory::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryAdvisory> : ($call is Operation\SecurityAdvisories\UpdateRepositoryAdvisory::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryAdvisory> : ($call is Operation\Activity\ListStargazersForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Activity\ListStargazersForRepo\Response\Applicationjson\H200> : ($call is Operation\Repos\GetCodeFrequencyStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Repos\GetCodeFrequencyStats\Response\Applicationjson\H200|Schema\Operation\Repos\GetCodeFrequencyStats\Response\Applicationjson\H202> : ($call is Operation\Repos\GetCommitActivityStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitActivity|Schema\Operation\Repos\GetCommitActivityStats\Response\Applicationjson\H202> : ($call is Operation\Repos\GetContributorsStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ContributorActivity|Schema\Operation\Repos\GetContributorsStats\Response\Applicationjson\H202> : ($call is Operation\Repos\GetParticipationStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ParticipationStats> : ($call is Operation\Repos\GetPunchCardStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Repos\GetCodeFrequencyStats\Response\Applicationjson\H200> : ($call is Operation\Repos\CreateCommitStatus::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Status> : ($call is Operation\Activity\ListWatchersForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Activity\GetRepoSubscription::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositorySubscription> : ($call is Operation\Activity\SetRepoSubscription::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositorySubscription> : ($call is Operation\Activity\DeleteRepoSubscription::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\ListTags::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Tag> : ($call is Operation\Repos\ListTagProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TagProtection> : ($call is Operation\Repos\CreateTagProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TagProtection> : ($call is Operation\Repos\DeleteTagProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\DownloadTarballArchive::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\DownloadTarballArchiveStreaming::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Rx\Observable<string>|\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\ListTeams::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team> : ($call is Operation\Repos\GetAllTopics::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Topic> : ($call is Operation\Repos\ReplaceAllTopics::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Topic> : ($call is Operation\Repos\GetClones::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CloneTraffic> : ($call is Operation\Repos\GetTopPaths::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ContentTraffic> : ($call is Operation\Repos\GetTopReferrers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ReferrerTraffic> : ($call is Operation\Repos\GetViews::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ViewTraffic> : ($call is Operation\Repos\Transfer::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Operation\Repos\CheckVulnerabilityAlerts::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\EnableVulnerabilityAlerts::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\DisableVulnerabilityAlerts::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\DownloadZipballArchive::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\DownloadZipballArchiveStreaming::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Rx\Observable<string>|\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\CreateUsingTemplate::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Repository> : ($call is Operation\Repos\ListPublic::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Operation\Actions\ListEnvironmentSecrets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListEnvironmentSecrets\Response\Applicationjson\H200> : ($call is Operation\Actions\GetEnvironmentPublicKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsPublicKey> : ($call is Operation\Actions\GetEnvironmentSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsSecret> : ($call is Operation\Actions\CreateOrUpdateEnvironmentSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\DeleteEnvironmentSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListEnvironmentVariables::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListEnvironmentVariables\Response\Applicationjson\H200> : ($call is Operation\Actions\CreateEnvironmentVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\GetEnvironmentVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsVariable> : ($call is Operation\Actions\DeleteEnvironmentVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\UpdateEnvironmentVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Search\Code::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Search\Code\Response\Applicationjson\H200> : ($call is Operation\Search\Commits::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Search\Commits\Response\Applicationjson\H200> : ($call is Operation\Search\IssuesAndPullRequests::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Search\IssuesAndPullRequests\Response\Applicationjson\H200> : ($call is Operation\Search\Labels::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Search\Labels\Response\Applicationjson\H200> : ($call is Operation\Search\Repos::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Search\Repos\Response\Applicationjson\H200> : ($call is Operation\Search\Topics::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Search\Topics\Response\Applicationjson\H200> : ($call is Operation\Search\Users::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Search\Users\Response\Applicationjson\H200> : ($call is Operation\Teams\GetLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamFull> : ($call is Operation\Teams\DeleteLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\UpdateLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamFull> : ($call is Operation\Teams\ListDiscussionsLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Operation\Teams\CreateDiscussionLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Operation\Teams\GetDiscussionLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Operation\Teams\DeleteDiscussionLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\UpdateDiscussionLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Operation\Teams\ListDiscussionCommentsLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Operation\Teams\CreateDiscussionCommentLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Operation\Teams\GetDiscussionCommentLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Operation\Teams\DeleteDiscussionCommentLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\UpdateDiscussionCommentLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Operation\Reactions\ListForTeamDiscussionCommentLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\CreateForTeamDiscussionCommentLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\ListForTeamDiscussionLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\CreateForTeamDiscussionLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Teams\ListPendingInvitationsLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationInvitation> : ($call is Operation\Teams\ListMembersLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Teams\GetMemberLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\AddMemberLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\RemoveMemberLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\GetMembershipForUserLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamMembership> : ($call is Operation\Teams\AddOrUpdateMembershipForUserLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamMembership> : ($call is Operation\Teams\RemoveMembershipForUserLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\ListProjectsLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamProject> : ($call is Operation\Teams\CheckPermissionsForProjectLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamProject> : ($call is Operation\Teams\AddOrUpdateProjectPermissionsLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\RemoveProjectLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\ListReposLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Operation\Teams\CheckPermissionsForRepoLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamRepository> : ($call is Operation\Teams\AddOrUpdateRepoPermissionsLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\RemoveRepoLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\ListChildLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team> : ($call is Operation\Users\GetAuthenticated::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Users\GetAuthenticated\Response\Applicationjson\H200> : ($call is Operation\Users\UpdateAuthenticated::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PrivateUser> : ($call is Operation\Users\ListBlockedByAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Users\CheckBlocked::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Users\Block::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Users\Unblock::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Codespaces\ListForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\ListForAuthenticatedUser\Response\Applicationjson\H200> : ($call is Operation\Codespaces\CreateForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Codespace> : ($call is Operation\Codespaces\ListSecretsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\ListSecretsForAuthenticatedUser\Response\Applicationjson\H200> : ($call is Operation\Codespaces\GetPublicKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodespacesUserPublicKey> : ($call is Operation\Codespaces\GetSecretForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodespacesSecret> : ($call is Operation\Codespaces\CreateOrUpdateSecretForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Codespaces\DeleteSecretForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Codespaces\ListRepositoriesForSecretForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\ListRepositoriesForSecretForAuthenticatedUser\Response\Applicationjson\H200> : ($call is Operation\Codespaces\SetRepositoriesForSecretForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Codespaces\AddRepositoryForSecretForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Codespaces\RemoveRepositoryForSecretForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Codespaces\GetForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Codespace> : ($call is Operation\Codespaces\DeleteForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\DeleteForAuthenticatedUser\Response\Applicationjson\H202> : ($call is Operation\Codespaces\UpdateForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Codespace> : ($call is Operation\Codespaces\ExportForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodespaceExportDetails> : ($call is Operation\Codespaces\GetExportDetailsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodespaceExportDetails> : ($call is Operation\Codespaces\CodespaceMachinesForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\CodespaceMachinesForAuthenticatedUser\Response\Applicationjson\H200> : ($call is Operation\Codespaces\PublishForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodespaceWithFullRepository> : ($call is Operation\Codespaces\StartForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Codespace> : ($call is Operation\Codespaces\StopForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Codespace> : ($call is Operation\Packages\ListDockerMigrationConflictingPackagesForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Package> : ($call is Operation\Users\SetPrimaryEmailVisibilityForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Email> : ($call is Operation\Users\ListEmailsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Email> : ($call is Operation\Users\AddEmailForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Email> : ($call is Operation\Users\DeleteEmailForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Users\ListFollowersForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Users\ListFollowedByAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Users\CheckPersonIsFollowedByAuthenticated::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Users\Follow::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Users\Unfollow::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Users\ListGpgKeysForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GpgKey> : ($call is Operation\Users\CreateGpgKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GpgKey> : ($call is Operation\Users\GetGpgKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GpgKey> : ($call is Operation\Users\DeleteGpgKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Apps\ListInstallationsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Apps\ListInstallationsForAuthenticatedUser\Response\Applicationjson\H200> : ($call is Operation\Apps\ListInstallationReposForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Apps\ListInstallationReposForAuthenticatedUser\Response\Applicationjson\H200> : ($call is Operation\Apps\AddRepoToInstallationForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Apps\RemoveRepoFromInstallationForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Interactions\GetRestrictionsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Interactions\GetRestrictionsForAuthenticatedUser\Response\Applicationjson\H200> : ($call is Operation\Interactions\SetRestrictionsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\InteractionLimitResponse> : ($call is Operation\Interactions\RemoveRestrictionsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Issues\ListForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue> : ($call is Operation\Users\ListPublicSshKeysForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Key> : ($call is Operation\Users\CreatePublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Key> : ($call is Operation\Users\GetPublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Key> : ($call is Operation\Users\DeletePublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Apps\ListSubscriptionsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\UserMarketplacePurchase> : ($call is Operation\Apps\ListSubscriptionsForAuthenticatedUserStubbed::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\UserMarketplacePurchase> : ($call is Operation\Orgs\ListMembershipsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgMembership> : ($call is Operation\Orgs\GetMembershipForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgMembership> : ($call is Operation\Orgs\UpdateMembershipForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgMembership> : ($call is Operation\Migrations\ListForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Migration> : ($call is Operation\Migrations\StartForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Migration> : ($call is Operation\Migrations\GetStatusForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Migration> : ($call is Operation\Migrations\GetArchiveForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Migrations\DeleteArchiveForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Migrations\UnlockRepoForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Migrations\ListReposForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Operation\Orgs\ListForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationSimple> : ($call is Operation\Packages\ListPackagesForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Package> : ($call is Operation\Packages\GetPackageForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Package> : ($call is Operation\Packages\DeletePackageForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Packages\RestorePackageForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Packages\GetAllPackageVersionsForPackageOwnedByAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PackageVersion> : ($call is Operation\Packages\GetPackageVersionForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PackageVersion> : ($call is Operation\Packages\DeletePackageVersionForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Packages\RestorePackageVersionForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Projects\CreateForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project> : ($call is Operation\Users\ListPublicEmailsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Email> : ($call is Operation\Repos\ListForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Repository> : ($call is Operation\Repos\CreateForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Repository> : ($call is Operation\Repos\ListInvitationsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryInvitation> : ($call is Operation\Repos\DeclineInvitationForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\AcceptInvitationForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Users\ListSocialAccountsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SocialAccount> : ($call is Operation\Users\AddSocialAccountForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SocialAccount> : ($call is Operation\Users\DeleteSocialAccountForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Users\ListSshSigningKeysForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SshSigningKey> : ($call is Operation\Users\CreateSshSigningKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SshSigningKey> : ($call is Operation\Users\GetSshSigningKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SshSigningKey> : ($call is Operation\Users\DeleteSshSigningKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Activity\ListReposStarredByAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Repository|Schema\StarredRepository> : ($call is Operation\Activity\CheckRepoIsStarredByAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Activity\StarRepoForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Activity\UnstarRepoForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Activity\ListWatchedReposForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Operation\Teams\ListForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamFull> : ($call is Operation\Users\List_::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Users\GetByUsername::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Users\GetByUsername\Response\Applicationjson\H200> : ($call is Operation\Packages\ListDockerMigrationConflictingPackagesForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Package> : ($call is Operation\Activity\ListEventsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event> : ($call is Operation\Activity\ListOrgEventsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event> : ($call is Operation\Activity\ListPublicEventsForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event> : ($call is Operation\Users\ListFollowersForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Users\ListFollowingForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Users\CheckFollowingForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Gists\ListForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BaseGist> : ($call is Operation\Users\ListGpgKeysForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GpgKey> : ($call is Operation\Users\GetContextForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Hovercard> : ($call is Operation\Apps\GetUserInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Installation> : ($call is Operation\Users\ListPublicKeysForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\KeySimple> : ($call is Operation\Orgs\ListForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationSimple> : ($call is Operation\Packages\ListPackagesForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Package> : ($call is Operation\Packages\GetPackageForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Package> : ($call is Operation\Packages\DeletePackageForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Packages\RestorePackageForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Packages\GetAllPackageVersionsForPackageOwnedByUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PackageVersion> : ($call is Operation\Packages\GetPackageVersionForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PackageVersion> : ($call is Operation\Packages\DeletePackageVersionForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Packages\RestorePackageVersionForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Projects\ListForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project> : ($call is Operation\Activity\ListReceivedEventsForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event> : ($call is Operation\Activity\ListReceivedPublicEventsForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event> : ($call is Operation\Repos\ListForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Operation\Billing\GetGithubActionsBillingUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsBillingUsage> : ($call is Operation\Billing\GetGithubPackagesBillingUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PackagesBillingUsage> : ($call is Operation\Billing\GetSharedStorageBillingUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CombinedBillingUsage> : ($call is Operation\Users\ListSocialAccountsForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SocialAccount> : ($call is Operation\Users\ListSshSigningKeysForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SshSigningKey> : ($call is Operation\Activity\ListReposStarredByUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Activity\ListReposStarredByUser\Response\Applicationjson\H200> : ($call is Operation\Activity\ListReposWatchedByUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Operation\Meta\GetAllVersions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Meta\GetAllVersions\Response\Applicationjson\H200> : \React\Promise\PromiseInterface<Schema\Operation\Meta\GetZen\Response\Textplain
     */
    public function callAsync(string $call, array $params = array())
    {
        [$method, $path] = explode(' ', $call);
        $pathChunks = explode('/', $path);
        $pathChunksCount = count($pathChunks);
        if ($method === 'GET') {
            if ($pathChunksCount === 1) {
                if ($pathChunks[0] == '') {
                    if ($call == 'GET /') {
                        $arguments = array();
                        if (\array_key_exists(Hydrator\Operation\Root::class, $this->hydrator) == false) {
                            $this->hydrator[Hydrator\Operation\Root::class] = $this->hydrators->getObjectMapperOperation🌀Root();
                        }
                        $operation = new Operation\Meta\Root($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Root::class]);
                        $request = $operation->createRequest($params);
                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Root {
                            return $operation->createResponse($response);
                        });
                    }
                }
            } elseif ($pathChunksCount === 2) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'app') {
                        if ($call == 'GET /app') {
                            $arguments = array();
                            if (\array_key_exists(Hydrator\Operation\App::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\App::class] = $this->hydrators->getObjectMapperOperation🌀App();
                            }
                            $operation = new Operation\Apps\GetAuthenticated($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App::class]);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Integration {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif ($pathChunks[1] == 'codes_of_conduct') {
                        if ($call == 'GET /codes_of_conduct') {
                            $arguments = array();
                            if (\array_key_exists(Hydrator\Operation\CodesOfConduct::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\CodesOfConduct::class] = $this->hydrators->getObjectMapperOperation🌀CodesOfConduct();
                            }
                            $operation = new Operation\CodesOfConduct\GetAllCodesOfConduct($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\CodesOfConduct::class]);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif ($pathChunks[1] == 'emojis') {
                        if ($call == 'GET /emojis') {
                            $arguments = array();
                            if (\array_key_exists(Hydrator\Operation\Emojis::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Emojis::class] = $this->hydrators->getObjectMapperOperation🌀Emojis();
                            }
                            $operation = new Operation\Emojis\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Emojis::class]);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Emojis\Get\Response\Applicationjson\H200 {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif ($pathChunks[1] == 'events') {
                        if ($call == 'GET /events') {
                            $arguments = array();
                            if (array_key_exists('per_page', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                            }
                            $arguments['per_page'] = $params['per_page'];
                            unset($params['per_page']);
                            if (array_key_exists('page', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: page');
                            }
                            $arguments['page'] = $params['page'];
                            unset($params['page']);
                            if (\array_key_exists(Hydrator\Operation\Events::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Events::class] = $this->hydrators->getObjectMapperOperation🌀Events();
                            }
                            $operation = new Operation\Activity\ListPublicEvents($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Events::class], $arguments['per_page'], $arguments['page']);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif ($pathChunks[1] == 'feeds') {
                        if ($call == 'GET /feeds') {
                            $arguments = array();
                            if (\array_key_exists(Hydrator\Operation\Feeds::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Feeds::class] = $this->hydrators->getObjectMapperOperation🌀Feeds();
                            }
                            $operation = new Operation\Activity\GetFeeds($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Feeds::class]);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Feed {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif ($pathChunks[1] == 'gists') {
                        if ($call == 'GET /gists') {
                            $arguments = array();
                            if (array_key_exists('since', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: since');
                            }
                            $arguments['since'] = $params['since'];
                            unset($params['since']);
                            if (array_key_exists('per_page', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                            }
                            $arguments['per_page'] = $params['per_page'];
                            unset($params['per_page']);
                            if (array_key_exists('page', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: page');
                            }
                            $arguments['page'] = $params['page'];
                            unset($params['page']);
                            if (\array_key_exists(Hydrator\Operation\Gists::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Gists::class] = $this->hydrators->getObjectMapperOperation🌀Gists();
                            }
                            $operation = new Operation\Gists\List_($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists::class], $arguments['since'], $arguments['per_page'], $arguments['page']);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif ($pathChunks[1] == 'issues') {
                        if ($call == 'GET /issues') {
                            $arguments = array();
                            if (array_key_exists('labels', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: labels');
                            }
                            $arguments['labels'] = $params['labels'];
                            unset($params['labels']);
                            if (array_key_exists('since', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: since');
                            }
                            $arguments['since'] = $params['since'];
                            unset($params['since']);
                            if (array_key_exists('collab', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: collab');
                            }
                            $arguments['collab'] = $params['collab'];
                            unset($params['collab']);
                            if (array_key_exists('orgs', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: orgs');
                            }
                            $arguments['orgs'] = $params['orgs'];
                            unset($params['orgs']);
                            if (array_key_exists('owned', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: owned');
                            }
                            $arguments['owned'] = $params['owned'];
                            unset($params['owned']);
                            if (array_key_exists('pulls', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: pulls');
                            }
                            $arguments['pulls'] = $params['pulls'];
                            unset($params['pulls']);
                            if (array_key_exists('filter', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: filter');
                            }
                            $arguments['filter'] = $params['filter'];
                            unset($params['filter']);
                            if (array_key_exists('state', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: state');
                            }
                            $arguments['state'] = $params['state'];
                            unset($params['state']);
                            if (array_key_exists('sort', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: sort');
                            }
                            $arguments['sort'] = $params['sort'];
                            unset($params['sort']);
                            if (array_key_exists('direction', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: direction');
                            }
                            $arguments['direction'] = $params['direction'];
                            unset($params['direction']);
                            if (array_key_exists('per_page', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                            }
                            $arguments['per_page'] = $params['per_page'];
                            unset($params['per_page']);
                            if (array_key_exists('page', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: page');
                            }
                            $arguments['page'] = $params['page'];
                            unset($params['page']);
                            if (\array_key_exists(Hydrator\Operation\Issues::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Issues::class] = $this->hydrators->getObjectMapperOperation🌀Issues();
                            }
                            $operation = new Operation\Issues\List_($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Issues::class], $arguments['labels'], $arguments['since'], $arguments['collab'], $arguments['orgs'], $arguments['owned'], $arguments['pulls'], $arguments['filter'], $arguments['state'], $arguments['sort'], $arguments['direction'], $arguments['per_page'], $arguments['page']);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif ($pathChunks[1] == 'licenses') {
                        if ($call == 'GET /licenses') {
                            $arguments = array();
                            if (array_key_exists('featured', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: featured');
                            }
                            $arguments['featured'] = $params['featured'];
                            unset($params['featured']);
                            if (array_key_exists('per_page', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                            }
                            $arguments['per_page'] = $params['per_page'];
                            unset($params['per_page']);
                            if (array_key_exists('page', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: page');
                            }
                            $arguments['page'] = $params['page'];
                            unset($params['page']);
                            if (\array_key_exists(Hydrator\Operation\Licenses::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Licenses::class] = $this->hydrators->getObjectMapperOperation🌀Licenses();
                            }
                            $operation = new Operation\Licenses\GetAllCommonlyUsed($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Licenses::class], $arguments['featured'], $arguments['per_page'], $arguments['page']);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif ($pathChunks[1] == 'meta') {
                        if ($call == 'GET /meta') {
                            $arguments = array();
                            if (\array_key_exists(Hydrator\Operation\Meta::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Meta::class] = $this->hydrators->getObjectMapperOperation🌀Meta();
                            }
                            $operation = new Operation\Meta\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Meta::class]);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ApiOverview {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif ($pathChunks[1] == 'notifications') {
                        if ($call == 'GET /notifications') {
                            $arguments = array();
                            if (array_key_exists('since', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: since');
                            }
                            $arguments['since'] = $params['since'];
                            unset($params['since']);
                            if (array_key_exists('before', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: before');
                            }
                            $arguments['before'] = $params['before'];
                            unset($params['before']);
                            if (array_key_exists('all', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: all');
                            }
                            $arguments['all'] = $params['all'];
                            unset($params['all']);
                            if (array_key_exists('participating', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: participating');
                            }
                            $arguments['participating'] = $params['participating'];
                            unset($params['participating']);
                            if (array_key_exists('page', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: page');
                            }
                            $arguments['page'] = $params['page'];
                            unset($params['page']);
                            if (array_key_exists('per_page', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                            }
                            $arguments['per_page'] = $params['per_page'];
                            unset($params['per_page']);
                            if (\array_key_exists(Hydrator\Operation\Notifications::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Notifications::class] = $this->hydrators->getObjectMapperOperation🌀Notifications();
                            }
                            $operation = new Operation\Activity\ListNotificationsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Notifications::class], $arguments['since'], $arguments['before'], $arguments['all'], $arguments['participating'], $arguments['page'], $arguments['per_page']);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif ($pathChunks[1] == 'octocat') {
                        if ($call == 'GET /octocat') {
                            $arguments = array();
                            if (array_key_exists('s', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: s');
                            }
                            $arguments['s'] = $params['s'];
                            unset($params['s']);
                            if (\array_key_exists(Hydrator\Operation\Octocat::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Octocat::class] = $this->hydrators->getObjectMapperOperation🌀Octocat();
                            }
                            $operation = new Operation\Meta\GetOctocat($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Octocat::class], $arguments['s']);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Meta\GetOctocat\Response\ApplicationoctocatStream\H200 {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif ($pathChunks[1] == 'organizations') {
                        if ($call == 'GET /organizations') {
                            $arguments = array();
                            if (array_key_exists('since', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: since');
                            }
                            $arguments['since'] = $params['since'];
                            unset($params['since']);
                            if (array_key_exists('per_page', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                            }
                            $arguments['per_page'] = $params['per_page'];
                            unset($params['per_page']);
                            if (\array_key_exists(Hydrator\Operation\Organizations::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Organizations::class] = $this->hydrators->getObjectMapperOperation🌀Organizations();
                            }
                            $operation = new Operation\Orgs\List_($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Organizations::class], $arguments['since'], $arguments['per_page']);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif ($pathChunks[1] == 'rate_limit') {
                        if ($call == 'GET /rate_limit') {
                            $arguments = array();
                            if (\array_key_exists(Hydrator\Operation\RateLimit::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\RateLimit::class] = $this->hydrators->getObjectMapperOperation🌀RateLimit();
                            }
                            $operation = new Operation\RateLimit\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\RateLimit::class]);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\RateLimitOverview {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif ($pathChunks[1] == 'repositories') {
                        if ($call == 'GET /repositories') {
                            $arguments = array();
                            if (array_key_exists('since', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: since');
                            }
                            $arguments['since'] = $params['since'];
                            unset($params['since']);
                            if (\array_key_exists(Hydrator\Operation\Repositories::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Repositories();
                            }
                            $operation = new Operation\Repos\ListPublic($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repositories::class], $arguments['since']);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($call == 'GET /user') {
                            $arguments = array();
                            if (\array_key_exists(Hydrator\Operation\User::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\User::class] = $this->hydrators->getObjectMapperOperation🌀User();
                            }
                            $operation = new Operation\Users\GetAuthenticated($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User::class]);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Users\GetAuthenticated\Response\Applicationjson\H200 {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif ($pathChunks[1] == 'users') {
                        if ($call == 'GET /users') {
                            $arguments = array();
                            if (array_key_exists('since', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: since');
                            }
                            $arguments['since'] = $params['since'];
                            unset($params['since']);
                            if (array_key_exists('per_page', $params) === false) {
                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                            }
                            $arguments['per_page'] = $params['per_page'];
                            unset($params['per_page']);
                            if (\array_key_exists(Hydrator\Operation\Users::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Users::class] = $this->hydrators->getObjectMapperOperation🌀Users();
                            }
                            $operation = new Operation\Users\List_($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users::class], $arguments['since'], $arguments['per_page']);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif ($pathChunks[1] == 'versions') {
                        if ($call == 'GET /versions') {
                            $arguments = array();
                            if (\array_key_exists(Hydrator\Operation\Versions::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Versions::class] = $this->hydrators->getObjectMapperOperation🌀Versions();
                            }
                            $operation = new Operation\Meta\GetAllVersions($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Versions::class]);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif ($pathChunks[1] == 'zen') {
                        if ($call == 'GET /zen') {
                            $arguments = array();
                            if (\array_key_exists(Hydrator\Operation\Zen::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Zen::class] = $this->hydrators->getObjectMapperOperation🌀Zen();
                            }
                            $operation = new Operation\Meta\GetZen($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Zen::class]);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Meta\GetZen\Response\Textplain\H200 {
                                return $operation->createResponse($response);
                            });
                        }
                    }
                }
            } elseif ($pathChunksCount === 4) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'app') {
                        if ($pathChunks[2] == 'hook') {
                            if ($pathChunks[3] == 'config') {
                                if ($call == 'GET /app/hook/config') {
                                    $arguments = array();
                                    if (\array_key_exists(Hydrator\Operation\App\Hook\Config::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\App\Hook\Config::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Hook🌀Config();
                                    }
                                    $operation = new Operation\Apps\GetWebhookConfigForApp($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Hook\Config::class]);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\WebhookConfig {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'deliveries') {
                                if ($call == 'GET /app/hook/deliveries') {
                                    $arguments = array();
                                    if (array_key_exists('cursor', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: cursor');
                                    }
                                    $arguments['cursor'] = $params['cursor'];
                                    unset($params['cursor']);
                                    if (array_key_exists('redelivery', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: redelivery');
                                    }
                                    $arguments['redelivery'] = $params['redelivery'];
                                    unset($params['redelivery']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (\array_key_exists(Hydrator\Operation\App\Hook\Deliveries::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\App\Hook\Deliveries::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Hook🌀Deliveries();
                                    }
                                    $operation = new Operation\Apps\ListWebhookDeliveries($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Hook\Deliveries::class], $arguments['cursor'], $arguments['redelivery'], $arguments['per_page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'installations') {
                            if ($pathChunks[3] == '{installation_id}') {
                                if ($call == 'GET /app/installations/{installation_id}') {
                                    $arguments = array();
                                    if (array_key_exists('installation_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: installation_id');
                                    }
                                    $arguments['installation_id'] = $params['installation_id'];
                                    unset($params['installation_id']);
                                    if (\array_key_exists(Hydrator\Operation\App\Installations\CbInstallationIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Installations🌀CbInstallationIdRcb();
                                    }
                                    $operation = new Operation\Apps\GetInstallation($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb::class], $arguments['installation_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Installation {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'gists') {
                        if ($pathChunks[2] == '{gist_id}') {
                            if ($pathChunks[3] == 'comments') {
                                if ($call == 'GET /gists/{gist_id}/comments') {
                                    $arguments = array();
                                    if (array_key_exists('gist_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: gist_id');
                                    }
                                    $arguments['gist_id'] = $params['gist_id'];
                                    unset($params['gist_id']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Comments::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Comments();
                                    }
                                    $operation = new Operation\Gists\ListComments($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments::class], $arguments['gist_id'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'commits') {
                                if ($call == 'GET /gists/{gist_id}/commits') {
                                    $arguments = array();
                                    if (array_key_exists('gist_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: gist_id');
                                    }
                                    $arguments['gist_id'] = $params['gist_id'];
                                    unset($params['gist_id']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Commits::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Commits::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Commits();
                                    }
                                    $operation = new Operation\Gists\ListCommits($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Commits::class], $arguments['gist_id'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'forks') {
                                if ($call == 'GET /gists/{gist_id}/forks') {
                                    $arguments = array();
                                    if (array_key_exists('gist_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: gist_id');
                                    }
                                    $arguments['gist_id'] = $params['gist_id'];
                                    unset($params['gist_id']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Forks::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Forks::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Forks();
                                    }
                                    $operation = new Operation\Gists\ListForks($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Forks::class], $arguments['gist_id'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'star') {
                                if ($call == 'GET /gists/{gist_id}/star') {
                                    $arguments = array();
                                    if (array_key_exists('gist_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: gist_id');
                                    }
                                    $arguments['gist_id'] = $params['gist_id'];
                                    unset($params['gist_id']);
                                    if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Star::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Star::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Star();
                                    }
                                    $operation = new Operation\Gists\CheckIsStarred($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Star::class], $arguments['gist_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == '{sha}') {
                                if ($call == 'GET /gists/{gist_id}/{sha}') {
                                    $arguments = array();
                                    if (array_key_exists('gist_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: gist_id');
                                    }
                                    $arguments['gist_id'] = $params['gist_id'];
                                    unset($params['gist_id']);
                                    if (array_key_exists('sha', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: sha');
                                    }
                                    $arguments['sha'] = $params['sha'];
                                    unset($params['sha']);
                                    if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\CbShaRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\CbShaRcb::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀CbShaRcb();
                                    }
                                    $operation = new Operation\Gists\GetRevision($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\CbShaRcb::class], $arguments['gist_id'], $arguments['sha']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\GistSimple {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'gitignore') {
                        if ($pathChunks[2] == 'templates') {
                            if ($pathChunks[3] == '{name}') {
                                if ($call == 'GET /gitignore/templates/{name}') {
                                    $arguments = array();
                                    if (array_key_exists('name', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: name');
                                    }
                                    $arguments['name'] = $params['name'];
                                    unset($params['name']);
                                    if (\array_key_exists(Hydrator\Operation\Gitignore\Templates\CbNameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gitignore\Templates\CbNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Gitignore🌀Templates🌀CbNameRcb();
                                    }
                                    $operation = new Operation\Gitignore\GetTemplate($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gitignore\Templates\CbNameRcb::class], $arguments['name']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\GitignoreTemplate {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'marketplace_listing') {
                        if ($pathChunks[2] == 'accounts') {
                            if ($pathChunks[3] == '{account_id}') {
                                if ($call == 'GET /marketplace_listing/accounts/{account_id}') {
                                    $arguments = array();
                                    if (array_key_exists('account_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: account_id');
                                    }
                                    $arguments['account_id'] = $params['account_id'];
                                    unset($params['account_id']);
                                    if (\array_key_exists(Hydrator\Operation\MarketplaceListing\Accounts\CbAccountIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\MarketplaceListing\Accounts\CbAccountIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀MarketplaceListing🌀Accounts🌀CbAccountIdRcb();
                                    }
                                    $operation = new Operation\Apps\GetSubscriptionPlanForAccount($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\MarketplaceListing\Accounts\CbAccountIdRcb::class], $arguments['account_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\MarketplacePurchase {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'stubbed') {
                            if ($pathChunks[3] == 'plans') {
                                if ($call == 'GET /marketplace_listing/stubbed/plans') {
                                    $arguments = array();
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\MarketplaceListing\Stubbed\Plans::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\MarketplaceListing\Stubbed\Plans::class] = $this->hydrators->getObjectMapperOperation🌀MarketplaceListing🌀Stubbed🌀Plans();
                                    }
                                    $operation = new Operation\Apps\ListPlansStubbed($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\MarketplaceListing\Stubbed\Plans::class], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'notifications') {
                        if ($pathChunks[2] == 'threads') {
                            if ($pathChunks[3] == '{thread_id}') {
                                if ($call == 'GET /notifications/threads/{thread_id}') {
                                    $arguments = array();
                                    if (array_key_exists('thread_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: thread_id');
                                    }
                                    $arguments['thread_id'] = $params['thread_id'];
                                    unset($params['thread_id']);
                                    if (\array_key_exists(Hydrator\Operation\Notifications\Threads\CbThreadIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Notifications🌀Threads🌀CbThreadIdRcb();
                                    }
                                    $operation = new Operation\Activity\GetThread($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb::class], $arguments['thread_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Thread {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'organizations') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'personal-access-token-requests') {
                                if ($call == 'GET /organizations/{org}/personal-access-token-requests') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (array_key_exists('owner', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                    }
                                    $arguments['owner'] = $params['owner'];
                                    unset($params['owner']);
                                    if (array_key_exists('repository', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: repository');
                                    }
                                    $arguments['repository'] = $params['repository'];
                                    unset($params['repository']);
                                    if (array_key_exists('permission', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: permission');
                                    }
                                    $arguments['permission'] = $params['permission'];
                                    unset($params['permission']);
                                    if (array_key_exists('last_used_before', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: last_used_before');
                                    }
                                    $arguments['last_used_before'] = $params['last_used_before'];
                                    unset($params['last_used_before']);
                                    if (array_key_exists('last_used_after', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: last_used_after');
                                    }
                                    $arguments['last_used_after'] = $params['last_used_after'];
                                    unset($params['last_used_after']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (array_key_exists('sort', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: sort');
                                    }
                                    $arguments['sort'] = $params['sort'];
                                    unset($params['sort']);
                                    if (array_key_exists('direction', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: direction');
                                    }
                                    $arguments['direction'] = $params['direction'];
                                    unset($params['direction']);
                                    if (\array_key_exists(Hydrator\Operation\Organizations\CbOrgRcb\PersonalAccessTokenRequests::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Organizations\CbOrgRcb\PersonalAccessTokenRequests::class] = $this->hydrators->getObjectMapperOperation🌀Organizations🌀CbOrgRcb🌀PersonalAccessTokenRequests();
                                    }
                                    $operation = new Operation\Orgs\ListPatGrantRequests($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Organizations\CbOrgRcb\PersonalAccessTokenRequests::class], $arguments['org'], $arguments['owner'], $arguments['repository'], $arguments['permission'], $arguments['last_used_before'], $arguments['last_used_after'], $arguments['per_page'], $arguments['page'], $arguments['sort'], $arguments['direction']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'personal-access-tokens') {
                                if ($call == 'GET /organizations/{org}/personal-access-tokens') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (array_key_exists('owner', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                    }
                                    $arguments['owner'] = $params['owner'];
                                    unset($params['owner']);
                                    if (array_key_exists('repository', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: repository');
                                    }
                                    $arguments['repository'] = $params['repository'];
                                    unset($params['repository']);
                                    if (array_key_exists('permission', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: permission');
                                    }
                                    $arguments['permission'] = $params['permission'];
                                    unset($params['permission']);
                                    if (array_key_exists('last_used_before', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: last_used_before');
                                    }
                                    $arguments['last_used_before'] = $params['last_used_before'];
                                    unset($params['last_used_before']);
                                    if (array_key_exists('last_used_after', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: last_used_after');
                                    }
                                    $arguments['last_used_after'] = $params['last_used_after'];
                                    unset($params['last_used_after']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (array_key_exists('sort', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: sort');
                                    }
                                    $arguments['sort'] = $params['sort'];
                                    unset($params['sort']);
                                    if (array_key_exists('direction', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: direction');
                                    }
                                    $arguments['direction'] = $params['direction'];
                                    unset($params['direction']);
                                    if (\array_key_exists(Hydrator\Operation\Organizations\CbOrgRcb\PersonalAccessTokens::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Organizations\CbOrgRcb\PersonalAccessTokens::class] = $this->hydrators->getObjectMapperOperation🌀Organizations🌀CbOrgRcb🌀PersonalAccessTokens();
                                    }
                                    $operation = new Operation\Orgs\ListPatGrants($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Organizations\CbOrgRcb\PersonalAccessTokens::class], $arguments['org'], $arguments['owner'], $arguments['repository'], $arguments['permission'], $arguments['last_used_before'], $arguments['last_used_after'], $arguments['per_page'], $arguments['page'], $arguments['sort'], $arguments['direction']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'blocks') {
                                if ($call == 'GET /orgs/{org}/blocks') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Blocks::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Blocks::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Blocks();
                                    }
                                    $operation = new Operation\Orgs\ListBlockedUsers($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Blocks::class], $arguments['org'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'codespaces') {
                                if ($call == 'GET /orgs/{org}/codespaces') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces();
                                    }
                                    $operation = new Operation\Codespaces\ListInOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces::class], $arguments['org'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Codespaces\ListInOrganization\Response\Applicationjson\H200 {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'events') {
                                if ($call == 'GET /orgs/{org}/events') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Events::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Events::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Events();
                                    }
                                    $operation = new Operation\Activity\ListPublicOrgEvents($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Events::class], $arguments['org'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'failed_invitations') {
                                if ($call == 'GET /orgs/{org}/failed_invitations') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\FailedInvitations::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\FailedInvitations::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀FailedInvitations();
                                    }
                                    $operation = new Operation\Orgs\ListFailedInvitations($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\FailedInvitations::class], $arguments['org'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'hooks') {
                                if ($call == 'GET /orgs/{org}/hooks') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks();
                                    }
                                    $operation = new Operation\Orgs\ListWebhooks($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks::class], $arguments['org'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'installation') {
                                if ($call == 'GET /orgs/{org}/installation') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Installation::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Installation::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Installation();
                                    }
                                    $operation = new Operation\Apps\GetOrgInstallation($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Installation::class], $arguments['org']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Installation {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'installations') {
                                if ($call == 'GET /orgs/{org}/installations') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Installations::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Installations::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Installations();
                                    }
                                    $operation = new Operation\Orgs\ListAppInstallations($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Installations::class], $arguments['org'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Orgs\ListAppInstallations\Response\Applicationjson\H200 {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'interaction-limits') {
                                if ($call == 'GET /orgs/{org}/interaction-limits') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\InteractionLimits::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\InteractionLimits::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀InteractionLimits();
                                    }
                                    $operation = new Operation\Interactions\GetRestrictionsForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\InteractionLimits::class], $arguments['org']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Interactions\GetRestrictionsForOrg\Response\Applicationjson\H200 {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'invitations') {
                                if ($call == 'GET /orgs/{org}/invitations') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (array_key_exists('role', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: role');
                                    }
                                    $arguments['role'] = $params['role'];
                                    unset($params['role']);
                                    if (array_key_exists('invitation_source', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: invitation_source');
                                    }
                                    $arguments['invitation_source'] = $params['invitation_source'];
                                    unset($params['invitation_source']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Invitations::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Invitations::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Invitations();
                                    }
                                    $operation = new Operation\Orgs\ListPendingInvitations($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Invitations::class], $arguments['org'], $arguments['per_page'], $arguments['page'], $arguments['role'], $arguments['invitation_source']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'issues') {
                                if ($call == 'GET /orgs/{org}/issues') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (array_key_exists('labels', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: labels');
                                    }
                                    $arguments['labels'] = $params['labels'];
                                    unset($params['labels']);
                                    if (array_key_exists('since', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: since');
                                    }
                                    $arguments['since'] = $params['since'];
                                    unset($params['since']);
                                    if (array_key_exists('filter', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: filter');
                                    }
                                    $arguments['filter'] = $params['filter'];
                                    unset($params['filter']);
                                    if (array_key_exists('state', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: state');
                                    }
                                    $arguments['state'] = $params['state'];
                                    unset($params['state']);
                                    if (array_key_exists('sort', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: sort');
                                    }
                                    $arguments['sort'] = $params['sort'];
                                    unset($params['sort']);
                                    if (array_key_exists('direction', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: direction');
                                    }
                                    $arguments['direction'] = $params['direction'];
                                    unset($params['direction']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Issues::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Issues::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Issues();
                                    }
                                    $operation = new Operation\Issues\ListForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Issues::class], $arguments['org'], $arguments['labels'], $arguments['since'], $arguments['filter'], $arguments['state'], $arguments['sort'], $arguments['direction'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'members') {
                                if ($call == 'GET /orgs/{org}/members') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (array_key_exists('filter', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: filter');
                                    }
                                    $arguments['filter'] = $params['filter'];
                                    unset($params['filter']);
                                    if (array_key_exists('role', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: role');
                                    }
                                    $arguments['role'] = $params['role'];
                                    unset($params['role']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Members::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Members();
                                    }
                                    $operation = new Operation\Orgs\ListMembers($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members::class], $arguments['org'], $arguments['filter'], $arguments['role'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'migrations') {
                                if ($call == 'GET /orgs/{org}/migrations') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (array_key_exists('exclude', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: exclude');
                                    }
                                    $arguments['exclude'] = $params['exclude'];
                                    unset($params['exclude']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Migrations::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Migrations();
                                    }
                                    $operation = new Operation\Migrations\ListForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations::class], $arguments['org'], $arguments['exclude'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'outside_collaborators') {
                                if ($call == 'GET /orgs/{org}/outside_collaborators') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (array_key_exists('filter', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: filter');
                                    }
                                    $arguments['filter'] = $params['filter'];
                                    unset($params['filter']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\OutsideCollaborators::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\OutsideCollaborators::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀OutsideCollaborators();
                                    }
                                    $operation = new Operation\Orgs\ListOutsideCollaborators($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\OutsideCollaborators::class], $arguments['org'], $arguments['filter'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'packages') {
                                if ($call == 'GET /orgs/{org}/packages') {
                                    $arguments = array();
                                    if (array_key_exists('package_type', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                    }
                                    $arguments['package_type'] = $params['package_type'];
                                    unset($params['package_type']);
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (array_key_exists('visibility', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: visibility');
                                    }
                                    $arguments['visibility'] = $params['visibility'];
                                    unset($params['visibility']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Packages::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Packages();
                                    }
                                    $operation = new Operation\Packages\ListPackagesForOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages::class], $arguments['package_type'], $arguments['org'], $arguments['visibility'], $arguments['page'], $arguments['per_page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'projects') {
                                if ($call == 'GET /orgs/{org}/projects') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (array_key_exists('state', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: state');
                                    }
                                    $arguments['state'] = $params['state'];
                                    unset($params['state']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Projects::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Projects::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Projects();
                                    }
                                    $operation = new Operation\Projects\ListForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Projects::class], $arguments['org'], $arguments['state'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'public_members') {
                                if ($call == 'GET /orgs/{org}/public_members') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\PublicMembers::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\PublicMembers::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀PublicMembers();
                                    }
                                    $operation = new Operation\Orgs\ListPublicMembers($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\PublicMembers::class], $arguments['org'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'repos') {
                                if ($call == 'GET /orgs/{org}/repos') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (array_key_exists('type', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: type');
                                    }
                                    $arguments['type'] = $params['type'];
                                    unset($params['type']);
                                    if (array_key_exists('direction', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: direction');
                                    }
                                    $arguments['direction'] = $params['direction'];
                                    unset($params['direction']);
                                    if (array_key_exists('sort', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: sort');
                                    }
                                    $arguments['sort'] = $params['sort'];
                                    unset($params['sort']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Repos::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Repos::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Repos();
                                    }
                                    $operation = new Operation\Repos\ListForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Repos::class], $arguments['org'], $arguments['type'], $arguments['direction'], $arguments['sort'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'security-managers') {
                                if ($call == 'GET /orgs/{org}/security-managers') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\SecurityManagers::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\SecurityManagers::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀SecurityManagers();
                                    }
                                    $operation = new Operation\Orgs\ListSecurityManagerTeams($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\SecurityManagers::class], $arguments['org']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'teams') {
                                if ($call == 'GET /orgs/{org}/teams') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams();
                                    }
                                    $operation = new Operation\Teams\List_($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams::class], $arguments['org'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'projects') {
                        if ($pathChunks[2] == 'columns') {
                            if ($pathChunks[3] == '{column_id}') {
                                if ($call == 'GET /projects/columns/{column_id}') {
                                    $arguments = array();
                                    if (array_key_exists('column_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: column_id');
                                    }
                                    $arguments['column_id'] = $params['column_id'];
                                    unset($params['column_id']);
                                    if (\array_key_exists(Hydrator\Operation\Projects\Columns\CbColumnIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀CbColumnIdRcb();
                                    }
                                    $operation = new Operation\Projects\GetColumn($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb::class], $arguments['column_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ProjectColumn {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == '{project_id}') {
                            if ($pathChunks[3] == 'collaborators') {
                                if ($call == 'GET /projects/{project_id}/collaborators') {
                                    $arguments = array();
                                    if (array_key_exists('project_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: project_id');
                                    }
                                    $arguments['project_id'] = $params['project_id'];
                                    unset($params['project_id']);
                                    if (array_key_exists('affiliation', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: affiliation');
                                    }
                                    $arguments['affiliation'] = $params['affiliation'];
                                    unset($params['affiliation']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀CbProjectIdRcb🌀Collaborators();
                                    }
                                    $operation = new Operation\Projects\ListCollaborators($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators::class], $arguments['project_id'], $arguments['affiliation'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'columns') {
                                if ($call == 'GET /projects/{project_id}/columns') {
                                    $arguments = array();
                                    if (array_key_exists('project_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: project_id');
                                    }
                                    $arguments['project_id'] = $params['project_id'];
                                    unset($params['project_id']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Projects\CbProjectIdRcb\Columns::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Columns::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀CbProjectIdRcb🌀Columns();
                                    }
                                    $operation = new Operation\Projects\ListColumns($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Columns::class], $arguments['project_id'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($call == 'GET /repos/{owner}/{repo}') {
                                    $arguments = array();
                                    if (array_key_exists('owner', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                    }
                                    $arguments['owner'] = $params['owner'];
                                    unset($params['owner']);
                                    if (array_key_exists('repo', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                    }
                                    $arguments['repo'] = $params['repo'];
                                    unset($params['repo']);
                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb();
                                    }
                                    $operation = new Operation\Repos\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb::class], $arguments['owner'], $arguments['repo']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\FullRepository|\ApiClients\Client\Github\Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'teams') {
                        if ($pathChunks[2] == '{team_id}') {
                            if ($pathChunks[3] == 'discussions') {
                                if ($call == 'GET /teams/{team_id}/discussions') {
                                    $arguments = array();
                                    if (array_key_exists('team_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                    }
                                    $arguments['team_id'] = $params['team_id'];
                                    unset($params['team_id']);
                                    if (array_key_exists('direction', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: direction');
                                    }
                                    $arguments['direction'] = $params['direction'];
                                    unset($params['direction']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions();
                                    }
                                    $operation = new Operation\Teams\ListDiscussionsLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions::class], $arguments['team_id'], $arguments['direction'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'invitations') {
                                if ($call == 'GET /teams/{team_id}/invitations') {
                                    $arguments = array();
                                    if (array_key_exists('team_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                    }
                                    $arguments['team_id'] = $params['team_id'];
                                    unset($params['team_id']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Invitations::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Invitations::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Invitations();
                                    }
                                    $operation = new Operation\Teams\ListPendingInvitationsLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Invitations::class], $arguments['team_id'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'members') {
                                if ($call == 'GET /teams/{team_id}/members') {
                                    $arguments = array();
                                    if (array_key_exists('team_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                    }
                                    $arguments['team_id'] = $params['team_id'];
                                    unset($params['team_id']);
                                    if (array_key_exists('role', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: role');
                                    }
                                    $arguments['role'] = $params['role'];
                                    unset($params['role']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Members::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Members::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Members();
                                    }
                                    $operation = new Operation\Teams\ListMembersLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Members::class], $arguments['team_id'], $arguments['role'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'projects') {
                                if ($call == 'GET /teams/{team_id}/projects') {
                                    $arguments = array();
                                    if (array_key_exists('team_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                    }
                                    $arguments['team_id'] = $params['team_id'];
                                    unset($params['team_id']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Projects::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Projects::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Projects();
                                    }
                                    $operation = new Operation\Teams\ListProjectsLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Projects::class], $arguments['team_id'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'repos') {
                                if ($call == 'GET /teams/{team_id}/repos') {
                                    $arguments = array();
                                    if (array_key_exists('team_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                    }
                                    $arguments['team_id'] = $params['team_id'];
                                    unset($params['team_id']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Repos::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Repos::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Repos();
                                    }
                                    $operation = new Operation\Teams\ListReposLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Repos::class], $arguments['team_id'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'teams') {
                                if ($call == 'GET /teams/{team_id}/teams') {
                                    $arguments = array();
                                    if (array_key_exists('team_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                    }
                                    $arguments['team_id'] = $params['team_id'];
                                    unset($params['team_id']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Teams::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Teams();
                                    }
                                    $operation = new Operation\Teams\ListChildLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Teams::class], $arguments['team_id'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'blocks') {
                            if ($pathChunks[3] == '{username}') {
                                if ($call == 'GET /user/blocks/{username}') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (\array_key_exists(Hydrator\Operation\User\Blocks\CbUsernameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Blocks\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Blocks🌀CbUsernameRcb();
                                    }
                                    $operation = new Operation\Users\CheckBlocked($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Blocks\CbUsernameRcb::class], $arguments['username']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'codespaces') {
                            if ($pathChunks[3] == 'secrets') {
                                if ($call == 'GET /user/codespaces/secrets') {
                                    $arguments = array();
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\User\Codespaces\Secrets::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀Secrets();
                                    }
                                    $operation = new Operation\Codespaces\ListSecretsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets::class], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Codespaces\ListSecretsForAuthenticatedUser\Response\Applicationjson\H200 {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == '{codespace_name}') {
                                if ($call == 'GET /user/codespaces/{codespace_name}') {
                                    $arguments = array();
                                    if (array_key_exists('codespace_name', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: codespace_name');
                                    }
                                    $arguments['codespace_name'] = $params['codespace_name'];
                                    unset($params['codespace_name']);
                                    if (\array_key_exists(Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀CbCodespaceNameRcb();
                                    }
                                    $operation = new Operation\Codespaces\GetForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb::class], $arguments['codespace_name']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Codespace {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'docker') {
                            if ($pathChunks[3] == 'conflicts') {
                                if ($call == 'GET /user/docker/conflicts') {
                                    $arguments = array();
                                    if (\array_key_exists(Hydrator\Operation\User\Docker\Conflicts::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Docker\Conflicts::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Docker🌀Conflicts();
                                    }
                                    $operation = new Operation\Packages\ListDockerMigrationConflictingPackagesForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Docker\Conflicts::class]);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'following') {
                            if ($pathChunks[3] == '{username}') {
                                if ($call == 'GET /user/following/{username}') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (\array_key_exists(Hydrator\Operation\User\Following\CbUsernameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Following\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Following🌀CbUsernameRcb();
                                    }
                                    $operation = new Operation\Users\CheckPersonIsFollowedByAuthenticated($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Following\CbUsernameRcb::class], $arguments['username']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'gpg_keys') {
                            if ($pathChunks[3] == '{gpg_key_id}') {
                                if ($call == 'GET /user/gpg_keys/{gpg_key_id}') {
                                    $arguments = array();
                                    if (array_key_exists('gpg_key_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: gpg_key_id');
                                    }
                                    $arguments['gpg_key_id'] = $params['gpg_key_id'];
                                    unset($params['gpg_key_id']);
                                    if (\array_key_exists(Hydrator\Operation\User\GpgKeys\CbGpgKeyIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\GpgKeys\CbGpgKeyIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀GpgKeys🌀CbGpgKeyIdRcb();
                                    }
                                    $operation = new Operation\Users\GetGpgKeyForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\GpgKeys\CbGpgKeyIdRcb::class], $arguments['gpg_key_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\GpgKey {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'keys') {
                            if ($pathChunks[3] == '{key_id}') {
                                if ($call == 'GET /user/keys/{key_id}') {
                                    $arguments = array();
                                    if (array_key_exists('key_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: key_id');
                                    }
                                    $arguments['key_id'] = $params['key_id'];
                                    unset($params['key_id']);
                                    if (\array_key_exists(Hydrator\Operation\User\Keys\CbKeyIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Keys\CbKeyIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Keys🌀CbKeyIdRcb();
                                    }
                                    $operation = new Operation\Users\GetPublicSshKeyForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Keys\CbKeyIdRcb::class], $arguments['key_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Key {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'marketplace_purchases') {
                            if ($pathChunks[3] == 'stubbed') {
                                if ($call == 'GET /user/marketplace_purchases/stubbed') {
                                    $arguments = array();
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\User\MarketplacePurchases\Stubbed::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\MarketplacePurchases\Stubbed::class] = $this->hydrators->getObjectMapperOperation🌀User🌀MarketplacePurchases🌀Stubbed();
                                    }
                                    $operation = new Operation\Apps\ListSubscriptionsForAuthenticatedUserStubbed($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\MarketplacePurchases\Stubbed::class], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'memberships') {
                            if ($pathChunks[3] == 'orgs') {
                                if ($call == 'GET /user/memberships/orgs') {
                                    $arguments = array();
                                    if (array_key_exists('state', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: state');
                                    }
                                    $arguments['state'] = $params['state'];
                                    unset($params['state']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\User\Memberships\Orgs::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Memberships\Orgs::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Memberships🌀Orgs();
                                    }
                                    $operation = new Operation\Orgs\ListMembershipsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Memberships\Orgs::class], $arguments['state'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'migrations') {
                            if ($pathChunks[3] == '{migration_id}') {
                                if ($call == 'GET /user/migrations/{migration_id}') {
                                    $arguments = array();
                                    if (array_key_exists('migration_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: migration_id');
                                    }
                                    $arguments['migration_id'] = $params['migration_id'];
                                    unset($params['migration_id']);
                                    if (array_key_exists('exclude', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: exclude');
                                    }
                                    $arguments['exclude'] = $params['exclude'];
                                    unset($params['exclude']);
                                    if (\array_key_exists(Hydrator\Operation\User\Migrations\CbMigrationIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Migrations🌀CbMigrationIdRcb();
                                    }
                                    $operation = new Operation\Migrations\GetStatusForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb::class], $arguments['migration_id'], $arguments['exclude']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Migration {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'ssh_signing_keys') {
                            if ($pathChunks[3] == '{ssh_signing_key_id}') {
                                if ($call == 'GET /user/ssh_signing_keys/{ssh_signing_key_id}') {
                                    $arguments = array();
                                    if (array_key_exists('ssh_signing_key_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: ssh_signing_key_id');
                                    }
                                    $arguments['ssh_signing_key_id'] = $params['ssh_signing_key_id'];
                                    unset($params['ssh_signing_key_id']);
                                    if (\array_key_exists(Hydrator\Operation\User\SshSigningKeys\CbSshSigningKeyIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\SshSigningKeys\CbSshSigningKeyIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀SshSigningKeys🌀CbSshSigningKeyIdRcb();
                                    }
                                    $operation = new Operation\Users\GetSshSigningKeyForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\SshSigningKeys\CbSshSigningKeyIdRcb::class], $arguments['ssh_signing_key_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\SshSigningKey {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'users') {
                        if ($pathChunks[2] == '{username}') {
                            if ($pathChunks[3] == 'events') {
                                if ($call == 'GET /users/{username}/events') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Events::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Events::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Events();
                                    }
                                    $operation = new Operation\Activity\ListEventsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Events::class], $arguments['username'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'followers') {
                                if ($call == 'GET /users/{username}/followers') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Followers::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Followers::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Followers();
                                    }
                                    $operation = new Operation\Users\ListFollowersForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Followers::class], $arguments['username'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'following') {
                                if ($call == 'GET /users/{username}/following') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Following::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Following::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Following();
                                    }
                                    $operation = new Operation\Users\ListFollowingForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Following::class], $arguments['username'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'gists') {
                                if ($call == 'GET /users/{username}/gists') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (array_key_exists('since', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: since');
                                    }
                                    $arguments['since'] = $params['since'];
                                    unset($params['since']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Gists::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Gists::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Gists();
                                    }
                                    $operation = new Operation\Gists\ListForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Gists::class], $arguments['username'], $arguments['since'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'gpg_keys') {
                                if ($call == 'GET /users/{username}/gpg_keys') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\GpgKeys::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\GpgKeys::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀GpgKeys();
                                    }
                                    $operation = new Operation\Users\ListGpgKeysForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\GpgKeys::class], $arguments['username'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'hovercard') {
                                if ($call == 'GET /users/{username}/hovercard') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (array_key_exists('subject_type', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: subject_type');
                                    }
                                    $arguments['subject_type'] = $params['subject_type'];
                                    unset($params['subject_type']);
                                    if (array_key_exists('subject_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: subject_id');
                                    }
                                    $arguments['subject_id'] = $params['subject_id'];
                                    unset($params['subject_id']);
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Hovercard::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Hovercard::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Hovercard();
                                    }
                                    $operation = new Operation\Users\GetContextForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Hovercard::class], $arguments['username'], $arguments['subject_type'], $arguments['subject_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Hovercard {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'installation') {
                                if ($call == 'GET /users/{username}/installation') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Installation::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Installation::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Installation();
                                    }
                                    $operation = new Operation\Apps\GetUserInstallation($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Installation::class], $arguments['username']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Installation {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'keys') {
                                if ($call == 'GET /users/{username}/keys') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Keys::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Keys::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Keys();
                                    }
                                    $operation = new Operation\Users\ListPublicKeysForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Keys::class], $arguments['username'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'orgs') {
                                if ($call == 'GET /users/{username}/orgs') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Orgs::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Orgs::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Orgs();
                                    }
                                    $operation = new Operation\Orgs\ListForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Orgs::class], $arguments['username'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'packages') {
                                if ($call == 'GET /users/{username}/packages') {
                                    $arguments = array();
                                    if (array_key_exists('package_type', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                    }
                                    $arguments['package_type'] = $params['package_type'];
                                    unset($params['package_type']);
                                    if (array_key_exists('visibility', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: visibility');
                                    }
                                    $arguments['visibility'] = $params['visibility'];
                                    unset($params['visibility']);
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Packages::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Packages();
                                    }
                                    $operation = new Operation\Packages\ListPackagesForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages::class], $arguments['package_type'], $arguments['visibility'], $arguments['username'], $arguments['page'], $arguments['per_page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'projects') {
                                if ($call == 'GET /users/{username}/projects') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (array_key_exists('state', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: state');
                                    }
                                    $arguments['state'] = $params['state'];
                                    unset($params['state']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Projects::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Projects::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Projects();
                                    }
                                    $operation = new Operation\Projects\ListForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Projects::class], $arguments['username'], $arguments['state'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'received_events') {
                                if ($call == 'GET /users/{username}/received_events') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\ReceivedEvents::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\ReceivedEvents::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀ReceivedEvents();
                                    }
                                    $operation = new Operation\Activity\ListReceivedEventsForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\ReceivedEvents::class], $arguments['username'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'repos') {
                                if ($call == 'GET /users/{username}/repos') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (array_key_exists('direction', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: direction');
                                    }
                                    $arguments['direction'] = $params['direction'];
                                    unset($params['direction']);
                                    if (array_key_exists('type', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: type');
                                    }
                                    $arguments['type'] = $params['type'];
                                    unset($params['type']);
                                    if (array_key_exists('sort', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: sort');
                                    }
                                    $arguments['sort'] = $params['sort'];
                                    unset($params['sort']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Repos::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Repos::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Repos();
                                    }
                                    $operation = new Operation\Repos\ListForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Repos::class], $arguments['username'], $arguments['direction'], $arguments['type'], $arguments['sort'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'social_accounts') {
                                if ($call == 'GET /users/{username}/social_accounts') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\SocialAccounts::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\SocialAccounts::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀SocialAccounts();
                                    }
                                    $operation = new Operation\Users\ListSocialAccountsForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\SocialAccounts::class], $arguments['username'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'ssh_signing_keys') {
                                if ($call == 'GET /users/{username}/ssh_signing_keys') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\SshSigningKeys::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\SshSigningKeys::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀SshSigningKeys();
                                    }
                                    $operation = new Operation\Users\ListSshSigningKeysForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\SshSigningKeys::class], $arguments['username'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'starred') {
                                if ($call == 'GET /users/{username}/starred') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (array_key_exists('sort', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: sort');
                                    }
                                    $arguments['sort'] = $params['sort'];
                                    unset($params['sort']);
                                    if (array_key_exists('direction', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: direction');
                                    }
                                    $arguments['direction'] = $params['direction'];
                                    unset($params['direction']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Starred::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Starred::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Starred();
                                    }
                                    $operation = new Operation\Activity\ListReposStarredByUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Starred::class], $arguments['username'], $arguments['sort'], $arguments['direction'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Activity\ListReposStarredByUser\Response\Applicationjson\H200 {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'subscriptions') {
                                if ($call == 'GET /users/{username}/subscriptions') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (array_key_exists('per_page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                    }
                                    $arguments['per_page'] = $params['per_page'];
                                    unset($params['per_page']);
                                    if (array_key_exists('page', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                    }
                                    $arguments['page'] = $params['page'];
                                    unset($params['page']);
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Subscriptions::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Subscriptions::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Subscriptions();
                                    }
                                    $operation = new Operation\Activity\ListReposWatchedByUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Subscriptions::class], $arguments['username'], $arguments['per_page'], $arguments['page']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 5) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'app') {
                        if ($pathChunks[2] == 'hook') {
                            if ($pathChunks[3] == 'deliveries') {
                                if ($pathChunks[4] == '{delivery_id}') {
                                    if ($call == 'GET /app/hook/deliveries/{delivery_id}') {
                                        $arguments = array();
                                        if (array_key_exists('delivery_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: delivery_id');
                                        }
                                        $arguments['delivery_id'] = $params['delivery_id'];
                                        unset($params['delivery_id']);
                                        if (\array_key_exists(Hydrator\Operation\App\Hook\Deliveries\CbDeliveryIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\App\Hook\Deliveries\CbDeliveryIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Hook🌀Deliveries🌀CbDeliveryIdRcb();
                                        }
                                        $operation = new Operation\Apps\GetWebhookDelivery($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Hook\Deliveries\CbDeliveryIdRcb::class], $arguments['delivery_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\HookDelivery {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'enterprises') {
                        if ($pathChunks[2] == '{enterprise}') {
                            if ($pathChunks[3] == 'dependabot') {
                                if ($pathChunks[4] == 'alerts') {
                                    if ($call == 'GET /enterprises/{enterprise}/dependabot/alerts') {
                                        $arguments = array();
                                        if (array_key_exists('enterprise', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: enterprise');
                                        }
                                        $arguments['enterprise'] = $params['enterprise'];
                                        unset($params['enterprise']);
                                        if (array_key_exists('state', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: state');
                                        }
                                        $arguments['state'] = $params['state'];
                                        unset($params['state']);
                                        if (array_key_exists('severity', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: severity');
                                        }
                                        $arguments['severity'] = $params['severity'];
                                        unset($params['severity']);
                                        if (array_key_exists('ecosystem', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: ecosystem');
                                        }
                                        $arguments['ecosystem'] = $params['ecosystem'];
                                        unset($params['ecosystem']);
                                        if (array_key_exists('package', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: package');
                                        }
                                        $arguments['package'] = $params['package'];
                                        unset($params['package']);
                                        if (array_key_exists('scope', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: scope');
                                        }
                                        $arguments['scope'] = $params['scope'];
                                        unset($params['scope']);
                                        if (array_key_exists('before', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: before');
                                        }
                                        $arguments['before'] = $params['before'];
                                        unset($params['before']);
                                        if (array_key_exists('after', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: after');
                                        }
                                        $arguments['after'] = $params['after'];
                                        unset($params['after']);
                                        if (array_key_exists('last', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: last');
                                        }
                                        $arguments['last'] = $params['last'];
                                        unset($params['last']);
                                        if (array_key_exists('sort', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: sort');
                                        }
                                        $arguments['sort'] = $params['sort'];
                                        unset($params['sort']);
                                        if (array_key_exists('direction', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: direction');
                                        }
                                        $arguments['direction'] = $params['direction'];
                                        unset($params['direction']);
                                        if (array_key_exists('first', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: first');
                                        }
                                        $arguments['first'] = $params['first'];
                                        unset($params['first']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Dependabot\Alerts::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Dependabot\Alerts::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Dependabot🌀Alerts();
                                        }
                                        $operation = new Operation\Dependabot\ListAlertsForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Dependabot\Alerts::class], $arguments['enterprise'], $arguments['state'], $arguments['severity'], $arguments['ecosystem'], $arguments['package'], $arguments['scope'], $arguments['before'], $arguments['after'], $arguments['last'], $arguments['sort'], $arguments['direction'], $arguments['first'], $arguments['per_page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'secret-scanning') {
                                if ($pathChunks[4] == 'alerts') {
                                    if ($call == 'GET /enterprises/{enterprise}/secret-scanning/alerts') {
                                        $arguments = array();
                                        if (array_key_exists('enterprise', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: enterprise');
                                        }
                                        $arguments['enterprise'] = $params['enterprise'];
                                        unset($params['enterprise']);
                                        if (array_key_exists('state', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: state');
                                        }
                                        $arguments['state'] = $params['state'];
                                        unset($params['state']);
                                        if (array_key_exists('secret_type', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: secret_type');
                                        }
                                        $arguments['secret_type'] = $params['secret_type'];
                                        unset($params['secret_type']);
                                        if (array_key_exists('resolution', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: resolution');
                                        }
                                        $arguments['resolution'] = $params['resolution'];
                                        unset($params['resolution']);
                                        if (array_key_exists('before', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: before');
                                        }
                                        $arguments['before'] = $params['before'];
                                        unset($params['before']);
                                        if (array_key_exists('after', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: after');
                                        }
                                        $arguments['after'] = $params['after'];
                                        unset($params['after']);
                                        if (array_key_exists('sort', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: sort');
                                        }
                                        $arguments['sort'] = $params['sort'];
                                        unset($params['sort']);
                                        if (array_key_exists('direction', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: direction');
                                        }
                                        $arguments['direction'] = $params['direction'];
                                        unset($params['direction']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\SecretScanning\Alerts::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\SecretScanning\Alerts::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀SecretScanning🌀Alerts();
                                        }
                                        $operation = new Operation\SecretScanning\ListAlertsForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\SecretScanning\Alerts::class], $arguments['enterprise'], $arguments['state'], $arguments['secret_type'], $arguments['resolution'], $arguments['before'], $arguments['after'], $arguments['sort'], $arguments['direction'], $arguments['per_page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'gists') {
                        if ($pathChunks[2] == '{gist_id}') {
                            if ($pathChunks[3] == 'comments') {
                                if ($pathChunks[4] == '{comment_id}') {
                                    if ($call == 'GET /gists/{gist_id}/comments/{comment_id}') {
                                        $arguments = array();
                                        if (array_key_exists('gist_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: gist_id');
                                        }
                                        $arguments['gist_id'] = $params['gist_id'];
                                        unset($params['gist_id']);
                                        if (array_key_exists('comment_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                        }
                                        $arguments['comment_id'] = $params['comment_id'];
                                        unset($params['comment_id']);
                                        if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Comments🌀CbCommentIdRcb();
                                        }
                                        $operation = new Operation\Gists\GetComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments\CbCommentIdRcb::class], $arguments['gist_id'], $arguments['comment_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\GistComment {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'marketplace_listing') {
                        if ($pathChunks[2] == 'plans') {
                            if ($pathChunks[3] == '{plan_id}') {
                                if ($pathChunks[4] == 'accounts') {
                                    if ($call == 'GET /marketplace_listing/plans/{plan_id}/accounts') {
                                        $arguments = array();
                                        if (array_key_exists('plan_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: plan_id');
                                        }
                                        $arguments['plan_id'] = $params['plan_id'];
                                        unset($params['plan_id']);
                                        if (array_key_exists('direction', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: direction');
                                        }
                                        $arguments['direction'] = $params['direction'];
                                        unset($params['direction']);
                                        if (array_key_exists('sort', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: sort');
                                        }
                                        $arguments['sort'] = $params['sort'];
                                        unset($params['sort']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\MarketplaceListing\Plans\CbPlanIdRcb\Accounts::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\MarketplaceListing\Plans\CbPlanIdRcb\Accounts::class] = $this->hydrators->getObjectMapperOperation🌀MarketplaceListing🌀Plans🌀CbPlanIdRcb🌀Accounts();
                                        }
                                        $operation = new Operation\Apps\ListAccountsForPlan($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\MarketplaceListing\Plans\CbPlanIdRcb\Accounts::class], $arguments['plan_id'], $arguments['direction'], $arguments['sort'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif ($pathChunks[2] == 'stubbed') {
                            if ($pathChunks[3] == 'accounts') {
                                if ($pathChunks[4] == '{account_id}') {
                                    if ($call == 'GET /marketplace_listing/stubbed/accounts/{account_id}') {
                                        $arguments = array();
                                        if (array_key_exists('account_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: account_id');
                                        }
                                        $arguments['account_id'] = $params['account_id'];
                                        unset($params['account_id']);
                                        if (\array_key_exists(Hydrator\Operation\MarketplaceListing\Stubbed\Accounts\CbAccountIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\MarketplaceListing\Stubbed\Accounts\CbAccountIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀MarketplaceListing🌀Stubbed🌀Accounts🌀CbAccountIdRcb();
                                        }
                                        $operation = new Operation\Apps\GetSubscriptionPlanForAccountStubbed($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\MarketplaceListing\Stubbed\Accounts\CbAccountIdRcb::class], $arguments['account_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\MarketplacePurchase {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'networks') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'events') {
                                    if ($call == 'GET /networks/{owner}/{repo}/events') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Networks\CbOwnerRcb\CbRepoRcb\Events::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Networks\CbOwnerRcb\CbRepoRcb\Events::class] = $this->hydrators->getObjectMapperOperation🌀Networks🌀CbOwnerRcb🌀CbRepoRcb🌀Events();
                                        }
                                        $operation = new Operation\Activity\ListPublicEventsForRepoNetwork($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Networks\CbOwnerRcb\CbRepoRcb\Events::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable|\ApiClients\Client\Github\Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'notifications') {
                        if ($pathChunks[2] == 'threads') {
                            if ($pathChunks[3] == '{thread_id}') {
                                if ($pathChunks[4] == 'subscription') {
                                    if ($call == 'GET /notifications/threads/{thread_id}/subscription') {
                                        $arguments = array();
                                        if (array_key_exists('thread_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: thread_id');
                                        }
                                        $arguments['thread_id'] = $params['thread_id'];
                                        unset($params['thread_id']);
                                        if (\array_key_exists(Hydrator\Operation\Notifications\Threads\CbThreadIdRcb\Subscription::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb\Subscription::class] = $this->hydrators->getObjectMapperOperation🌀Notifications🌀Threads🌀CbThreadIdRcb🌀Subscription();
                                        }
                                        $operation = new Operation\Activity\GetThreadSubscriptionForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb\Subscription::class], $arguments['thread_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ThreadSubscription {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'actions') {
                                if ($pathChunks[4] == 'permissions') {
                                    if ($call == 'GET /orgs/{org}/actions/permissions') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Permissions();
                                        }
                                        $operation = new Operation\Actions\GetGithubActionsPermissionsOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions::class], $arguments['org']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ActionsOrganizationPermissions {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'required_workflows') {
                                    if ($call == 'GET /orgs/{org}/actions/required_workflows') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀RequiredWorkflows();
                                        }
                                        $operation = new Operation\Actions\ListRequiredWorkflows($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows::class], $arguments['org'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListRequiredWorkflows\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'runners') {
                                    if ($call == 'GET /orgs/{org}/actions/runners') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners();
                                        }
                                        $operation = new Operation\Actions\ListSelfHostedRunnersForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners::class], $arguments['org'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListSelfHostedRunnersForOrg\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'secrets') {
                                    if ($call == 'GET /orgs/{org}/actions/secrets') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Secrets();
                                        }
                                        $operation = new Operation\Actions\ListOrgSecrets($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets::class], $arguments['org'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListOrgSecrets\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'variables') {
                                    if ($call == 'GET /orgs/{org}/actions/variables') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Variables();
                                        }
                                        $operation = new Operation\Actions\ListOrgVariables($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables::class], $arguments['org'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListOrgVariables\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'blocks') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'GET /orgs/{org}/blocks/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Blocks\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Blocks\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Blocks🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Orgs\CheckBlockedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Blocks\CbUsernameRcb::class], $arguments['org'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'code-scanning') {
                                if ($pathChunks[4] == 'alerts') {
                                    if ($call == 'GET /orgs/{org}/code-scanning/alerts') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('tool_name', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: tool_name');
                                        }
                                        $arguments['tool_name'] = $params['tool_name'];
                                        unset($params['tool_name']);
                                        if (array_key_exists('tool_guid', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: tool_guid');
                                        }
                                        $arguments['tool_guid'] = $params['tool_guid'];
                                        unset($params['tool_guid']);
                                        if (array_key_exists('before', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: before');
                                        }
                                        $arguments['before'] = $params['before'];
                                        unset($params['before']);
                                        if (array_key_exists('after', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: after');
                                        }
                                        $arguments['after'] = $params['after'];
                                        unset($params['after']);
                                        if (array_key_exists('state', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: state');
                                        }
                                        $arguments['state'] = $params['state'];
                                        unset($params['state']);
                                        if (array_key_exists('severity', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: severity');
                                        }
                                        $arguments['severity'] = $params['severity'];
                                        unset($params['severity']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('direction', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: direction');
                                        }
                                        $arguments['direction'] = $params['direction'];
                                        unset($params['direction']);
                                        if (array_key_exists('sort', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: sort');
                                        }
                                        $arguments['sort'] = $params['sort'];
                                        unset($params['sort']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\CodeScanning\Alerts::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\CodeScanning\Alerts::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀CodeScanning🌀Alerts();
                                        }
                                        $operation = new Operation\CodeScanning\ListAlertsForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\CodeScanning\Alerts::class], $arguments['org'], $arguments['tool_name'], $arguments['tool_guid'], $arguments['before'], $arguments['after'], $arguments['state'], $arguments['severity'], $arguments['page'], $arguments['per_page'], $arguments['direction'], $arguments['sort']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'codespaces') {
                                if ($pathChunks[4] == 'secrets') {
                                    if ($call == 'GET /orgs/{org}/codespaces/secrets') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Secrets();
                                        }
                                        $operation = new Operation\Codespaces\ListOrgSecrets($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets::class], $arguments['org'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Codespaces\ListOrgSecrets\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'dependabot') {
                                if ($pathChunks[4] == 'alerts') {
                                    if ($call == 'GET /orgs/{org}/dependabot/alerts') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('state', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: state');
                                        }
                                        $arguments['state'] = $params['state'];
                                        unset($params['state']);
                                        if (array_key_exists('severity', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: severity');
                                        }
                                        $arguments['severity'] = $params['severity'];
                                        unset($params['severity']);
                                        if (array_key_exists('ecosystem', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: ecosystem');
                                        }
                                        $arguments['ecosystem'] = $params['ecosystem'];
                                        unset($params['ecosystem']);
                                        if (array_key_exists('package', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: package');
                                        }
                                        $arguments['package'] = $params['package'];
                                        unset($params['package']);
                                        if (array_key_exists('scope', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: scope');
                                        }
                                        $arguments['scope'] = $params['scope'];
                                        unset($params['scope']);
                                        if (array_key_exists('before', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: before');
                                        }
                                        $arguments['before'] = $params['before'];
                                        unset($params['before']);
                                        if (array_key_exists('after', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: after');
                                        }
                                        $arguments['after'] = $params['after'];
                                        unset($params['after']);
                                        if (array_key_exists('last', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: last');
                                        }
                                        $arguments['last'] = $params['last'];
                                        unset($params['last']);
                                        if (array_key_exists('sort', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: sort');
                                        }
                                        $arguments['sort'] = $params['sort'];
                                        unset($params['sort']);
                                        if (array_key_exists('direction', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: direction');
                                        }
                                        $arguments['direction'] = $params['direction'];
                                        unset($params['direction']);
                                        if (array_key_exists('first', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: first');
                                        }
                                        $arguments['first'] = $params['first'];
                                        unset($params['first']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Alerts::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Alerts::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Dependabot🌀Alerts();
                                        }
                                        $operation = new Operation\Dependabot\ListAlertsForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Alerts::class], $arguments['org'], $arguments['state'], $arguments['severity'], $arguments['ecosystem'], $arguments['package'], $arguments['scope'], $arguments['before'], $arguments['after'], $arguments['last'], $arguments['sort'], $arguments['direction'], $arguments['first'], $arguments['per_page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'secrets') {
                                    if ($call == 'GET /orgs/{org}/dependabot/secrets') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Dependabot🌀Secrets();
                                        }
                                        $operation = new Operation\Dependabot\ListOrgSecrets($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets::class], $arguments['org'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Dependabot\ListOrgSecrets\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'docker') {
                                if ($pathChunks[4] == 'conflicts') {
                                    if ($call == 'GET /orgs/{org}/docker/conflicts') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Docker\Conflicts::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Docker\Conflicts::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Docker🌀Conflicts();
                                        }
                                        $operation = new Operation\Packages\ListDockerMigrationConflictingPackagesForOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Docker\Conflicts::class], $arguments['org']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'hooks') {
                                if ($pathChunks[4] == '{hook_id}') {
                                    if ($call == 'GET /orgs/{org}/hooks/{hook_id}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('hook_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: hook_id');
                                        }
                                        $arguments['hook_id'] = $params['hook_id'];
                                        unset($params['hook_id']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks🌀CbHookIdRcb();
                                        }
                                        $operation = new Operation\Orgs\GetWebhook($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb::class], $arguments['org'], $arguments['hook_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\OrgHook {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'members') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'GET /orgs/{org}/members/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        $operation = new Operation\Orgs\CheckMembershipForUser($arguments['org'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \array {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'memberships') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'GET /orgs/{org}/memberships/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Memberships\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Memberships\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Memberships🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Orgs\GetMembershipForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Memberships\CbUsernameRcb::class], $arguments['org'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\OrgMembership {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'migrations') {
                                if ($pathChunks[4] == '{migration_id}') {
                                    if ($call == 'GET /orgs/{org}/migrations/{migration_id}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('migration_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: migration_id');
                                        }
                                        $arguments['migration_id'] = $params['migration_id'];
                                        unset($params['migration_id']);
                                        if (array_key_exists('exclude', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: exclude');
                                        }
                                        $arguments['exclude'] = $params['exclude'];
                                        unset($params['exclude']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Migrations🌀CbMigrationIdRcb();
                                        }
                                        $operation = new Operation\Migrations\GetStatusForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb::class], $arguments['org'], $arguments['migration_id'], $arguments['exclude']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Migration {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'public_members') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'GET /orgs/{org}/public_members/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        $operation = new Operation\Orgs\CheckPublicMembershipForUser($arguments['org'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'secret-scanning') {
                                if ($pathChunks[4] == 'alerts') {
                                    if ($call == 'GET /orgs/{org}/secret-scanning/alerts') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('state', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: state');
                                        }
                                        $arguments['state'] = $params['state'];
                                        unset($params['state']);
                                        if (array_key_exists('secret_type', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: secret_type');
                                        }
                                        $arguments['secret_type'] = $params['secret_type'];
                                        unset($params['secret_type']);
                                        if (array_key_exists('resolution', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: resolution');
                                        }
                                        $arguments['resolution'] = $params['resolution'];
                                        unset($params['resolution']);
                                        if (array_key_exists('before', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: before');
                                        }
                                        $arguments['before'] = $params['before'];
                                        unset($params['before']);
                                        if (array_key_exists('after', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: after');
                                        }
                                        $arguments['after'] = $params['after'];
                                        unset($params['after']);
                                        if (array_key_exists('sort', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: sort');
                                        }
                                        $arguments['sort'] = $params['sort'];
                                        unset($params['sort']);
                                        if (array_key_exists('direction', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: direction');
                                        }
                                        $arguments['direction'] = $params['direction'];
                                        unset($params['direction']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\SecretScanning\Alerts::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\SecretScanning\Alerts::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀SecretScanning🌀Alerts();
                                        }
                                        $operation = new Operation\SecretScanning\ListAlertsForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\SecretScanning\Alerts::class], $arguments['org'], $arguments['state'], $arguments['secret_type'], $arguments['resolution'], $arguments['before'], $arguments['after'], $arguments['sort'], $arguments['direction'], $arguments['page'], $arguments['per_page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'teams') {
                                if ($pathChunks[4] == '{team_slug}') {
                                    if ($call == 'GET /orgs/{org}/teams/{team_slug}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('team_slug', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                        }
                                        $arguments['team_slug'] = $params['team_slug'];
                                        unset($params['team_slug']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb();
                                        }
                                        $operation = new Operation\Teams\GetByName($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb::class], $arguments['org'], $arguments['team_slug']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamFull {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'projects') {
                        if ($pathChunks[2] == 'columns') {
                            if ($pathChunks[3] == 'cards') {
                                if ($pathChunks[4] == '{card_id}') {
                                    if ($call == 'GET /projects/columns/cards/{card_id}') {
                                        $arguments = array();
                                        if (array_key_exists('card_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: card_id');
                                        }
                                        $arguments['card_id'] = $params['card_id'];
                                        unset($params['card_id']);
                                        if (\array_key_exists(Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀Cards🌀CbCardIdRcb();
                                        }
                                        $operation = new Operation\Projects\GetCard($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb::class], $arguments['card_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ProjectCard {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == '{column_id}') {
                                if ($pathChunks[4] == 'cards') {
                                    if ($call == 'GET /projects/columns/{column_id}/cards') {
                                        $arguments = array();
                                        if (array_key_exists('column_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: column_id');
                                        }
                                        $arguments['column_id'] = $params['column_id'];
                                        unset($params['column_id']);
                                        if (array_key_exists('archived_state', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: archived_state');
                                        }
                                        $arguments['archived_state'] = $params['archived_state'];
                                        unset($params['archived_state']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Projects\Columns\CbColumnIdRcb\Cards::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb\Cards::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀CbColumnIdRcb🌀Cards();
                                        }
                                        $operation = new Operation\Projects\ListCards($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb\Cards::class], $arguments['column_id'], $arguments['archived_state'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'assignees') {
                                    if ($call == 'GET /repos/{owner}/{repo}/assignees') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Assignees::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Assignees::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Assignees();
                                        }
                                        $operation = new Operation\Issues\ListAssignees($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Assignees::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'autolinks') {
                                    if ($call == 'GET /repos/{owner}/{repo}/autolinks') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Autolinks();
                                        }
                                        $operation = new Operation\Repos\ListAutolinks($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks::class], $arguments['owner'], $arguments['repo'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'branches') {
                                    if ($call == 'GET /repos/{owner}/{repo}/branches') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('protected', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: protected');
                                        }
                                        $arguments['protected'] = $params['protected'];
                                        unset($params['protected']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches();
                                        }
                                        $operation = new Operation\Repos\ListBranches($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches::class], $arguments['owner'], $arguments['repo'], $arguments['protected'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'codespaces') {
                                    if ($call == 'GET /repos/{owner}/{repo}/codespaces') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codespaces();
                                        }
                                        $operation = new Operation\Codespaces\ListInRepositoryForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Codespaces\ListInRepositoryForAuthenticatedUser\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'collaborators') {
                                    if ($call == 'GET /repos/{owner}/{repo}/collaborators') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('permission', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: permission');
                                        }
                                        $arguments['permission'] = $params['permission'];
                                        unset($params['permission']);
                                        if (array_key_exists('affiliation', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: affiliation');
                                        }
                                        $arguments['affiliation'] = $params['affiliation'];
                                        unset($params['affiliation']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Collaborators::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Collaborators::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Collaborators();
                                        }
                                        $operation = new Operation\Repos\ListCollaborators($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Collaborators::class], $arguments['owner'], $arguments['repo'], $arguments['permission'], $arguments['affiliation'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'comments') {
                                    if ($call == 'GET /repos/{owner}/{repo}/comments') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Comments();
                                        }
                                        $operation = new Operation\Repos\ListCommitCommentsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'commits') {
                                    if ($call == 'GET /repos/{owner}/{repo}/commits') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('sha', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: sha');
                                        }
                                        $arguments['sha'] = $params['sha'];
                                        unset($params['sha']);
                                        if (array_key_exists('path', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: path');
                                        }
                                        $arguments['path'] = $params['path'];
                                        unset($params['path']);
                                        if (array_key_exists('author', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: author');
                                        }
                                        $arguments['author'] = $params['author'];
                                        unset($params['author']);
                                        if (array_key_exists('committer', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: committer');
                                        }
                                        $arguments['committer'] = $params['committer'];
                                        unset($params['committer']);
                                        if (array_key_exists('since', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: since');
                                        }
                                        $arguments['since'] = $params['since'];
                                        unset($params['since']);
                                        if (array_key_exists('until', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: until');
                                        }
                                        $arguments['until'] = $params['until'];
                                        unset($params['until']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits();
                                        }
                                        $operation = new Operation\Repos\ListCommits($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits::class], $arguments['owner'], $arguments['repo'], $arguments['sha'], $arguments['path'], $arguments['author'], $arguments['committer'], $arguments['since'], $arguments['until'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'contributors') {
                                    if ($call == 'GET /repos/{owner}/{repo}/contributors') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('anon', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: anon');
                                        }
                                        $arguments['anon'] = $params['anon'];
                                        unset($params['anon']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contributors::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contributors::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Contributors();
                                        }
                                        $operation = new Operation\Repos\ListContributors($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contributors::class], $arguments['owner'], $arguments['repo'], $arguments['anon'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'deployments') {
                                    if ($call == 'GET /repos/{owner}/{repo}/deployments') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('sha', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: sha');
                                        }
                                        $arguments['sha'] = $params['sha'];
                                        unset($params['sha']);
                                        if (array_key_exists('ref', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: ref');
                                        }
                                        $arguments['ref'] = $params['ref'];
                                        unset($params['ref']);
                                        if (array_key_exists('task', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: task');
                                        }
                                        $arguments['task'] = $params['task'];
                                        unset($params['task']);
                                        if (array_key_exists('environment', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: environment');
                                        }
                                        $arguments['environment'] = $params['environment'];
                                        unset($params['environment']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Deployments();
                                        }
                                        $operation = new Operation\Repos\ListDeployments($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments::class], $arguments['owner'], $arguments['repo'], $arguments['sha'], $arguments['ref'], $arguments['task'], $arguments['environment'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'environments') {
                                    if ($call == 'GET /repos/{owner}/{repo}/environments') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Environments();
                                        }
                                        $operation = new Operation\Repos\GetAllEnvironments($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Repos\GetAllEnvironments\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'events') {
                                    if ($call == 'GET /repos/{owner}/{repo}/events') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Events::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Events::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Events();
                                        }
                                        $operation = new Operation\Activity\ListRepoEvents($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Events::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'forks') {
                                    if ($call == 'GET /repos/{owner}/{repo}/forks') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('sort', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: sort');
                                        }
                                        $arguments['sort'] = $params['sort'];
                                        unset($params['sort']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Forks::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Forks::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Forks();
                                        }
                                        $operation = new Operation\Repos\ListForks($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Forks::class], $arguments['owner'], $arguments['repo'], $arguments['sort'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'hooks') {
                                    if ($call == 'GET /repos/{owner}/{repo}/hooks') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks();
                                        }
                                        $operation = new Operation\Repos\ListWebhooks($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'import') {
                                    if ($call == 'GET /repos/{owner}/{repo}/import') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Import();
                                        }
                                        $operation = new Operation\Migrations\GetImportStatus($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Import {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'installation') {
                                    if ($call == 'GET /repos/{owner}/{repo}/installation') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Installation::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Installation::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Installation();
                                        }
                                        $operation = new Operation\Apps\GetRepoInstallation($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Installation::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Installation|\ApiClients\Client\Github\Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'interaction-limits') {
                                    if ($call == 'GET /repos/{owner}/{repo}/interaction-limits') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\InteractionLimits::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\InteractionLimits::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀InteractionLimits();
                                        }
                                        $operation = new Operation\Interactions\GetRestrictionsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\InteractionLimits::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Interactions\GetRestrictionsForRepo\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'invitations') {
                                    if ($call == 'GET /repos/{owner}/{repo}/invitations') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Invitations::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Invitations::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Invitations();
                                        }
                                        $operation = new Operation\Repos\ListInvitations($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Invitations::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'issues') {
                                    if ($call == 'GET /repos/{owner}/{repo}/issues') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('milestone', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: milestone');
                                        }
                                        $arguments['milestone'] = $params['milestone'];
                                        unset($params['milestone']);
                                        if (array_key_exists('assignee', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: assignee');
                                        }
                                        $arguments['assignee'] = $params['assignee'];
                                        unset($params['assignee']);
                                        if (array_key_exists('creator', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: creator');
                                        }
                                        $arguments['creator'] = $params['creator'];
                                        unset($params['creator']);
                                        if (array_key_exists('mentioned', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: mentioned');
                                        }
                                        $arguments['mentioned'] = $params['mentioned'];
                                        unset($params['mentioned']);
                                        if (array_key_exists('labels', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: labels');
                                        }
                                        $arguments['labels'] = $params['labels'];
                                        unset($params['labels']);
                                        if (array_key_exists('since', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: since');
                                        }
                                        $arguments['since'] = $params['since'];
                                        unset($params['since']);
                                        if (array_key_exists('state', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: state');
                                        }
                                        $arguments['state'] = $params['state'];
                                        unset($params['state']);
                                        if (array_key_exists('sort', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: sort');
                                        }
                                        $arguments['sort'] = $params['sort'];
                                        unset($params['sort']);
                                        if (array_key_exists('direction', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: direction');
                                        }
                                        $arguments['direction'] = $params['direction'];
                                        unset($params['direction']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues();
                                        }
                                        $operation = new Operation\Issues\ListForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues::class], $arguments['owner'], $arguments['repo'], $arguments['milestone'], $arguments['assignee'], $arguments['creator'], $arguments['mentioned'], $arguments['labels'], $arguments['since'], $arguments['state'], $arguments['sort'], $arguments['direction'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable|\ApiClients\Client\Github\Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'keys') {
                                    if ($call == 'GET /repos/{owner}/{repo}/keys') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Keys::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Keys::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Keys();
                                        }
                                        $operation = new Operation\Repos\ListDeployKeys($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Keys::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'labels') {
                                    if ($call == 'GET /repos/{owner}/{repo}/labels') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Labels();
                                        }
                                        $operation = new Operation\Issues\ListLabelsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'languages') {
                                    if ($call == 'GET /repos/{owner}/{repo}/languages') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Languages::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Languages::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Languages();
                                        }
                                        $operation = new Operation\Repos\ListLanguages($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Languages::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Language {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'license') {
                                    if ($call == 'GET /repos/{owner}/{repo}/license') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\License::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\License::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀License();
                                        }
                                        $operation = new Operation\Licenses\GetForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\License::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\LicenseContent {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'milestones') {
                                    if ($call == 'GET /repos/{owner}/{repo}/milestones') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('state', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: state');
                                        }
                                        $arguments['state'] = $params['state'];
                                        unset($params['state']);
                                        if (array_key_exists('sort', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: sort');
                                        }
                                        $arguments['sort'] = $params['sort'];
                                        unset($params['sort']);
                                        if (array_key_exists('direction', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: direction');
                                        }
                                        $arguments['direction'] = $params['direction'];
                                        unset($params['direction']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Milestones();
                                        }
                                        $operation = new Operation\Issues\ListMilestones($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones::class], $arguments['owner'], $arguments['repo'], $arguments['state'], $arguments['sort'], $arguments['direction'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'notifications') {
                                    if ($call == 'GET /repos/{owner}/{repo}/notifications') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('since', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: since');
                                        }
                                        $arguments['since'] = $params['since'];
                                        unset($params['since']);
                                        if (array_key_exists('before', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: before');
                                        }
                                        $arguments['before'] = $params['before'];
                                        unset($params['before']);
                                        if (array_key_exists('all', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: all');
                                        }
                                        $arguments['all'] = $params['all'];
                                        unset($params['all']);
                                        if (array_key_exists('participating', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: participating');
                                        }
                                        $arguments['participating'] = $params['participating'];
                                        unset($params['participating']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Notifications::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Notifications::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Notifications();
                                        }
                                        $operation = new Operation\Activity\ListRepoNotificationsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Notifications::class], $arguments['owner'], $arguments['repo'], $arguments['since'], $arguments['before'], $arguments['all'], $arguments['participating'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'pages') {
                                    if ($call == 'GET /repos/{owner}/{repo}/pages') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages();
                                        }
                                        $operation = new Operation\Repos\GetPages($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Page {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'projects') {
                                    if ($call == 'GET /repos/{owner}/{repo}/projects') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('state', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: state');
                                        }
                                        $arguments['state'] = $params['state'];
                                        unset($params['state']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Projects::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Projects::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Projects();
                                        }
                                        $operation = new Operation\Projects\ListForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Projects::class], $arguments['owner'], $arguments['repo'], $arguments['state'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'pulls') {
                                    if ($call == 'GET /repos/{owner}/{repo}/pulls') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('head', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: head');
                                        }
                                        $arguments['head'] = $params['head'];
                                        unset($params['head']);
                                        if (array_key_exists('base', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: base');
                                        }
                                        $arguments['base'] = $params['base'];
                                        unset($params['base']);
                                        if (array_key_exists('direction', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: direction');
                                        }
                                        $arguments['direction'] = $params['direction'];
                                        unset($params['direction']);
                                        if (array_key_exists('state', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: state');
                                        }
                                        $arguments['state'] = $params['state'];
                                        unset($params['state']);
                                        if (array_key_exists('sort', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: sort');
                                        }
                                        $arguments['sort'] = $params['sort'];
                                        unset($params['sort']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls();
                                        }
                                        $operation = new Operation\Pulls\List_($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls::class], $arguments['owner'], $arguments['repo'], $arguments['head'], $arguments['base'], $arguments['direction'], $arguments['state'], $arguments['sort'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'readme') {
                                    if ($call == 'GET /repos/{owner}/{repo}/readme') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('ref', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: ref');
                                        }
                                        $arguments['ref'] = $params['ref'];
                                        unset($params['ref']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Readme::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Readme::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Readme();
                                        }
                                        $operation = new Operation\Repos\GetReadme($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Readme::class], $arguments['owner'], $arguments['repo'], $arguments['ref']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ContentFile {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'releases') {
                                    if ($call == 'GET /repos/{owner}/{repo}/releases') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases();
                                        }
                                        $operation = new Operation\Repos\ListReleases($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'security-advisories') {
                                    if ($call == 'GET /repos/{owner}/{repo}/security-advisories') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('before', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: before');
                                        }
                                        $arguments['before'] = $params['before'];
                                        unset($params['before']);
                                        if (array_key_exists('after', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: after');
                                        }
                                        $arguments['after'] = $params['after'];
                                        unset($params['after']);
                                        if (array_key_exists('state', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: state');
                                        }
                                        $arguments['state'] = $params['state'];
                                        unset($params['state']);
                                        if (array_key_exists('direction', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: direction');
                                        }
                                        $arguments['direction'] = $params['direction'];
                                        unset($params['direction']);
                                        if (array_key_exists('sort', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: sort');
                                        }
                                        $arguments['sort'] = $params['sort'];
                                        unset($params['sort']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecurityAdvisories::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecurityAdvisories::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀SecurityAdvisories();
                                        }
                                        $operation = new Operation\SecurityAdvisories\ListRepositoryAdvisories($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecurityAdvisories::class], $arguments['owner'], $arguments['repo'], $arguments['before'], $arguments['after'], $arguments['state'], $arguments['direction'], $arguments['sort'], $arguments['per_page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'stargazers') {
                                    if ($call == 'GET /repos/{owner}/{repo}/stargazers') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stargazers::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stargazers::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Stargazers();
                                        }
                                        $operation = new Operation\Activity\ListStargazersForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stargazers::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Activity\ListStargazersForRepo\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'subscribers') {
                                    if ($call == 'GET /repos/{owner}/{repo}/subscribers') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Subscribers::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Subscribers::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Subscribers();
                                        }
                                        $operation = new Operation\Activity\ListWatchersForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Subscribers::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'subscription') {
                                    if ($call == 'GET /repos/{owner}/{repo}/subscription') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Subscription::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Subscription::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Subscription();
                                        }
                                        $operation = new Operation\Activity\GetRepoSubscription($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Subscription::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\RepositorySubscription {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'tags') {
                                    if ($call == 'GET /repos/{owner}/{repo}/tags') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Tags();
                                        }
                                        $operation = new Operation\Repos\ListTags($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'teams') {
                                    if ($call == 'GET /repos/{owner}/{repo}/teams') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Teams::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Teams();
                                        }
                                        $operation = new Operation\Repos\ListTeams($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Teams::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'topics') {
                                    if ($call == 'GET /repos/{owner}/{repo}/topics') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Topics::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Topics::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Topics();
                                        }
                                        $operation = new Operation\Repos\GetAllTopics($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Topics::class], $arguments['owner'], $arguments['repo'], $arguments['page'], $arguments['per_page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Topic {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'vulnerability-alerts') {
                                    if ($call == 'GET /repos/{owner}/{repo}/vulnerability-alerts') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        $operation = new Operation\Repos\CheckVulnerabilityAlerts($arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'teams') {
                        if ($pathChunks[2] == '{team_id}') {
                            if ($pathChunks[3] == 'discussions') {
                                if ($pathChunks[4] == '{discussion_number}') {
                                    if ($call == 'GET /teams/{team_id}/discussions/{discussion_number}') {
                                        $arguments = array();
                                        if (array_key_exists('team_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                        }
                                        $arguments['team_id'] = $params['team_id'];
                                        unset($params['team_id']);
                                        if (array_key_exists('discussion_number', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                        }
                                        $arguments['discussion_number'] = $params['discussion_number'];
                                        unset($params['discussion_number']);
                                        if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb();
                                        }
                                        $operation = new Operation\Teams\GetDiscussionLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb::class], $arguments['team_id'], $arguments['discussion_number']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamDiscussion {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'members') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'GET /teams/{team_id}/members/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('team_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                        }
                                        $arguments['team_id'] = $params['team_id'];
                                        unset($params['team_id']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        $operation = new Operation\Teams\GetMemberLegacy($arguments['team_id'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'memberships') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'GET /teams/{team_id}/memberships/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('team_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                        }
                                        $arguments['team_id'] = $params['team_id'];
                                        unset($params['team_id']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Memberships\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Memberships\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Memberships🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Teams\GetMembershipForUserLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Memberships\CbUsernameRcb::class], $arguments['team_id'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamMembership {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'projects') {
                                if ($pathChunks[4] == '{project_id}') {
                                    if ($call == 'GET /teams/{team_id}/projects/{project_id}') {
                                        $arguments = array();
                                        if (array_key_exists('team_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                        }
                                        $arguments['team_id'] = $params['team_id'];
                                        unset($params['team_id']);
                                        if (array_key_exists('project_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: project_id');
                                        }
                                        $arguments['project_id'] = $params['project_id'];
                                        unset($params['project_id']);
                                        if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Projects\CbProjectIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Projects\CbProjectIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Projects🌀CbProjectIdRcb();
                                        }
                                        $operation = new Operation\Teams\CheckPermissionsForProjectLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Projects\CbProjectIdRcb::class], $arguments['team_id'], $arguments['project_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamProject {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'codespaces') {
                            if ($pathChunks[3] == 'secrets') {
                                if ($pathChunks[4] == 'public-key') {
                                    if ($call == 'GET /user/codespaces/secrets/public-key') {
                                        $arguments = array();
                                        if (\array_key_exists(Hydrator\Operation\User\Codespaces\Secrets\PublicKey::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\PublicKey::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀Secrets🌀PublicKey();
                                        }
                                        $operation = new Operation\Codespaces\GetPublicKeyForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\PublicKey::class]);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CodespacesUserPublicKey {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == '{secret_name}') {
                                    if ($call == 'GET /user/codespaces/secrets/{secret_name}') {
                                        $arguments = array();
                                        if (array_key_exists('secret_name', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                        }
                                        $arguments['secret_name'] = $params['secret_name'];
                                        unset($params['secret_name']);
                                        if (\array_key_exists(Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀Secrets🌀CbSecretNameRcb();
                                        }
                                        $operation = new Operation\Codespaces\GetSecretForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb::class], $arguments['secret_name']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CodespacesSecret {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == '{codespace_name}') {
                                if ($pathChunks[4] == 'machines') {
                                    if ($call == 'GET /user/codespaces/{codespace_name}/machines') {
                                        $arguments = array();
                                        if (array_key_exists('codespace_name', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: codespace_name');
                                        }
                                        $arguments['codespace_name'] = $params['codespace_name'];
                                        unset($params['codespace_name']);
                                        if (\array_key_exists(Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Machines::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Machines::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀CbCodespaceNameRcb🌀Machines();
                                        }
                                        $operation = new Operation\Codespaces\CodespaceMachinesForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Machines::class], $arguments['codespace_name']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Codespaces\CodespaceMachinesForAuthenticatedUser\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif ($pathChunks[2] == 'installations') {
                            if ($pathChunks[3] == '{installation_id}') {
                                if ($pathChunks[4] == 'repositories') {
                                    if ($call == 'GET /user/installations/{installation_id}/repositories') {
                                        $arguments = array();
                                        if (array_key_exists('installation_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: installation_id');
                                        }
                                        $arguments['installation_id'] = $params['installation_id'];
                                        unset($params['installation_id']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\User\Installations\CbInstallationIdRcb\Repositories::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Installations\CbInstallationIdRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Installations🌀CbInstallationIdRcb🌀Repositories();
                                        }
                                        $operation = new Operation\Apps\ListInstallationReposForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Installations\CbInstallationIdRcb\Repositories::class], $arguments['installation_id'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Apps\ListInstallationReposForAuthenticatedUser\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif ($pathChunks[2] == 'memberships') {
                            if ($pathChunks[3] == 'orgs') {
                                if ($pathChunks[4] == '{org}') {
                                    if ($call == 'GET /user/memberships/orgs/{org}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (\array_key_exists(Hydrator\Operation\User\Memberships\Orgs\CbOrgRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Memberships\Orgs\CbOrgRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Memberships🌀Orgs🌀CbOrgRcb();
                                        }
                                        $operation = new Operation\Orgs\GetMembershipForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Memberships\Orgs\CbOrgRcb::class], $arguments['org']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\OrgMembership {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif ($pathChunks[2] == 'migrations') {
                            if ($pathChunks[3] == '{migration_id}') {
                                if ($pathChunks[4] == 'archive') {
                                    if ($call == 'GET /user/migrations/{migration_id}/archive') {
                                        $arguments = array();
                                        if (array_key_exists('migration_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: migration_id');
                                        }
                                        $arguments['migration_id'] = $params['migration_id'];
                                        unset($params['migration_id']);
                                        if (\array_key_exists(Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Archive::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Archive::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Migrations🌀CbMigrationIdRcb🌀Archive();
                                        }
                                        $operation = new Operation\Migrations\GetArchiveForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Archive::class], $arguments['migration_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'repositories') {
                                    if ($call == 'GET /user/migrations/{migration_id}/repositories') {
                                        $arguments = array();
                                        if (array_key_exists('migration_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: migration_id');
                                        }
                                        $arguments['migration_id'] = $params['migration_id'];
                                        unset($params['migration_id']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Repositories::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Migrations🌀CbMigrationIdRcb🌀Repositories();
                                        }
                                        $operation = new Operation\Migrations\ListReposForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Repositories::class], $arguments['migration_id'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif ($pathChunks[2] == 'packages') {
                            if ($pathChunks[3] == '{package_type}') {
                                if ($pathChunks[4] == '{package_name}') {
                                    if ($call == 'GET /user/packages/{package_type}/{package_name}') {
                                        $arguments = array();
                                        if (array_key_exists('package_type', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                        }
                                        $arguments['package_type'] = $params['package_type'];
                                        unset($params['package_type']);
                                        if (array_key_exists('package_name', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                        }
                                        $arguments['package_name'] = $params['package_name'];
                                        unset($params['package_name']);
                                        if (\array_key_exists(Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb();
                                        }
                                        $operation = new Operation\Packages\GetPackageForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb::class], $arguments['package_type'], $arguments['package_name']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Package {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif ($pathChunks[2] == 'starred') {
                            if ($pathChunks[3] == '{owner}') {
                                if ($pathChunks[4] == '{repo}') {
                                    if ($call == 'GET /user/starred/{owner}/{repo}') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\User\Starred\CbOwnerRcb\CbRepoRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Starred\CbOwnerRcb\CbRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Starred🌀CbOwnerRcb🌀CbRepoRcb();
                                        }
                                        $operation = new Operation\Activity\CheckRepoIsStarredByAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Starred\CbOwnerRcb\CbRepoRcb::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'users') {
                        if ($pathChunks[2] == '{username}') {
                            if ($pathChunks[3] == 'docker') {
                                if ($pathChunks[4] == 'conflicts') {
                                    if ($call == 'GET /users/{username}/docker/conflicts') {
                                        $arguments = array();
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Docker\Conflicts::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Docker\Conflicts::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Docker🌀Conflicts();
                                        }
                                        $operation = new Operation\Packages\ListDockerMigrationConflictingPackagesForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Docker\Conflicts::class], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'events') {
                                if ($pathChunks[4] == 'public') {
                                    if ($call == 'GET /users/{username}/events/public') {
                                        $arguments = array();
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Events\Public_::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Events\Public_::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Events🌀Public_();
                                        }
                                        $operation = new Operation\Activity\ListPublicEventsForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Events\Public_::class], $arguments['username'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'following') {
                                if ($pathChunks[4] == '{target_user}') {
                                    if ($call == 'GET /users/{username}/following/{target_user}') {
                                        $arguments = array();
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        if (array_key_exists('target_user', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: target_user');
                                        }
                                        $arguments['target_user'] = $params['target_user'];
                                        unset($params['target_user']);
                                        $operation = new Operation\Users\CheckFollowingForUser($arguments['username'], $arguments['target_user']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'received_events') {
                                if ($pathChunks[4] == 'public') {
                                    if ($call == 'GET /users/{username}/received_events/public') {
                                        $arguments = array();
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        if (array_key_exists('per_page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                        }
                                        $arguments['per_page'] = $params['per_page'];
                                        unset($params['per_page']);
                                        if (array_key_exists('page', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                        }
                                        $arguments['page'] = $params['page'];
                                        unset($params['page']);
                                        if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\ReceivedEvents\Public_::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\ReceivedEvents\Public_::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀ReceivedEvents🌀Public_();
                                        }
                                        $operation = new Operation\Activity\ListReceivedPublicEventsForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\ReceivedEvents\Public_::class], $arguments['username'], $arguments['per_page'], $arguments['page']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 3) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'app') {
                        if ($pathChunks[2] == 'installation-requests') {
                            if ($call == 'GET /app/installation-requests') {
                                $arguments = array();
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\App\InstallationRequests::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\App\InstallationRequests::class] = $this->hydrators->getObjectMapperOperation🌀App🌀InstallationRequests();
                                }
                                $operation = new Operation\Apps\ListInstallationRequestsForAuthenticatedApp($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\InstallationRequests::class], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'installations') {
                            if ($call == 'GET /app/installations') {
                                $arguments = array();
                                if (array_key_exists('since', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: since');
                                }
                                $arguments['since'] = $params['since'];
                                unset($params['since']);
                                if (array_key_exists('outdated', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: outdated');
                                }
                                $arguments['outdated'] = $params['outdated'];
                                unset($params['outdated']);
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\App\Installations::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\App\Installations::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Installations();
                                }
                                $operation = new Operation\Apps\ListInstallations($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Installations::class], $arguments['since'], $arguments['outdated'], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'apps') {
                        if ($pathChunks[2] == '{app_slug}') {
                            if ($call == 'GET /apps/{app_slug}') {
                                $arguments = array();
                                if (array_key_exists('app_slug', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: app_slug');
                                }
                                $arguments['app_slug'] = $params['app_slug'];
                                unset($params['app_slug']);
                                if (\array_key_exists(Hydrator\Operation\Apps\CbAppSlugRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Apps\CbAppSlugRcb::class] = $this->hydrators->getObjectMapperOperation🌀Apps🌀CbAppSlugRcb();
                                }
                                $operation = new Operation\Apps\GetBySlug($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Apps\CbAppSlugRcb::class], $arguments['app_slug']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Integration {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'codes_of_conduct') {
                        if ($pathChunks[2] == '{key}') {
                            if ($call == 'GET /codes_of_conduct/{key}') {
                                $arguments = array();
                                if (array_key_exists('key', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: key');
                                }
                                $arguments['key'] = $params['key'];
                                unset($params['key']);
                                if (\array_key_exists(Hydrator\Operation\CodesOfConduct\CbKeyRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\CodesOfConduct\CbKeyRcb::class] = $this->hydrators->getObjectMapperOperation🌀CodesOfConduct🌀CbKeyRcb();
                                }
                                $operation = new Operation\CodesOfConduct\GetConductCode($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\CodesOfConduct\CbKeyRcb::class], $arguments['key']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CodeOfConduct {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'gists') {
                        if ($pathChunks[2] == 'public') {
                            if ($call == 'GET /gists/public') {
                                $arguments = array();
                                if (array_key_exists('since', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: since');
                                }
                                $arguments['since'] = $params['since'];
                                unset($params['since']);
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\Gists\Public_::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Gists\Public_::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀Public_();
                                }
                                $operation = new Operation\Gists\ListPublic($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\Public_::class], $arguments['since'], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'starred') {
                            if ($call == 'GET /gists/starred') {
                                $arguments = array();
                                if (array_key_exists('since', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: since');
                                }
                                $arguments['since'] = $params['since'];
                                unset($params['since']);
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\Gists\Starred::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Gists\Starred::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀Starred();
                                }
                                $operation = new Operation\Gists\ListStarred($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\Starred::class], $arguments['since'], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == '{gist_id}') {
                            if ($call == 'GET /gists/{gist_id}') {
                                $arguments = array();
                                if (array_key_exists('gist_id', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: gist_id');
                                }
                                $arguments['gist_id'] = $params['gist_id'];
                                unset($params['gist_id']);
                                if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb();
                                }
                                $operation = new Operation\Gists\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb::class], $arguments['gist_id']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\GistSimple {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'gitignore') {
                        if ($pathChunks[2] == 'templates') {
                            if ($call == 'GET /gitignore/templates') {
                                $arguments = array();
                                if (\array_key_exists(Hydrator\Operation\Gitignore\Templates::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Gitignore\Templates::class] = $this->hydrators->getObjectMapperOperation🌀Gitignore🌀Templates();
                                }
                                $operation = new Operation\Gitignore\GetAllTemplates($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gitignore\Templates::class]);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'installation') {
                        if ($pathChunks[2] == 'repositories') {
                            if ($call == 'GET /installation/repositories') {
                                $arguments = array();
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\Installation\Repositories::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Installation\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Installation🌀Repositories();
                                }
                                $operation = new Operation\Apps\ListReposAccessibleToInstallation($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Installation\Repositories::class], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Apps\ListReposAccessibleToInstallation\Response\Applicationjson\H200 {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'licenses') {
                        if ($pathChunks[2] == '{license}') {
                            if ($call == 'GET /licenses/{license}') {
                                $arguments = array();
                                if (array_key_exists('license', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: license');
                                }
                                $arguments['license'] = $params['license'];
                                unset($params['license']);
                                if (\array_key_exists(Hydrator\Operation\Licenses\CbLicenseRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Licenses\CbLicenseRcb::class] = $this->hydrators->getObjectMapperOperation🌀Licenses🌀CbLicenseRcb();
                                }
                                $operation = new Operation\Licenses\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Licenses\CbLicenseRcb::class], $arguments['license']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\License {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'marketplace_listing') {
                        if ($pathChunks[2] == 'plans') {
                            if ($call == 'GET /marketplace_listing/plans') {
                                $arguments = array();
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\MarketplaceListing\Plans::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\MarketplaceListing\Plans::class] = $this->hydrators->getObjectMapperOperation🌀MarketplaceListing🌀Plans();
                                }
                                $operation = new Operation\Apps\ListPlans($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\MarketplaceListing\Plans::class], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($call == 'GET /orgs/{org}') {
                                $arguments = array();
                                if (array_key_exists('org', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                }
                                $arguments['org'] = $params['org'];
                                unset($params['org']);
                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb();
                                }
                                $operation = new Operation\Orgs\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb::class], $arguments['org']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\OrganizationFull {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'projects') {
                        if ($pathChunks[2] == '{project_id}') {
                            if ($call == 'GET /projects/{project_id}') {
                                $arguments = array();
                                if (array_key_exists('project_id', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: project_id');
                                }
                                $arguments['project_id'] = $params['project_id'];
                                unset($params['project_id']);
                                if (\array_key_exists(Hydrator\Operation\Projects\CbProjectIdRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀CbProjectIdRcb();
                                }
                                $operation = new Operation\Projects\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb::class], $arguments['project_id']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Project {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'search') {
                        if ($pathChunks[2] == 'code') {
                            if ($call == 'GET /search/code') {
                                $arguments = array();
                                if (array_key_exists('q', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: q');
                                }
                                $arguments['q'] = $params['q'];
                                unset($params['q']);
                                if (array_key_exists('sort', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: sort');
                                }
                                $arguments['sort'] = $params['sort'];
                                unset($params['sort']);
                                if (array_key_exists('order', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: order');
                                }
                                $arguments['order'] = $params['order'];
                                unset($params['order']);
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\Search\Code::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Search\Code::class] = $this->hydrators->getObjectMapperOperation🌀Search🌀Code();
                                }
                                $operation = new Operation\Search\Code($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Search\Code::class], $arguments['q'], $arguments['sort'], $arguments['order'], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Search\Code\Response\Applicationjson\H200 {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'commits') {
                            if ($call == 'GET /search/commits') {
                                $arguments = array();
                                if (array_key_exists('q', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: q');
                                }
                                $arguments['q'] = $params['q'];
                                unset($params['q']);
                                if (array_key_exists('sort', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: sort');
                                }
                                $arguments['sort'] = $params['sort'];
                                unset($params['sort']);
                                if (array_key_exists('order', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: order');
                                }
                                $arguments['order'] = $params['order'];
                                unset($params['order']);
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\Search\Commits::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Search\Commits::class] = $this->hydrators->getObjectMapperOperation🌀Search🌀Commits();
                                }
                                $operation = new Operation\Search\Commits($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Search\Commits::class], $arguments['q'], $arguments['sort'], $arguments['order'], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Search\Commits\Response\Applicationjson\H200 {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'issues') {
                            if ($call == 'GET /search/issues') {
                                $arguments = array();
                                if (array_key_exists('q', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: q');
                                }
                                $arguments['q'] = $params['q'];
                                unset($params['q']);
                                if (array_key_exists('sort', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: sort');
                                }
                                $arguments['sort'] = $params['sort'];
                                unset($params['sort']);
                                if (array_key_exists('order', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: order');
                                }
                                $arguments['order'] = $params['order'];
                                unset($params['order']);
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\Search\Issues::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Search\Issues::class] = $this->hydrators->getObjectMapperOperation🌀Search🌀Issues();
                                }
                                $operation = new Operation\Search\IssuesAndPullRequests($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Search\Issues::class], $arguments['q'], $arguments['sort'], $arguments['order'], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Search\IssuesAndPullRequests\Response\Applicationjson\H200 {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'labels') {
                            if ($call == 'GET /search/labels') {
                                $arguments = array();
                                if (array_key_exists('repository_id', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                }
                                $arguments['repository_id'] = $params['repository_id'];
                                unset($params['repository_id']);
                                if (array_key_exists('q', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: q');
                                }
                                $arguments['q'] = $params['q'];
                                unset($params['q']);
                                if (array_key_exists('sort', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: sort');
                                }
                                $arguments['sort'] = $params['sort'];
                                unset($params['sort']);
                                if (array_key_exists('order', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: order');
                                }
                                $arguments['order'] = $params['order'];
                                unset($params['order']);
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\Search\Labels::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Search\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Search🌀Labels();
                                }
                                $operation = new Operation\Search\Labels($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Search\Labels::class], $arguments['repository_id'], $arguments['q'], $arguments['sort'], $arguments['order'], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Search\Labels\Response\Applicationjson\H200 {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'repositories') {
                            if ($call == 'GET /search/repositories') {
                                $arguments = array();
                                if (array_key_exists('q', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: q');
                                }
                                $arguments['q'] = $params['q'];
                                unset($params['q']);
                                if (array_key_exists('sort', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: sort');
                                }
                                $arguments['sort'] = $params['sort'];
                                unset($params['sort']);
                                if (array_key_exists('order', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: order');
                                }
                                $arguments['order'] = $params['order'];
                                unset($params['order']);
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\Search\Repositories::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Search\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Search🌀Repositories();
                                }
                                $operation = new Operation\Search\Repos($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Search\Repositories::class], $arguments['q'], $arguments['sort'], $arguments['order'], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Search\Repos\Response\Applicationjson\H200 {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'topics') {
                            if ($call == 'GET /search/topics') {
                                $arguments = array();
                                if (array_key_exists('q', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: q');
                                }
                                $arguments['q'] = $params['q'];
                                unset($params['q']);
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\Search\Topics::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Search\Topics::class] = $this->hydrators->getObjectMapperOperation🌀Search🌀Topics();
                                }
                                $operation = new Operation\Search\Topics($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Search\Topics::class], $arguments['q'], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Search\Topics\Response\Applicationjson\H200 {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'users') {
                            if ($call == 'GET /search/users') {
                                $arguments = array();
                                if (array_key_exists('q', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: q');
                                }
                                $arguments['q'] = $params['q'];
                                unset($params['q']);
                                if (array_key_exists('sort', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: sort');
                                }
                                $arguments['sort'] = $params['sort'];
                                unset($params['sort']);
                                if (array_key_exists('order', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: order');
                                }
                                $arguments['order'] = $params['order'];
                                unset($params['order']);
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\Search\Users::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Search\Users::class] = $this->hydrators->getObjectMapperOperation🌀Search🌀Users();
                                }
                                $operation = new Operation\Search\Users($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Search\Users::class], $arguments['q'], $arguments['sort'], $arguments['order'], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Search\Users\Response\Applicationjson\H200 {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'teams') {
                        if ($pathChunks[2] == '{team_id}') {
                            if ($call == 'GET /teams/{team_id}') {
                                $arguments = array();
                                if (array_key_exists('team_id', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                }
                                $arguments['team_id'] = $params['team_id'];
                                unset($params['team_id']);
                                if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb();
                                }
                                $operation = new Operation\Teams\GetLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb::class], $arguments['team_id']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamFull {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'blocks') {
                            if ($call == 'GET /user/blocks') {
                                $arguments = array();
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\Blocks::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Blocks::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Blocks();
                                }
                                $operation = new Operation\Users\ListBlockedByAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Blocks::class], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'codespaces') {
                            if ($call == 'GET /user/codespaces') {
                                $arguments = array();
                                if (array_key_exists('repository_id', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                }
                                $arguments['repository_id'] = $params['repository_id'];
                                unset($params['repository_id']);
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\Codespaces::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Codespaces::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces();
                                }
                                $operation = new Operation\Codespaces\ListForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces::class], $arguments['repository_id'], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Codespaces\ListForAuthenticatedUser\Response\Applicationjson\H200 {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'emails') {
                            if ($call == 'GET /user/emails') {
                                $arguments = array();
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\Emails::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Emails::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Emails();
                                }
                                $operation = new Operation\Users\ListEmailsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Emails::class], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'followers') {
                            if ($call == 'GET /user/followers') {
                                $arguments = array();
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\Followers::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Followers::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Followers();
                                }
                                $operation = new Operation\Users\ListFollowersForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Followers::class], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'following') {
                            if ($call == 'GET /user/following') {
                                $arguments = array();
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\Following::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Following::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Following();
                                }
                                $operation = new Operation\Users\ListFollowedByAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Following::class], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'gpg_keys') {
                            if ($call == 'GET /user/gpg_keys') {
                                $arguments = array();
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\GpgKeys::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\GpgKeys::class] = $this->hydrators->getObjectMapperOperation🌀User🌀GpgKeys();
                                }
                                $operation = new Operation\Users\ListGpgKeysForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\GpgKeys::class], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'installations') {
                            if ($call == 'GET /user/installations') {
                                $arguments = array();
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\Installations::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Installations::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Installations();
                                }
                                $operation = new Operation\Apps\ListInstallationsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Installations::class], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Apps\ListInstallationsForAuthenticatedUser\Response\Applicationjson\H200 {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'interaction-limits') {
                            if ($call == 'GET /user/interaction-limits') {
                                $arguments = array();
                                if (\array_key_exists(Hydrator\Operation\User\InteractionLimits::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\InteractionLimits::class] = $this->hydrators->getObjectMapperOperation🌀User🌀InteractionLimits();
                                }
                                $operation = new Operation\Interactions\GetRestrictionsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\InteractionLimits::class]);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Interactions\GetRestrictionsForAuthenticatedUser\Response\Applicationjson\H200 {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'issues') {
                            if ($call == 'GET /user/issues') {
                                $arguments = array();
                                if (array_key_exists('labels', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: labels');
                                }
                                $arguments['labels'] = $params['labels'];
                                unset($params['labels']);
                                if (array_key_exists('since', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: since');
                                }
                                $arguments['since'] = $params['since'];
                                unset($params['since']);
                                if (array_key_exists('filter', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: filter');
                                }
                                $arguments['filter'] = $params['filter'];
                                unset($params['filter']);
                                if (array_key_exists('state', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: state');
                                }
                                $arguments['state'] = $params['state'];
                                unset($params['state']);
                                if (array_key_exists('sort', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: sort');
                                }
                                $arguments['sort'] = $params['sort'];
                                unset($params['sort']);
                                if (array_key_exists('direction', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: direction');
                                }
                                $arguments['direction'] = $params['direction'];
                                unset($params['direction']);
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\Issues::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Issues::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Issues();
                                }
                                $operation = new Operation\Issues\ListForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Issues::class], $arguments['labels'], $arguments['since'], $arguments['filter'], $arguments['state'], $arguments['sort'], $arguments['direction'], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'keys') {
                            if ($call == 'GET /user/keys') {
                                $arguments = array();
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\Keys::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Keys::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Keys();
                                }
                                $operation = new Operation\Users\ListPublicSshKeysForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Keys::class], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'marketplace_purchases') {
                            if ($call == 'GET /user/marketplace_purchases') {
                                $arguments = array();
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\MarketplacePurchases::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\MarketplacePurchases::class] = $this->hydrators->getObjectMapperOperation🌀User🌀MarketplacePurchases();
                                }
                                $operation = new Operation\Apps\ListSubscriptionsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\MarketplacePurchases::class], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'migrations') {
                            if ($call == 'GET /user/migrations') {
                                $arguments = array();
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\Migrations::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Migrations::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Migrations();
                                }
                                $operation = new Operation\Migrations\ListForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Migrations::class], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'orgs') {
                            if ($call == 'GET /user/orgs') {
                                $arguments = array();
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\Orgs::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Orgs::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Orgs();
                                }
                                $operation = new Operation\Orgs\ListForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Orgs::class], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'packages') {
                            if ($call == 'GET /user/packages') {
                                $arguments = array();
                                if (array_key_exists('package_type', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                }
                                $arguments['package_type'] = $params['package_type'];
                                unset($params['package_type']);
                                if (array_key_exists('visibility', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: visibility');
                                }
                                $arguments['visibility'] = $params['visibility'];
                                unset($params['visibility']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (\array_key_exists(Hydrator\Operation\User\Packages::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Packages::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Packages();
                                }
                                $operation = new Operation\Packages\ListPackagesForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Packages::class], $arguments['package_type'], $arguments['visibility'], $arguments['page'], $arguments['per_page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'public_emails') {
                            if ($call == 'GET /user/public_emails') {
                                $arguments = array();
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\PublicEmails::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\PublicEmails::class] = $this->hydrators->getObjectMapperOperation🌀User🌀PublicEmails();
                                }
                                $operation = new Operation\Users\ListPublicEmailsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\PublicEmails::class], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'repos') {
                            if ($call == 'GET /user/repos') {
                                $arguments = array();
                                if (array_key_exists('direction', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: direction');
                                }
                                $arguments['direction'] = $params['direction'];
                                unset($params['direction']);
                                if (array_key_exists('since', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: since');
                                }
                                $arguments['since'] = $params['since'];
                                unset($params['since']);
                                if (array_key_exists('before', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: before');
                                }
                                $arguments['before'] = $params['before'];
                                unset($params['before']);
                                if (array_key_exists('visibility', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: visibility');
                                }
                                $arguments['visibility'] = $params['visibility'];
                                unset($params['visibility']);
                                if (array_key_exists('affiliation', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: affiliation');
                                }
                                $arguments['affiliation'] = $params['affiliation'];
                                unset($params['affiliation']);
                                if (array_key_exists('type', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: type');
                                }
                                $arguments['type'] = $params['type'];
                                unset($params['type']);
                                if (array_key_exists('sort', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: sort');
                                }
                                $arguments['sort'] = $params['sort'];
                                unset($params['sort']);
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\Repos::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Repos::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Repos();
                                }
                                $operation = new Operation\Repos\ListForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Repos::class], $arguments['direction'], $arguments['since'], $arguments['before'], $arguments['visibility'], $arguments['affiliation'], $arguments['type'], $arguments['sort'], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'repository_invitations') {
                            if ($call == 'GET /user/repository_invitations') {
                                $arguments = array();
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\RepositoryInvitations::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\RepositoryInvitations::class] = $this->hydrators->getObjectMapperOperation🌀User🌀RepositoryInvitations();
                                }
                                $operation = new Operation\Repos\ListInvitationsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\RepositoryInvitations::class], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'social_accounts') {
                            if ($call == 'GET /user/social_accounts') {
                                $arguments = array();
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\SocialAccounts::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\SocialAccounts::class] = $this->hydrators->getObjectMapperOperation🌀User🌀SocialAccounts();
                                }
                                $operation = new Operation\Users\ListSocialAccountsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\SocialAccounts::class], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'ssh_signing_keys') {
                            if ($call == 'GET /user/ssh_signing_keys') {
                                $arguments = array();
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\SshSigningKeys::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\SshSigningKeys::class] = $this->hydrators->getObjectMapperOperation🌀User🌀SshSigningKeys();
                                }
                                $operation = new Operation\Users\ListSshSigningKeysForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\SshSigningKeys::class], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'starred') {
                            if ($call == 'GET /user/starred') {
                                $arguments = array();
                                if (array_key_exists('sort', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: sort');
                                }
                                $arguments['sort'] = $params['sort'];
                                unset($params['sort']);
                                if (array_key_exists('direction', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: direction');
                                }
                                $arguments['direction'] = $params['direction'];
                                unset($params['direction']);
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\Starred::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Starred::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Starred();
                                }
                                $operation = new Operation\Activity\ListReposStarredByAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Starred::class], $arguments['sort'], $arguments['direction'], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'subscriptions') {
                            if ($call == 'GET /user/subscriptions') {
                                $arguments = array();
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\Subscriptions::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Subscriptions::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Subscriptions();
                                }
                                $operation = new Operation\Activity\ListWatchedReposForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Subscriptions::class], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'teams') {
                            if ($call == 'GET /user/teams') {
                                $arguments = array();
                                if (array_key_exists('per_page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                }
                                $arguments['per_page'] = $params['per_page'];
                                unset($params['per_page']);
                                if (array_key_exists('page', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                }
                                $arguments['page'] = $params['page'];
                                unset($params['page']);
                                if (\array_key_exists(Hydrator\Operation\User\Teams::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Teams::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Teams();
                                }
                                $operation = new Operation\Teams\ListForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Teams::class], $arguments['per_page'], $arguments['page']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'users') {
                        if ($pathChunks[2] == '{username}') {
                            if ($call == 'GET /users/{username}') {
                                $arguments = array();
                                if (array_key_exists('username', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: username');
                                }
                                $arguments['username'] = $params['username'];
                                unset($params['username']);
                                if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb();
                                }
                                $operation = new Operation\Users\GetByUsername($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb::class], $arguments['username']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Users\GetByUsername\Response\Applicationjson\H200 {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 6) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'marketplace_listing') {
                        if ($pathChunks[2] == 'stubbed') {
                            if ($pathChunks[3] == 'plans') {
                                if ($pathChunks[4] == '{plan_id}') {
                                    if ($pathChunks[5] == 'accounts') {
                                        if ($call == 'GET /marketplace_listing/stubbed/plans/{plan_id}/accounts') {
                                            $arguments = array();
                                            if (array_key_exists('plan_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: plan_id');
                                            }
                                            $arguments['plan_id'] = $params['plan_id'];
                                            unset($params['plan_id']);
                                            if (array_key_exists('direction', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: direction');
                                            }
                                            $arguments['direction'] = $params['direction'];
                                            unset($params['direction']);
                                            if (array_key_exists('sort', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: sort');
                                            }
                                            $arguments['sort'] = $params['sort'];
                                            unset($params['sort']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\MarketplaceListing\Stubbed\Plans\CbPlanIdRcb\Accounts::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\MarketplaceListing\Stubbed\Plans\CbPlanIdRcb\Accounts::class] = $this->hydrators->getObjectMapperOperation🌀MarketplaceListing🌀Stubbed🌀Plans🌀CbPlanIdRcb🌀Accounts();
                                            }
                                            $operation = new Operation\Apps\ListAccountsForPlanStubbed($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\MarketplaceListing\Stubbed\Plans\CbPlanIdRcb\Accounts::class], $arguments['plan_id'], $arguments['direction'], $arguments['sort'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'organizations') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'personal-access-token-requests') {
                                if ($pathChunks[4] == '{pat_request_id}') {
                                    if ($pathChunks[5] == 'repositories') {
                                        if ($call == 'GET /organizations/{org}/personal-access-token-requests/{pat_request_id}/repositories') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('pat_request_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: pat_request_id');
                                            }
                                            $arguments['pat_request_id'] = $params['pat_request_id'];
                                            unset($params['pat_request_id']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Organizations\CbOrgRcb\PersonalDashAccessDashTokenDashRequests\CbPatRequestIdRcb\Repositories::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Organizations\CbOrgRcb\PersonalDashAccessDashTokenDashRequests\CbPatRequestIdRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Organizations🌀CbOrgRcb🌀PersonalDashAccessDashTokenDashRequests🌀CbPatRequestIdRcb🌀Repositories();
                                            }
                                            $operation = new Operation\Orgs\ListPatGrantRequestRepositories($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Organizations\CbOrgRcb\PersonalDashAccessDashTokenDashRequests\CbPatRequestIdRcb\Repositories::class], $arguments['org'], $arguments['pat_request_id'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'personal-access-tokens') {
                                if ($pathChunks[4] == '{pat_id}') {
                                    if ($pathChunks[5] == 'repositories') {
                                        if ($call == 'GET /organizations/{org}/personal-access-tokens/{pat_id}/repositories') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('pat_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: pat_id');
                                            }
                                            $arguments['pat_id'] = $params['pat_id'];
                                            unset($params['pat_id']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Organizations\CbOrgRcb\PersonalDashAccessDashTokens\CbPatIdRcb\Repositories::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Organizations\CbOrgRcb\PersonalDashAccessDashTokens\CbPatIdRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Organizations🌀CbOrgRcb🌀PersonalDashAccessDashTokens🌀CbPatIdRcb🌀Repositories();
                                            }
                                            $operation = new Operation\Orgs\ListPatGrantRepositories($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Organizations\CbOrgRcb\PersonalDashAccessDashTokens\CbPatIdRcb\Repositories::class], $arguments['org'], $arguments['pat_id'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'actions') {
                                if ($pathChunks[4] == 'cache') {
                                    if ($pathChunks[5] == 'usage') {
                                        if ($call == 'GET /orgs/{org}/actions/cache/usage') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Cache\Usage::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Cache\Usage::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Cache🌀Usage();
                                            }
                                            $operation = new Operation\Actions\GetActionsCacheUsageForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Cache\Usage::class], $arguments['org']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ActionsCacheUsageOrgEnterprise {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'usage-by-repository') {
                                        if ($call == 'GET /orgs/{org}/actions/cache/usage-by-repository') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Cache\UsageByRepository::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Cache\UsageByRepository::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Cache🌀UsageByRepository();
                                            }
                                            $operation = new Operation\Actions\GetActionsCacheUsageByRepoForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Cache\UsageByRepository::class], $arguments['org'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\GetActionsCacheUsageByRepoForOrg\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'permissions') {
                                    if ($pathChunks[5] == 'repositories') {
                                        if ($call == 'GET /orgs/{org}/actions/permissions/repositories') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions\Repositories::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Permissions🌀Repositories();
                                            }
                                            $operation = new Operation\Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions\Repositories::class], $arguments['org'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'selected-actions') {
                                        if ($call == 'GET /orgs/{org}/actions/permissions/selected-actions') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions\SelectedActions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions\SelectedActions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Permissions🌀SelectedActions();
                                            }
                                            $operation = new Operation\Actions\GetAllowedActionsOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions\SelectedActions::class], $arguments['org']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\SelectedActions {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'workflow') {
                                        if ($call == 'GET /orgs/{org}/actions/permissions/workflow') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions\Workflow::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions\Workflow::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Permissions🌀Workflow();
                                            }
                                            $operation = new Operation\Actions\GetGithubActionsDefaultWorkflowPermissionsOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions\Workflow::class], $arguments['org']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ActionsGetDefaultWorkflowPermissions {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'required_workflows') {
                                    if ($pathChunks[5] == '{required_workflow_id}') {
                                        if ($call == 'GET /orgs/{org}/actions/required_workflows/{required_workflow_id}') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('required_workflow_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: required_workflow_id');
                                            }
                                            $arguments['required_workflow_id'] = $params['required_workflow_id'];
                                            unset($params['required_workflow_id']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀RequiredWorkflows🌀CbRequiredWorkflowIdRcb();
                                            }
                                            $operation = new Operation\Actions\GetRequiredWorkflow($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdRcb::class], $arguments['org'], $arguments['required_workflow_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\RequiredWorkflow {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'runners') {
                                    if ($pathChunks[5] == 'downloads') {
                                        if ($call == 'GET /orgs/{org}/actions/runners/downloads') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\Downloads::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\Downloads::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners🌀Downloads();
                                            }
                                            $operation = new Operation\Actions\ListRunnerApplicationsForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\Downloads::class], $arguments['org']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == '{runner_id}') {
                                        if ($call == 'GET /orgs/{org}/actions/runners/{runner_id}') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('runner_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: runner_id');
                                            }
                                            $arguments['runner_id'] = $params['runner_id'];
                                            unset($params['runner_id']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners🌀CbRunnerIdRcb();
                                            }
                                            $operation = new Operation\Actions\GetSelfHostedRunnerForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb::class], $arguments['org'], $arguments['runner_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Runner {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == 'public-key') {
                                        if ($call == 'GET /orgs/{org}/actions/secrets/public-key') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\PublicKey::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\PublicKey::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Secrets🌀PublicKey();
                                            }
                                            $operation = new Operation\Actions\GetOrgPublicKey($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\PublicKey::class], $arguments['org']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ActionsPublicKey {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == '{secret_name}') {
                                        if ($call == 'GET /orgs/{org}/actions/secrets/{secret_name}') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('secret_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                            }
                                            $arguments['secret_name'] = $params['secret_name'];
                                            unset($params['secret_name']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Secrets🌀CbSecretNameRcb();
                                            }
                                            $operation = new Operation\Actions\GetOrgSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\CbSecretNameRcb::class], $arguments['org'], $arguments['secret_name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\OrganizationActionsSecret {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'variables') {
                                    if ($pathChunks[5] == '{name}') {
                                        if ($call == 'GET /orgs/{org}/actions/variables/{name}') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: name');
                                            }
                                            $arguments['name'] = $params['name'];
                                            unset($params['name']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables\CbNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables\CbNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Variables🌀CbNameRcb();
                                            }
                                            $operation = new Operation\Actions\GetOrgVariable($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables\CbNameRcb::class], $arguments['org'], $arguments['name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\OrganizationActionsVariable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'codespaces') {
                                if ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == 'public-key') {
                                        if ($call == 'GET /orgs/{org}/codespaces/secrets/public-key') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\PublicKey::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\PublicKey::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Secrets🌀PublicKey();
                                            }
                                            $operation = new Operation\Codespaces\GetOrgPublicKey($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\PublicKey::class], $arguments['org']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CodespacesPublicKey {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == '{secret_name}') {
                                        if ($call == 'GET /orgs/{org}/codespaces/secrets/{secret_name}') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('secret_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                            }
                                            $arguments['secret_name'] = $params['secret_name'];
                                            unset($params['secret_name']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Secrets🌀CbSecretNameRcb();
                                            }
                                            $operation = new Operation\Codespaces\GetOrgSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb::class], $arguments['org'], $arguments['secret_name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CodespacesOrgSecret {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'dependabot') {
                                if ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == 'public-key') {
                                        if ($call == 'GET /orgs/{org}/dependabot/secrets/public-key') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\PublicKey::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\PublicKey::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Dependabot🌀Secrets🌀PublicKey();
                                            }
                                            $operation = new Operation\Dependabot\GetOrgPublicKey($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\PublicKey::class], $arguments['org']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\DependabotPublicKey {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == '{secret_name}') {
                                        if ($call == 'GET /orgs/{org}/dependabot/secrets/{secret_name}') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('secret_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                            }
                                            $arguments['secret_name'] = $params['secret_name'];
                                            unset($params['secret_name']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Dependabot🌀Secrets🌀CbSecretNameRcb();
                                            }
                                            $operation = new Operation\Dependabot\GetOrgSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\CbSecretNameRcb::class], $arguments['org'], $arguments['secret_name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\OrganizationDependabotSecret {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'hooks') {
                                if ($pathChunks[4] == '{hook_id}') {
                                    if ($pathChunks[5] == 'config') {
                                        if ($call == 'GET /orgs/{org}/hooks/{hook_id}/config') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('hook_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: hook_id');
                                            }
                                            $arguments['hook_id'] = $params['hook_id'];
                                            unset($params['hook_id']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Config::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Config::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks🌀CbHookIdRcb🌀Config();
                                            }
                                            $operation = new Operation\Orgs\GetWebhookConfigForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Config::class], $arguments['org'], $arguments['hook_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\WebhookConfig {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'deliveries') {
                                        if ($call == 'GET /orgs/{org}/hooks/{hook_id}/deliveries') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('hook_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: hook_id');
                                            }
                                            $arguments['hook_id'] = $params['hook_id'];
                                            unset($params['hook_id']);
                                            if (array_key_exists('cursor', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: cursor');
                                            }
                                            $arguments['cursor'] = $params['cursor'];
                                            unset($params['cursor']);
                                            if (array_key_exists('redelivery', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: redelivery');
                                            }
                                            $arguments['redelivery'] = $params['redelivery'];
                                            unset($params['redelivery']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Deliveries::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Deliveries::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks🌀CbHookIdRcb🌀Deliveries();
                                            }
                                            $operation = new Operation\Orgs\ListWebhookDeliveries($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Deliveries::class], $arguments['org'], $arguments['hook_id'], $arguments['cursor'], $arguments['redelivery'], $arguments['per_page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'invitations') {
                                if ($pathChunks[4] == '{invitation_id}') {
                                    if ($pathChunks[5] == 'teams') {
                                        if ($call == 'GET /orgs/{org}/invitations/{invitation_id}/teams') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('invitation_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: invitation_id');
                                            }
                                            $arguments['invitation_id'] = $params['invitation_id'];
                                            unset($params['invitation_id']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Invitations\CbInvitationIdRcb\Teams::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Invitations\CbInvitationIdRcb\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Invitations🌀CbInvitationIdRcb🌀Teams();
                                            }
                                            $operation = new Operation\Orgs\ListInvitationTeams($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Invitations\CbInvitationIdRcb\Teams::class], $arguments['org'], $arguments['invitation_id'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'members') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($pathChunks[5] == 'codespaces') {
                                        if ($call == 'GET /orgs/{org}/members/{username}/codespaces') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('username', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: username');
                                            }
                                            $arguments['username'] = $params['username'];
                                            unset($params['username']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb\Codespaces::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb\Codespaces::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Members🌀CbUsernameRcb🌀Codespaces();
                                            }
                                            $operation = new Operation\Codespaces\GetCodespacesForUserInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb\Codespaces::class], $arguments['org'], $arguments['username'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Codespaces\GetCodespacesForUserInOrg\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'migrations') {
                                if ($pathChunks[4] == '{migration_id}') {
                                    if ($pathChunks[5] == 'archive') {
                                        if ($call == 'GET /orgs/{org}/migrations/{migration_id}/archive') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('migration_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: migration_id');
                                            }
                                            $arguments['migration_id'] = $params['migration_id'];
                                            unset($params['migration_id']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Archive::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Archive::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Migrations🌀CbMigrationIdRcb🌀Archive();
                                            }
                                            $operation = new Operation\Migrations\DownloadArchiveForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Archive::class], $arguments['org'], $arguments['migration_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'repositories') {
                                        if ($call == 'GET /orgs/{org}/migrations/{migration_id}/repositories') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('migration_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: migration_id');
                                            }
                                            $arguments['migration_id'] = $params['migration_id'];
                                            unset($params['migration_id']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Repositories::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Migrations🌀CbMigrationIdRcb🌀Repositories();
                                            }
                                            $operation = new Operation\Migrations\ListReposForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Repositories::class], $arguments['org'], $arguments['migration_id'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'packages') {
                                if ($pathChunks[4] == '{package_type}') {
                                    if ($pathChunks[5] == '{package_name}') {
                                        if ($call == 'GET /orgs/{org}/packages/{package_type}/{package_name}') {
                                            $arguments = array();
                                            if (array_key_exists('package_type', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                            }
                                            $arguments['package_type'] = $params['package_type'];
                                            unset($params['package_type']);
                                            if (array_key_exists('package_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                            }
                                            $arguments['package_name'] = $params['package_name'];
                                            unset($params['package_name']);
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb();
                                            }
                                            $operation = new Operation\Packages\GetPackageForOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class], $arguments['package_type'], $arguments['package_name'], $arguments['org']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Package {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'settings') {
                                if ($pathChunks[4] == 'billing') {
                                    if ($pathChunks[5] == 'actions') {
                                        if ($call == 'GET /orgs/{org}/settings/billing/actions') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\Actions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\Actions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Settings🌀Billing🌀Actions();
                                            }
                                            $operation = new Operation\Billing\GetGithubActionsBillingOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\Actions::class], $arguments['org']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ActionsBillingUsage {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'packages') {
                                        if ($call == 'GET /orgs/{org}/settings/billing/packages') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\Packages::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\Packages::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Settings🌀Billing🌀Packages();
                                            }
                                            $operation = new Operation\Billing\GetGithubPackagesBillingOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\Packages::class], $arguments['org']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PackagesBillingUsage {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'shared-storage') {
                                        if ($call == 'GET /orgs/{org}/settings/billing/shared-storage') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\SharedStorage::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\SharedStorage::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Settings🌀Billing🌀SharedStorage();
                                            }
                                            $operation = new Operation\Billing\GetSharedStorageBillingOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\SharedStorage::class], $arguments['org']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CombinedBillingUsage {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'teams') {
                                if ($pathChunks[4] == '{team_slug}') {
                                    if ($pathChunks[5] == 'discussions') {
                                        if ($call == 'GET /orgs/{org}/teams/{team_slug}/discussions') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('team_slug', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                            }
                                            $arguments['team_slug'] = $params['team_slug'];
                                            unset($params['team_slug']);
                                            if (array_key_exists('pinned', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: pinned');
                                            }
                                            $arguments['pinned'] = $params['pinned'];
                                            unset($params['pinned']);
                                            if (array_key_exists('direction', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: direction');
                                            }
                                            $arguments['direction'] = $params['direction'];
                                            unset($params['direction']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions();
                                            }
                                            $operation = new Operation\Teams\ListDiscussionsInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions::class], $arguments['org'], $arguments['team_slug'], $arguments['pinned'], $arguments['direction'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'invitations') {
                                        if ($call == 'GET /orgs/{org}/teams/{team_slug}/invitations') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('team_slug', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                            }
                                            $arguments['team_slug'] = $params['team_slug'];
                                            unset($params['team_slug']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Invitations::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Invitations::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Invitations();
                                            }
                                            $operation = new Operation\Teams\ListPendingInvitationsInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Invitations::class], $arguments['org'], $arguments['team_slug'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'members') {
                                        if ($call == 'GET /orgs/{org}/teams/{team_slug}/members') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('team_slug', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                            }
                                            $arguments['team_slug'] = $params['team_slug'];
                                            unset($params['team_slug']);
                                            if (array_key_exists('role', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: role');
                                            }
                                            $arguments['role'] = $params['role'];
                                            unset($params['role']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Members::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Members::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Members();
                                            }
                                            $operation = new Operation\Teams\ListMembersInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Members::class], $arguments['org'], $arguments['team_slug'], $arguments['role'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'projects') {
                                        if ($call == 'GET /orgs/{org}/teams/{team_slug}/projects') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('team_slug', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                            }
                                            $arguments['team_slug'] = $params['team_slug'];
                                            unset($params['team_slug']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Projects::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Projects::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Projects();
                                            }
                                            $operation = new Operation\Teams\ListProjectsInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Projects::class], $arguments['org'], $arguments['team_slug'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'repos') {
                                        if ($call == 'GET /orgs/{org}/teams/{team_slug}/repos') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('team_slug', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                            }
                                            $arguments['team_slug'] = $params['team_slug'];
                                            unset($params['team_slug']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Repos::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Repos::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Repos();
                                            }
                                            $operation = new Operation\Teams\ListReposInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Repos::class], $arguments['org'], $arguments['team_slug'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'teams') {
                                        if ($call == 'GET /orgs/{org}/teams/{team_slug}/teams') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('team_slug', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                            }
                                            $arguments['team_slug'] = $params['team_slug'];
                                            unset($params['team_slug']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Teams::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Teams();
                                            }
                                            $operation = new Operation\Teams\ListChildInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Teams::class], $arguments['org'], $arguments['team_slug'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'projects') {
                        if ($pathChunks[2] == '{project_id}') {
                            if ($pathChunks[3] == 'collaborators') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($pathChunks[5] == 'permission') {
                                        if ($call == 'GET /projects/{project_id}/collaborators/{username}/permission') {
                                            $arguments = array();
                                            if (array_key_exists('project_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: project_id');
                                            }
                                            $arguments['project_id'] = $params['project_id'];
                                            unset($params['project_id']);
                                            if (array_key_exists('username', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: username');
                                            }
                                            $arguments['username'] = $params['username'];
                                            unset($params['username']);
                                            if (\array_key_exists(Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators\CbUsernameRcb\Permission::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators\CbUsernameRcb\Permission::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀CbProjectIdRcb🌀Collaborators🌀CbUsernameRcb🌀Permission();
                                            }
                                            $operation = new Operation\Projects\GetPermissionForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators\CbUsernameRcb\Permission::class], $arguments['project_id'], $arguments['username']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ProjectCollaboratorPermission {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'required_workflows') {
                                        if ($call == 'GET /repos/{org}/{repo}/actions/required_workflows') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOrgRcb\CbRepoRcb\Actions\RequiredWorkflows::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOrgRcb\CbRepoRcb\Actions\RequiredWorkflows::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOrgRcb🌀CbRepoRcb🌀Actions🌀RequiredWorkflows();
                                            }
                                            $operation = new Operation\Actions\ListRepoRequiredWorkflows($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOrgRcb\CbRepoRcb\Actions\RequiredWorkflows::class], $arguments['org'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListRepoRequiredWorkflows\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        } elseif ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'artifacts') {
                                        if ($call == 'GET /repos/{owner}/{repo}/actions/artifacts') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: name');
                                            }
                                            $arguments['name'] = $params['name'];
                                            unset($params['name']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Artifacts();
                                            }
                                            $operation = new Operation\Actions\ListArtifactsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts::class], $arguments['owner'], $arguments['repo'], $arguments['name'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListArtifactsForRepo\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'caches') {
                                        if ($call == 'GET /repos/{owner}/{repo}/actions/caches') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('ref', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: ref');
                                            }
                                            $arguments['ref'] = $params['ref'];
                                            unset($params['ref']);
                                            if (array_key_exists('key', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: key');
                                            }
                                            $arguments['key'] = $params['key'];
                                            unset($params['key']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (array_key_exists('sort', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: sort');
                                            }
                                            $arguments['sort'] = $params['sort'];
                                            unset($params['sort']);
                                            if (array_key_exists('direction', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: direction');
                                            }
                                            $arguments['direction'] = $params['direction'];
                                            unset($params['direction']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Caches::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Caches::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Caches();
                                            }
                                            $operation = new Operation\Actions\GetActionsCacheList($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Caches::class], $arguments['owner'], $arguments['repo'], $arguments['ref'], $arguments['key'], $arguments['per_page'], $arguments['page'], $arguments['sort'], $arguments['direction']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ActionsCacheList {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'organization-secrets') {
                                        if ($call == 'GET /repos/{owner}/{repo}/actions/organization-secrets') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\OrganizationSecrets::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\OrganizationSecrets::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀OrganizationSecrets();
                                            }
                                            $operation = new Operation\Actions\ListRepoOrganizationSecrets($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\OrganizationSecrets::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListRepoOrganizationSecrets\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'organization-variables') {
                                        if ($call == 'GET /repos/{owner}/{repo}/actions/organization-variables') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\OrganizationVariables::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\OrganizationVariables::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀OrganizationVariables();
                                            }
                                            $operation = new Operation\Actions\ListRepoOrganizationVariables($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\OrganizationVariables::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListRepoOrganizationVariables\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'permissions') {
                                        if ($call == 'GET /repos/{owner}/{repo}/actions/permissions') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Permissions();
                                            }
                                            $operation = new Operation\Actions\GetGithubActionsPermissionsRepository($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ActionsRepositoryPermissions {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'runners') {
                                        if ($call == 'GET /repos/{owner}/{repo}/actions/runners') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners();
                                            }
                                            $operation = new Operation\Actions\ListSelfHostedRunnersForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListSelfHostedRunnersForRepo\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'runs') {
                                        if ($call == 'GET /repos/{owner}/{repo}/actions/runs') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('actor', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: actor');
                                            }
                                            $arguments['actor'] = $params['actor'];
                                            unset($params['actor']);
                                            if (array_key_exists('branch', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: branch');
                                            }
                                            $arguments['branch'] = $params['branch'];
                                            unset($params['branch']);
                                            if (array_key_exists('event', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: event');
                                            }
                                            $arguments['event'] = $params['event'];
                                            unset($params['event']);
                                            if (array_key_exists('status', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: status');
                                            }
                                            $arguments['status'] = $params['status'];
                                            unset($params['status']);
                                            if (array_key_exists('created', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: created');
                                            }
                                            $arguments['created'] = $params['created'];
                                            unset($params['created']);
                                            if (array_key_exists('check_suite_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: check_suite_id');
                                            }
                                            $arguments['check_suite_id'] = $params['check_suite_id'];
                                            unset($params['check_suite_id']);
                                            if (array_key_exists('head_sha', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: head_sha');
                                            }
                                            $arguments['head_sha'] = $params['head_sha'];
                                            unset($params['head_sha']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (array_key_exists('exclude_pull_requests', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: exclude_pull_requests');
                                            }
                                            $arguments['exclude_pull_requests'] = $params['exclude_pull_requests'];
                                            unset($params['exclude_pull_requests']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs();
                                            }
                                            $operation = new Operation\Actions\ListWorkflowRunsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs::class], $arguments['owner'], $arguments['repo'], $arguments['actor'], $arguments['branch'], $arguments['event'], $arguments['status'], $arguments['created'], $arguments['check_suite_id'], $arguments['head_sha'], $arguments['per_page'], $arguments['page'], $arguments['exclude_pull_requests']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListWorkflowRunsForRepo\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'secrets') {
                                        if ($call == 'GET /repos/{owner}/{repo}/actions/secrets') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Secrets();
                                            }
                                            $operation = new Operation\Actions\ListRepoSecrets($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListRepoSecrets\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'variables') {
                                        if ($call == 'GET /repos/{owner}/{repo}/actions/variables') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Variables::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Variables::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Variables();
                                            }
                                            $operation = new Operation\Actions\ListRepoVariables($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Variables::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListRepoVariables\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'workflows') {
                                        if ($call == 'GET /repos/{owner}/{repo}/actions/workflows') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Workflows();
                                            }
                                            $operation = new Operation\Actions\ListRepoWorkflows($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListRepoWorkflows\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'assignees') {
                                    if ($pathChunks[5] == '{assignee}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/assignees/{assignee}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('assignee', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: assignee');
                                            }
                                            $arguments['assignee'] = $params['assignee'];
                                            unset($params['assignee']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Assignees\CbAssigneeRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Assignees\CbAssigneeRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Assignees🌀CbAssigneeRcb();
                                            }
                                            $operation = new Operation\Issues\CheckUserCanBeAssigned($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Assignees\CbAssigneeRcb::class], $arguments['owner'], $arguments['repo'], $arguments['assignee']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'autolinks') {
                                    if ($pathChunks[5] == '{autolink_id}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/autolinks/{autolink_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('autolink_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: autolink_id');
                                            }
                                            $arguments['autolink_id'] = $params['autolink_id'];
                                            unset($params['autolink_id']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks\CbAutolinkIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks\CbAutolinkIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Autolinks🌀CbAutolinkIdRcb();
                                            }
                                            $operation = new Operation\Repos\GetAutolink($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks\CbAutolinkIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['autolink_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Autolink {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'branches') {
                                    if ($pathChunks[5] == '{branch}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/branches/{branch}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('branch', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: branch');
                                            }
                                            $arguments['branch'] = $params['branch'];
                                            unset($params['branch']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb();
                                            }
                                            $operation = new Operation\Repos\GetBranch($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\BranchWithProtection|\ApiClients\Client\Github\Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'check-runs') {
                                    if ($pathChunks[5] == '{check_run_id}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/check-runs/{check_run_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('check_run_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: check_run_id');
                                            }
                                            $arguments['check_run_id'] = $params['check_run_id'];
                                            unset($params['check_run_id']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckDashRuns🌀CbCheckRunIdRcb();
                                            }
                                            $operation = new Operation\Checks\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['check_run_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CheckRun {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'check-suites') {
                                    if ($pathChunks[5] == '{check_suite_id}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/check-suites/{check_suite_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('check_suite_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: check_suite_id');
                                            }
                                            $arguments['check_suite_id'] = $params['check_suite_id'];
                                            unset($params['check_suite_id']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashSuites\CbCheckSuiteIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashSuites\CbCheckSuiteIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckDashSuites🌀CbCheckSuiteIdRcb();
                                            }
                                            $operation = new Operation\Checks\GetSuite($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashSuites\CbCheckSuiteIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['check_suite_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CheckSuite {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'code-scanning') {
                                    if ($pathChunks[5] == 'alerts') {
                                        if ($call == 'GET /repos/{owner}/{repo}/code-scanning/alerts') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('tool_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: tool_name');
                                            }
                                            $arguments['tool_name'] = $params['tool_name'];
                                            unset($params['tool_name']);
                                            if (array_key_exists('tool_guid', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: tool_guid');
                                            }
                                            $arguments['tool_guid'] = $params['tool_guid'];
                                            unset($params['tool_guid']);
                                            if (array_key_exists('ref', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: ref');
                                            }
                                            $arguments['ref'] = $params['ref'];
                                            unset($params['ref']);
                                            if (array_key_exists('state', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: state');
                                            }
                                            $arguments['state'] = $params['state'];
                                            unset($params['state']);
                                            if (array_key_exists('severity', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: severity');
                                            }
                                            $arguments['severity'] = $params['severity'];
                                            unset($params['severity']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('direction', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: direction');
                                            }
                                            $arguments['direction'] = $params['direction'];
                                            unset($params['direction']);
                                            if (array_key_exists('sort', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: sort');
                                            }
                                            $arguments['sort'] = $params['sort'];
                                            unset($params['sort']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Alerts::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Alerts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeScanning🌀Alerts();
                                            }
                                            $operation = new Operation\CodeScanning\ListAlertsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Alerts::class], $arguments['owner'], $arguments['repo'], $arguments['tool_name'], $arguments['tool_guid'], $arguments['ref'], $arguments['state'], $arguments['severity'], $arguments['page'], $arguments['per_page'], $arguments['direction'], $arguments['sort']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'analyses') {
                                        if ($call == 'GET /repos/{owner}/{repo}/code-scanning/analyses') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('tool_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: tool_name');
                                            }
                                            $arguments['tool_name'] = $params['tool_name'];
                                            unset($params['tool_name']);
                                            if (array_key_exists('tool_guid', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: tool_guid');
                                            }
                                            $arguments['tool_guid'] = $params['tool_guid'];
                                            unset($params['tool_guid']);
                                            if (array_key_exists('ref', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: ref');
                                            }
                                            $arguments['ref'] = $params['ref'];
                                            unset($params['ref']);
                                            if (array_key_exists('sarif_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: sarif_id');
                                            }
                                            $arguments['sarif_id'] = $params['sarif_id'];
                                            unset($params['sarif_id']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('direction', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: direction');
                                            }
                                            $arguments['direction'] = $params['direction'];
                                            unset($params['direction']);
                                            if (array_key_exists('sort', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: sort');
                                            }
                                            $arguments['sort'] = $params['sort'];
                                            unset($params['sort']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Analyses::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Analyses::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeScanning🌀Analyses();
                                            }
                                            $operation = new Operation\CodeScanning\ListRecentAnalyses($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Analyses::class], $arguments['owner'], $arguments['repo'], $arguments['tool_name'], $arguments['tool_guid'], $arguments['ref'], $arguments['sarif_id'], $arguments['page'], $arguments['per_page'], $arguments['direction'], $arguments['sort']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'default-setup') {
                                        if ($call == 'GET /repos/{owner}/{repo}/code-scanning/default-setup') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\DefaultSetup::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\DefaultSetup::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeScanning🌀DefaultSetup();
                                            }
                                            $operation = new Operation\CodeScanning\GetDefaultSetup($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\DefaultSetup::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CodeScanningDefaultSetup {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'codeowners') {
                                    if ($pathChunks[5] == 'errors') {
                                        if ($call == 'GET /repos/{owner}/{repo}/codeowners/errors') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('ref', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: ref');
                                            }
                                            $arguments['ref'] = $params['ref'];
                                            unset($params['ref']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codeowners\Errors::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codeowners\Errors::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codeowners🌀Errors();
                                            }
                                            $operation = new Operation\Repos\CodeownersErrors($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codeowners\Errors::class], $arguments['owner'], $arguments['repo'], $arguments['ref']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CodeownersErrors {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'codespaces') {
                                    if ($pathChunks[5] == 'devcontainers') {
                                        if ($call == 'GET /repos/{owner}/{repo}/codespaces/devcontainers') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Devcontainers::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Devcontainers::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codespaces🌀Devcontainers();
                                            }
                                            $operation = new Operation\Codespaces\ListDevcontainersInRepositoryForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Devcontainers::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Codespaces\ListDevcontainersInRepositoryForAuthenticatedUser\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'machines') {
                                        if ($call == 'GET /repos/{owner}/{repo}/codespaces/machines') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('location', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: location');
                                            }
                                            $arguments['location'] = $params['location'];
                                            unset($params['location']);
                                            if (array_key_exists('client_ip', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: client_ip');
                                            }
                                            $arguments['client_ip'] = $params['client_ip'];
                                            unset($params['client_ip']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Machines::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Machines::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codespaces🌀Machines();
                                            }
                                            $operation = new Operation\Codespaces\RepoMachinesForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Machines::class], $arguments['owner'], $arguments['repo'], $arguments['location'], $arguments['client_ip']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Codespaces\RepoMachinesForAuthenticatedUser\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'new') {
                                        if ($call == 'GET /repos/{owner}/{repo}/codespaces/new') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('ref', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: ref');
                                            }
                                            $arguments['ref'] = $params['ref'];
                                            unset($params['ref']);
                                            if (array_key_exists('client_ip', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: client_ip');
                                            }
                                            $arguments['client_ip'] = $params['client_ip'];
                                            unset($params['client_ip']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\New_::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\New_::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codespaces🌀New_();
                                            }
                                            $operation = new Operation\Codespaces\PreFlightWithRepoForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\New_::class], $arguments['owner'], $arguments['repo'], $arguments['ref'], $arguments['client_ip']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Codespaces\PreFlightWithRepoForAuthenticatedUser\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'secrets') {
                                        if ($call == 'GET /repos/{owner}/{repo}/codespaces/secrets') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codespaces🌀Secrets();
                                            }
                                            $operation = new Operation\Codespaces\ListRepoSecrets($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Codespaces\ListRepoSecrets\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'collaborators') {
                                    if ($pathChunks[5] == '{username}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/collaborators/{username}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('username', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: username');
                                            }
                                            $arguments['username'] = $params['username'];
                                            unset($params['username']);
                                            $operation = new Operation\Repos\CheckCollaborator($arguments['owner'], $arguments['repo'], $arguments['username']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'comments') {
                                    if ($pathChunks[5] == '{comment_id}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/comments/{comment_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('comment_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                            }
                                            $arguments['comment_id'] = $params['comment_id'];
                                            unset($params['comment_id']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Comments🌀CbCommentIdRcb();
                                            }
                                            $operation = new Operation\Repos\GetCommitComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['comment_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CommitComment {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'commits') {
                                    if ($pathChunks[5] == '{ref}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/commits/{ref}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('ref', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: ref');
                                            }
                                            $arguments['ref'] = $params['ref'];
                                            unset($params['ref']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits🌀CbRefRcb();
                                            }
                                            $operation = new Operation\Repos\GetCommit($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb::class], $arguments['owner'], $arguments['repo'], $arguments['ref'], $arguments['page'], $arguments['per_page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Commit {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'community') {
                                    if ($pathChunks[5] == 'profile') {
                                        if ($call == 'GET /repos/{owner}/{repo}/community/profile') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Community\Profile::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Community\Profile::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Community🌀Profile();
                                            }
                                            $operation = new Operation\Repos\GetCommunityProfileMetrics($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Community\Profile::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CommunityProfile {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'compare') {
                                    if ($pathChunks[5] == '{basehead}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/compare/{basehead}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('basehead', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: basehead');
                                            }
                                            $arguments['basehead'] = $params['basehead'];
                                            unset($params['basehead']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Compare\CbBaseheadRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Compare\CbBaseheadRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Compare🌀CbBaseheadRcb();
                                            }
                                            $operation = new Operation\Repos\CompareCommits($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Compare\CbBaseheadRcb::class], $arguments['owner'], $arguments['repo'], $arguments['basehead'], $arguments['page'], $arguments['per_page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CommitComparison {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'contents') {
                                    if ($pathChunks[5] == '{path}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/contents/{path}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('path', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: path');
                                            }
                                            $arguments['path'] = $params['path'];
                                            unset($params['path']);
                                            if (array_key_exists('ref', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: ref');
                                            }
                                            $arguments['ref'] = $params['ref'];
                                            unset($params['ref']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contents\CbPathRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contents\CbPathRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Contents🌀CbPathRcb();
                                            }
                                            $operation = new Operation\Repos\GetContent($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contents\CbPathRcb::class], $arguments['owner'], $arguments['repo'], $arguments['path'], $arguments['ref']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ContentTree|\ApiClients\Client\Github\Schema\Operation\Repos\GetContent\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'dependabot') {
                                    if ($pathChunks[5] == 'alerts') {
                                        if ($call == 'GET /repos/{owner}/{repo}/dependabot/alerts') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('state', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: state');
                                            }
                                            $arguments['state'] = $params['state'];
                                            unset($params['state']);
                                            if (array_key_exists('severity', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: severity');
                                            }
                                            $arguments['severity'] = $params['severity'];
                                            unset($params['severity']);
                                            if (array_key_exists('ecosystem', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: ecosystem');
                                            }
                                            $arguments['ecosystem'] = $params['ecosystem'];
                                            unset($params['ecosystem']);
                                            if (array_key_exists('package', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: package');
                                            }
                                            $arguments['package'] = $params['package'];
                                            unset($params['package']);
                                            if (array_key_exists('manifest', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: manifest');
                                            }
                                            $arguments['manifest'] = $params['manifest'];
                                            unset($params['manifest']);
                                            if (array_key_exists('scope', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: scope');
                                            }
                                            $arguments['scope'] = $params['scope'];
                                            unset($params['scope']);
                                            if (array_key_exists('before', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: before');
                                            }
                                            $arguments['before'] = $params['before'];
                                            unset($params['before']);
                                            if (array_key_exists('after', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: after');
                                            }
                                            $arguments['after'] = $params['after'];
                                            unset($params['after']);
                                            if (array_key_exists('last', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: last');
                                            }
                                            $arguments['last'] = $params['last'];
                                            unset($params['last']);
                                            if (array_key_exists('sort', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: sort');
                                            }
                                            $arguments['sort'] = $params['sort'];
                                            unset($params['sort']);
                                            if (array_key_exists('direction', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: direction');
                                            }
                                            $arguments['direction'] = $params['direction'];
                                            unset($params['direction']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('first', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: first');
                                            }
                                            $arguments['first'] = $params['first'];
                                            unset($params['first']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Alerts::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Alerts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Dependabot🌀Alerts();
                                            }
                                            $operation = new Operation\Dependabot\ListAlertsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Alerts::class], $arguments['owner'], $arguments['repo'], $arguments['state'], $arguments['severity'], $arguments['ecosystem'], $arguments['package'], $arguments['manifest'], $arguments['scope'], $arguments['before'], $arguments['after'], $arguments['last'], $arguments['sort'], $arguments['direction'], $arguments['page'], $arguments['per_page'], $arguments['first']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'secrets') {
                                        if ($call == 'GET /repos/{owner}/{repo}/dependabot/secrets') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Dependabot🌀Secrets();
                                            }
                                            $operation = new Operation\Dependabot\ListRepoSecrets($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Dependabot\ListRepoSecrets\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'dependency-graph') {
                                    if ($pathChunks[5] == 'sbom') {
                                        if ($call == 'GET /repos/{owner}/{repo}/dependency-graph/sbom') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\DependencyGraph\Sbom::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\DependencyGraph\Sbom::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀DependencyGraph🌀Sbom();
                                            }
                                            $operation = new Operation\DependencyGraph\ExportSbom($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\DependencyGraph\Sbom::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\DependencyGraphSpdxSbom {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'deployments') {
                                    if ($pathChunks[5] == '{deployment_id}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/deployments/{deployment_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('deployment_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: deployment_id');
                                            }
                                            $arguments['deployment_id'] = $params['deployment_id'];
                                            unset($params['deployment_id']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Deployments🌀CbDeploymentIdRcb();
                                            }
                                            $operation = new Operation\Repos\GetDeployment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['deployment_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Deployment {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'environments') {
                                    if ($pathChunks[5] == '{environment_name}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/environments/{environment_name}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('environment_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: environment_name');
                                            }
                                            $arguments['environment_name'] = $params['environment_name'];
                                            unset($params['environment_name']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Environments🌀CbEnvironmentNameRcb();
                                            }
                                            $operation = new Operation\Repos\GetEnvironment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb::class], $arguments['owner'], $arguments['repo'], $arguments['environment_name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Environment {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'hooks') {
                                    if ($pathChunks[5] == '{hook_id}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/hooks/{hook_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('hook_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: hook_id');
                                            }
                                            $arguments['hook_id'] = $params['hook_id'];
                                            unset($params['hook_id']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb();
                                            }
                                            $operation = new Operation\Repos\GetWebhook($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['hook_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Hook {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'import') {
                                    if ($pathChunks[5] == 'authors') {
                                        if ($call == 'GET /repos/{owner}/{repo}/import/authors') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('since', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: since');
                                            }
                                            $arguments['since'] = $params['since'];
                                            unset($params['since']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\Authors::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\Authors::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Import🌀Authors();
                                            }
                                            $operation = new Operation\Migrations\GetCommitAuthors($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\Authors::class], $arguments['owner'], $arguments['repo'], $arguments['since']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'large_files') {
                                        if ($call == 'GET /repos/{owner}/{repo}/import/large_files') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\LargeFiles::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\LargeFiles::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Import🌀LargeFiles();
                                            }
                                            $operation = new Operation\Migrations\GetLargeFiles($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\LargeFiles::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'issues') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($call == 'GET /repos/{owner}/{repo}/issues/comments') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('direction', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: direction');
                                            }
                                            $arguments['direction'] = $params['direction'];
                                            unset($params['direction']);
                                            if (array_key_exists('since', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: since');
                                            }
                                            $arguments['since'] = $params['since'];
                                            unset($params['since']);
                                            if (array_key_exists('sort', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: sort');
                                            }
                                            $arguments['sort'] = $params['sort'];
                                            unset($params['sort']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀Comments();
                                            }
                                            $operation = new Operation\Issues\ListCommentsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments::class], $arguments['owner'], $arguments['repo'], $arguments['direction'], $arguments['since'], $arguments['sort'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'events') {
                                        if ($call == 'GET /repos/{owner}/{repo}/issues/events') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Events::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Events::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀Events();
                                            }
                                            $operation = new Operation\Issues\ListEventsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Events::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == '{issue_number}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/issues/{issue_number}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('issue_number', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: issue_number');
                                            }
                                            $arguments['issue_number'] = $params['issue_number'];
                                            unset($params['issue_number']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb();
                                            }
                                            $operation = new Operation\Issues\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb::class], $arguments['owner'], $arguments['repo'], $arguments['issue_number']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Issue|\ApiClients\Client\Github\Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'keys') {
                                    if ($pathChunks[5] == '{key_id}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/keys/{key_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('key_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: key_id');
                                            }
                                            $arguments['key_id'] = $params['key_id'];
                                            unset($params['key_id']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Keys\CbKeyIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Keys\CbKeyIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Keys🌀CbKeyIdRcb();
                                            }
                                            $operation = new Operation\Repos\GetDeployKey($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Keys\CbKeyIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['key_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\DeployKey {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'labels') {
                                    if ($pathChunks[5] == '{name}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/labels/{name}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: name');
                                            }
                                            $arguments['name'] = $params['name'];
                                            unset($params['name']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels\CbNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels\CbNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Labels🌀CbNameRcb();
                                            }
                                            $operation = new Operation\Issues\GetLabel($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels\CbNameRcb::class], $arguments['owner'], $arguments['repo'], $arguments['name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Label {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'milestones') {
                                    if ($pathChunks[5] == '{milestone_number}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/milestones/{milestone_number}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('milestone_number', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: milestone_number');
                                            }
                                            $arguments['milestone_number'] = $params['milestone_number'];
                                            unset($params['milestone_number']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Milestones🌀CbMilestoneNumberRcb();
                                            }
                                            $operation = new Operation\Issues\GetMilestone($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb::class], $arguments['owner'], $arguments['repo'], $arguments['milestone_number']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Milestone {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'pages') {
                                    if ($pathChunks[5] == 'builds') {
                                        if ($call == 'GET /repos/{owner}/{repo}/pages/builds') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages🌀Builds();
                                            }
                                            $operation = new Operation\Repos\ListPagesBuilds($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds::class], $arguments['owner'], $arguments['repo'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'health') {
                                        if ($call == 'GET /repos/{owner}/{repo}/pages/health') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Health::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Health::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages🌀Health();
                                            }
                                            $operation = new Operation\Repos\GetPagesHealthCheck($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Health::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PagesHealthCheck|\ApiClients\Client\Github\Schema\EmptyObject {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'pulls') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($call == 'GET /repos/{owner}/{repo}/pulls/comments') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('sort', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: sort');
                                            }
                                            $arguments['sort'] = $params['sort'];
                                            unset($params['sort']);
                                            if (array_key_exists('direction', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: direction');
                                            }
                                            $arguments['direction'] = $params['direction'];
                                            unset($params['direction']);
                                            if (array_key_exists('since', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: since');
                                            }
                                            $arguments['since'] = $params['since'];
                                            unset($params['since']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀Comments();
                                            }
                                            $operation = new Operation\Pulls\ListReviewCommentsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments::class], $arguments['owner'], $arguments['repo'], $arguments['sort'], $arguments['direction'], $arguments['since'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == '{pull_number}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/pulls/{pull_number}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('pull_number', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                            }
                                            $arguments['pull_number'] = $params['pull_number'];
                                            unset($params['pull_number']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb();
                                            }
                                            $operation = new Operation\Pulls\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PullRequest {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'readme') {
                                    if ($pathChunks[5] == '{dir}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/readme/{dir}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('dir', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: dir');
                                            }
                                            $arguments['dir'] = $params['dir'];
                                            unset($params['dir']);
                                            if (array_key_exists('ref', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: ref');
                                            }
                                            $arguments['ref'] = $params['ref'];
                                            unset($params['ref']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Readme\CbDirRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Readme\CbDirRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Readme🌀CbDirRcb();
                                            }
                                            $operation = new Operation\Repos\GetReadmeInDirectory($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Readme\CbDirRcb::class], $arguments['owner'], $arguments['repo'], $arguments['dir'], $arguments['ref']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ContentFile {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'releases') {
                                    if ($pathChunks[5] == 'latest') {
                                        if ($call == 'GET /repos/{owner}/{repo}/releases/latest') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Latest::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Latest::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀Latest();
                                            }
                                            $operation = new Operation\Repos\GetLatestRelease($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Latest::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Release {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == '{release_id}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/releases/{release_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('release_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: release_id');
                                            }
                                            $arguments['release_id'] = $params['release_id'];
                                            unset($params['release_id']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀CbReleaseIdRcb();
                                            }
                                            $operation = new Operation\Repos\GetRelease($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['release_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Release {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'secret-scanning') {
                                    if ($pathChunks[5] == 'alerts') {
                                        if ($call == 'GET /repos/{owner}/{repo}/secret-scanning/alerts') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('state', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: state');
                                            }
                                            $arguments['state'] = $params['state'];
                                            unset($params['state']);
                                            if (array_key_exists('secret_type', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: secret_type');
                                            }
                                            $arguments['secret_type'] = $params['secret_type'];
                                            unset($params['secret_type']);
                                            if (array_key_exists('resolution', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: resolution');
                                            }
                                            $arguments['resolution'] = $params['resolution'];
                                            unset($params['resolution']);
                                            if (array_key_exists('before', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: before');
                                            }
                                            $arguments['before'] = $params['before'];
                                            unset($params['before']);
                                            if (array_key_exists('after', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: after');
                                            }
                                            $arguments['after'] = $params['after'];
                                            unset($params['after']);
                                            if (array_key_exists('sort', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: sort');
                                            }
                                            $arguments['sort'] = $params['sort'];
                                            unset($params['sort']);
                                            if (array_key_exists('direction', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: direction');
                                            }
                                            $arguments['direction'] = $params['direction'];
                                            unset($params['direction']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretScanning\Alerts::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretScanning\Alerts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀SecretScanning🌀Alerts();
                                            }
                                            $operation = new Operation\SecretScanning\ListAlertsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretScanning\Alerts::class], $arguments['owner'], $arguments['repo'], $arguments['state'], $arguments['secret_type'], $arguments['resolution'], $arguments['before'], $arguments['after'], $arguments['sort'], $arguments['direction'], $arguments['page'], $arguments['per_page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'security-advisories') {
                                    if ($pathChunks[5] == '{ghsa_id}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('ghsa_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: ghsa_id');
                                            }
                                            $arguments['ghsa_id'] = $params['ghsa_id'];
                                            unset($params['ghsa_id']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecurityDashAdvisories\CbGhsaIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecurityDashAdvisories\CbGhsaIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀SecurityDashAdvisories🌀CbGhsaIdRcb();
                                            }
                                            $operation = new Operation\SecurityAdvisories\GetRepositoryAdvisory($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecurityDashAdvisories\CbGhsaIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['ghsa_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\RepositoryAdvisory {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'stats') {
                                    if ($pathChunks[5] == 'code_frequency') {
                                        if ($call == 'GET /repos/{owner}/{repo}/stats/code_frequency') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\CodeFrequency::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\CodeFrequency::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Stats🌀CodeFrequency();
                                            }
                                            $operation = new Operation\Repos\GetCodeFrequencyStats($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\CodeFrequency::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable|\ApiClients\Client\Github\Schema\Operation\Repos\GetCodeFrequencyStats\Response\Applicationjson\H202 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'commit_activity') {
                                        if ($call == 'GET /repos/{owner}/{repo}/stats/commit_activity') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\CommitActivity::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\CommitActivity::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Stats🌀CommitActivity();
                                            }
                                            $operation = new Operation\Repos\GetCommitActivityStats($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\CommitActivity::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable|\ApiClients\Client\Github\Schema\Operation\Repos\GetCommitActivityStats\Response\Applicationjson\H202 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'contributors') {
                                        if ($call == 'GET /repos/{owner}/{repo}/stats/contributors') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\Contributors::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\Contributors::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Stats🌀Contributors();
                                            }
                                            $operation = new Operation\Repos\GetContributorsStats($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\Contributors::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable|\ApiClients\Client\Github\Schema\Operation\Repos\GetContributorsStats\Response\Applicationjson\H202 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'participation') {
                                        if ($call == 'GET /repos/{owner}/{repo}/stats/participation') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\Participation::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\Participation::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Stats🌀Participation();
                                            }
                                            $operation = new Operation\Repos\GetParticipationStats($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\Participation::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ParticipationStats {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'punch_card') {
                                        if ($call == 'GET /repos/{owner}/{repo}/stats/punch_card') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\PunchCard::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\PunchCard::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Stats🌀PunchCard();
                                            }
                                            $operation = new Operation\Repos\GetPunchCardStats($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\PunchCard::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'tags') {
                                    if ($pathChunks[5] == 'protection') {
                                        if ($call == 'GET /repos/{owner}/{repo}/tags/protection') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags\Protection::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags\Protection::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Tags🌀Protection();
                                            }
                                            $operation = new Operation\Repos\ListTagProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags\Protection::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'tarball') {
                                    if ($pathChunks[5] == '{ref}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/tarball/{ref}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('ref', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: ref');
                                            }
                                            $arguments['ref'] = $params['ref'];
                                            unset($params['ref']);
                                            $operation = new Operation\Repos\DownloadTarballArchive($arguments['owner'], $arguments['repo'], $arguments['ref']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \array {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'traffic') {
                                    if ($pathChunks[5] == 'clones') {
                                        if ($call == 'GET /repos/{owner}/{repo}/traffic/clones') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('per', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per');
                                            }
                                            $arguments['per'] = $params['per'];
                                            unset($params['per']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Clones::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Clones::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Traffic🌀Clones();
                                            }
                                            $operation = new Operation\Repos\GetClones($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Clones::class], $arguments['owner'], $arguments['repo'], $arguments['per']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CloneTraffic {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'views') {
                                        if ($call == 'GET /repos/{owner}/{repo}/traffic/views') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('per', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per');
                                            }
                                            $arguments['per'] = $params['per'];
                                            unset($params['per']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Views::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Views::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Traffic🌀Views();
                                            }
                                            $operation = new Operation\Repos\GetViews($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Views::class], $arguments['owner'], $arguments['repo'], $arguments['per']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ViewTraffic {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'zipball') {
                                    if ($pathChunks[5] == '{ref}') {
                                        if ($call == 'GET /repos/{owner}/{repo}/zipball/{ref}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('ref', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: ref');
                                            }
                                            $arguments['ref'] = $params['ref'];
                                            unset($params['ref']);
                                            $operation = new Operation\Repos\DownloadZipballArchive($arguments['owner'], $arguments['repo'], $arguments['ref']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \array {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repositories') {
                        if ($pathChunks[2] == '{repository_id}') {
                            if ($pathChunks[3] == 'environments') {
                                if ($pathChunks[4] == '{environment_name}') {
                                    if ($pathChunks[5] == 'secrets') {
                                        if ($call == 'GET /repositories/{repository_id}/environments/{environment_name}/secrets') {
                                            $arguments = array();
                                            if (array_key_exists('repository_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                            }
                                            $arguments['repository_id'] = $params['repository_id'];
                                            unset($params['repository_id']);
                                            if (array_key_exists('environment_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: environment_name');
                                            }
                                            $arguments['environment_name'] = $params['environment_name'];
                                            unset($params['environment_name']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets::class] = $this->hydrators->getObjectMapperOperation🌀Repositories🌀CbRepositoryIdRcb🌀Environments🌀CbEnvironmentNameRcb🌀Secrets();
                                            }
                                            $operation = new Operation\Actions\ListEnvironmentSecrets($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets::class], $arguments['repository_id'], $arguments['environment_name'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListEnvironmentSecrets\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'variables') {
                                        if ($call == 'GET /repositories/{repository_id}/environments/{environment_name}/variables') {
                                            $arguments = array();
                                            if (array_key_exists('repository_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                            }
                                            $arguments['repository_id'] = $params['repository_id'];
                                            unset($params['repository_id']);
                                            if (array_key_exists('environment_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: environment_name');
                                            }
                                            $arguments['environment_name'] = $params['environment_name'];
                                            unset($params['environment_name']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Variables::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Variables::class] = $this->hydrators->getObjectMapperOperation🌀Repositories🌀CbRepositoryIdRcb🌀Environments🌀CbEnvironmentNameRcb🌀Variables();
                                            }
                                            $operation = new Operation\Actions\ListEnvironmentVariables($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Variables::class], $arguments['repository_id'], $arguments['environment_name'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListEnvironmentVariables\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'teams') {
                        if ($pathChunks[2] == '{team_id}') {
                            if ($pathChunks[3] == 'discussions') {
                                if ($pathChunks[4] == '{discussion_number}') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($call == 'GET /teams/{team_id}/discussions/{discussion_number}/comments') {
                                            $arguments = array();
                                            if (array_key_exists('team_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                            }
                                            $arguments['team_id'] = $params['team_id'];
                                            unset($params['team_id']);
                                            if (array_key_exists('discussion_number', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                            }
                                            $arguments['discussion_number'] = $params['discussion_number'];
                                            unset($params['discussion_number']);
                                            if (array_key_exists('direction', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: direction');
                                            }
                                            $arguments['direction'] = $params['direction'];
                                            unset($params['direction']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments();
                                            }
                                            $operation = new Operation\Teams\ListDiscussionCommentsLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments::class], $arguments['team_id'], $arguments['discussion_number'], $arguments['direction'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'reactions') {
                                        if ($call == 'GET /teams/{team_id}/discussions/{discussion_number}/reactions') {
                                            $arguments = array();
                                            if (array_key_exists('team_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                            }
                                            $arguments['team_id'] = $params['team_id'];
                                            unset($params['team_id']);
                                            if (array_key_exists('discussion_number', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                            }
                                            $arguments['discussion_number'] = $params['discussion_number'];
                                            unset($params['discussion_number']);
                                            if (array_key_exists('content', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: content');
                                            }
                                            $arguments['content'] = $params['content'];
                                            unset($params['content']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Reactions();
                                            }
                                            $operation = new Operation\Reactions\ListForTeamDiscussionLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Reactions::class], $arguments['team_id'], $arguments['discussion_number'], $arguments['content'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'repos') {
                                if ($pathChunks[4] == '{owner}') {
                                    if ($pathChunks[5] == '{repo}') {
                                        if ($call == 'GET /teams/{team_id}/repos/{owner}/{repo}') {
                                            $arguments = array();
                                            if (array_key_exists('team_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                            }
                                            $arguments['team_id'] = $params['team_id'];
                                            unset($params['team_id']);
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Repos\CbOwnerRcb\CbRepoRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Repos\CbOwnerRcb\CbRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Repos🌀CbOwnerRcb🌀CbRepoRcb();
                                            }
                                            $operation = new Operation\Teams\CheckPermissionsForRepoLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Repos\CbOwnerRcb\CbRepoRcb::class], $arguments['team_id'], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamRepository {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'codespaces') {
                            if ($pathChunks[3] == 'secrets') {
                                if ($pathChunks[4] == '{secret_name}') {
                                    if ($pathChunks[5] == 'repositories') {
                                        if ($call == 'GET /user/codespaces/secrets/{secret_name}/repositories') {
                                            $arguments = array();
                                            if (array_key_exists('secret_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                            }
                                            $arguments['secret_name'] = $params['secret_name'];
                                            unset($params['secret_name']);
                                            if (\array_key_exists(Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀Secrets🌀CbSecretNameRcb🌀Repositories();
                                            }
                                            $operation = new Operation\Codespaces\ListRepositoriesForSecretForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories::class], $arguments['secret_name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Codespaces\ListRepositoriesForSecretForAuthenticatedUser\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == '{codespace_name}') {
                                if ($pathChunks[4] == 'exports') {
                                    if ($pathChunks[5] == '{export_id}') {
                                        if ($call == 'GET /user/codespaces/{codespace_name}/exports/{export_id}') {
                                            $arguments = array();
                                            if (array_key_exists('codespace_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: codespace_name');
                                            }
                                            $arguments['codespace_name'] = $params['codespace_name'];
                                            unset($params['codespace_name']);
                                            if (array_key_exists('export_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: export_id');
                                            }
                                            $arguments['export_id'] = $params['export_id'];
                                            unset($params['export_id']);
                                            if (\array_key_exists(Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Exports\CbExportIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Exports\CbExportIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀CbCodespaceNameRcb🌀Exports🌀CbExportIdRcb();
                                            }
                                            $operation = new Operation\Codespaces\GetExportDetailsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Exports\CbExportIdRcb::class], $arguments['codespace_name'], $arguments['export_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CodespaceExportDetails {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        } elseif ($pathChunks[2] == 'packages') {
                            if ($pathChunks[3] == '{package_type}') {
                                if ($pathChunks[4] == '{package_name}') {
                                    if ($pathChunks[5] == 'versions') {
                                        if ($call == 'GET /user/packages/{package_type}/{package_name}/versions') {
                                            $arguments = array();
                                            if (array_key_exists('package_type', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                            }
                                            $arguments['package_type'] = $params['package_type'];
                                            unset($params['package_type']);
                                            if (array_key_exists('package_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                            }
                                            $arguments['package_name'] = $params['package_name'];
                                            unset($params['package_name']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('state', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: state');
                                            }
                                            $arguments['state'] = $params['state'];
                                            unset($params['state']);
                                            if (\array_key_exists(Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions();
                                            }
                                            $operation = new Operation\Packages\GetAllPackageVersionsForPackageOwnedByAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions::class], $arguments['package_type'], $arguments['package_name'], $arguments['page'], $arguments['per_page'], $arguments['state']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'users') {
                        if ($pathChunks[2] == '{username}') {
                            if ($pathChunks[3] == 'events') {
                                if ($pathChunks[4] == 'orgs') {
                                    if ($pathChunks[5] == '{org}') {
                                        if ($call == 'GET /users/{username}/events/orgs/{org}') {
                                            $arguments = array();
                                            if (array_key_exists('username', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: username');
                                            }
                                            $arguments['username'] = $params['username'];
                                            unset($params['username']);
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('per_page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                            }
                                            $arguments['per_page'] = $params['per_page'];
                                            unset($params['per_page']);
                                            if (array_key_exists('page', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                            }
                                            $arguments['page'] = $params['page'];
                                            unset($params['page']);
                                            if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Events\Orgs\CbOrgRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Events\Orgs\CbOrgRcb::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Events🌀Orgs🌀CbOrgRcb();
                                            }
                                            $operation = new Operation\Activity\ListOrgEventsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Events\Orgs\CbOrgRcb::class], $arguments['username'], $arguments['org'], $arguments['per_page'], $arguments['page']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'packages') {
                                if ($pathChunks[4] == '{package_type}') {
                                    if ($pathChunks[5] == '{package_name}') {
                                        if ($call == 'GET /users/{username}/packages/{package_type}/{package_name}') {
                                            $arguments = array();
                                            if (array_key_exists('package_type', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                            }
                                            $arguments['package_type'] = $params['package_type'];
                                            unset($params['package_type']);
                                            if (array_key_exists('package_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                            }
                                            $arguments['package_name'] = $params['package_name'];
                                            unset($params['package_name']);
                                            if (array_key_exists('username', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: username');
                                            }
                                            $arguments['username'] = $params['username'];
                                            unset($params['username']);
                                            if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb();
                                            }
                                            $operation = new Operation\Packages\GetPackageForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class], $arguments['package_type'], $arguments['package_name'], $arguments['username']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Package {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'settings') {
                                if ($pathChunks[4] == 'billing') {
                                    if ($pathChunks[5] == 'actions') {
                                        if ($call == 'GET /users/{username}/settings/billing/actions') {
                                            $arguments = array();
                                            if (array_key_exists('username', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: username');
                                            }
                                            $arguments['username'] = $params['username'];
                                            unset($params['username']);
                                            if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Settings\Billing\Actions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Settings\Billing\Actions::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Settings🌀Billing🌀Actions();
                                            }
                                            $operation = new Operation\Billing\GetGithubActionsBillingUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Settings\Billing\Actions::class], $arguments['username']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ActionsBillingUsage {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'packages') {
                                        if ($call == 'GET /users/{username}/settings/billing/packages') {
                                            $arguments = array();
                                            if (array_key_exists('username', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: username');
                                            }
                                            $arguments['username'] = $params['username'];
                                            unset($params['username']);
                                            if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Settings\Billing\Packages::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Settings\Billing\Packages::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Settings🌀Billing🌀Packages();
                                            }
                                            $operation = new Operation\Billing\GetGithubPackagesBillingUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Settings\Billing\Packages::class], $arguments['username']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PackagesBillingUsage {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'shared-storage') {
                                        if ($call == 'GET /users/{username}/settings/billing/shared-storage') {
                                            $arguments = array();
                                            if (array_key_exists('username', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: username');
                                            }
                                            $arguments['username'] = $params['username'];
                                            unset($params['username']);
                                            if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Settings\Billing\SharedStorage::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Settings\Billing\SharedStorage::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Settings🌀Billing🌀SharedStorage();
                                            }
                                            $operation = new Operation\Billing\GetSharedStorageBillingUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Settings\Billing\SharedStorage::class], $arguments['username']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CombinedBillingUsage {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 7) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'actions') {
                                if ($pathChunks[4] == 'oidc') {
                                    if ($pathChunks[5] == 'customization') {
                                        if ($pathChunks[6] == 'sub') {
                                            if ($call == 'GET /orgs/{org}/actions/oidc/customization/sub') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Oidc\Customization\Sub::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Oidc\Customization\Sub::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Oidc🌀Customization🌀Sub();
                                                }
                                                $operation = new Operation\Oidc\GetOidcCustomSubTemplateForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Oidc\Customization\Sub::class], $arguments['org']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\OidcCustomSub {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'required_workflows') {
                                    if ($pathChunks[5] == '{required_workflow_id}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($call == 'GET /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('required_workflow_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: required_workflow_id');
                                                }
                                                $arguments['required_workflow_id'] = $params['required_workflow_id'];
                                                unset($params['required_workflow_id']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdRcb\Repositories::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀RequiredWorkflows🌀CbRequiredWorkflowIdRcb🌀Repositories();
                                                }
                                                $operation = new Operation\Actions\ListSelectedRepositoriesRequiredWorkflow($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdRcb\Repositories::class], $arguments['org'], $arguments['required_workflow_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListSelectedRepositoriesRequiredWorkflow\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'runners') {
                                    if ($pathChunks[5] == '{runner_id}') {
                                        if ($pathChunks[6] == 'labels') {
                                            if ($call == 'GET /orgs/{org}/actions/runners/{runner_id}/labels') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('runner_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: runner_id');
                                                }
                                                $arguments['runner_id'] = $params['runner_id'];
                                                unset($params['runner_id']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                }
                                                $operation = new Operation\Actions\ListLabelsForSelfHostedRunnerForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $arguments['org'], $arguments['runner_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == '{secret_name}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($call == 'GET /orgs/{org}/actions/secrets/{secret_name}/repositories') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\CbSecretNameRcb\Repositories::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\CbSecretNameRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Secrets🌀CbSecretNameRcb🌀Repositories();
                                                }
                                                $operation = new Operation\Actions\ListSelectedReposForOrgSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\CbSecretNameRcb\Repositories::class], $arguments['org'], $arguments['secret_name'], $arguments['page'], $arguments['per_page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListSelectedReposForOrgSecret\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'variables') {
                                    if ($pathChunks[5] == '{name}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($call == 'GET /orgs/{org}/actions/variables/{name}/repositories') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: name');
                                                }
                                                $arguments['name'] = $params['name'];
                                                unset($params['name']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables\CbNameRcb\Repositories::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables\CbNameRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Variables🌀CbNameRcb🌀Repositories();
                                                }
                                                $operation = new Operation\Actions\ListSelectedReposForOrgVariable($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables\CbNameRcb\Repositories::class], $arguments['org'], $arguments['name'], $arguments['page'], $arguments['per_page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListSelectedReposForOrgVariable\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'codespaces') {
                                if ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == '{secret_name}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($call == 'GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Secrets🌀CbSecretNameRcb🌀Repositories();
                                                }
                                                $operation = new Operation\Codespaces\ListSelectedReposForOrgSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories::class], $arguments['org'], $arguments['secret_name'], $arguments['page'], $arguments['per_page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Codespaces\ListSelectedReposForOrgSecret\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'dependabot') {
                                if ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == '{secret_name}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($call == 'GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\CbSecretNameRcb\Repositories::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\CbSecretNameRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Dependabot🌀Secrets🌀CbSecretNameRcb🌀Repositories();
                                                }
                                                $operation = new Operation\Dependabot\ListSelectedReposForOrgSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\CbSecretNameRcb\Repositories::class], $arguments['org'], $arguments['secret_name'], $arguments['page'], $arguments['per_page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Dependabot\ListSelectedReposForOrgSecret\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'hooks') {
                                if ($pathChunks[4] == '{hook_id}') {
                                    if ($pathChunks[5] == 'deliveries') {
                                        if ($pathChunks[6] == '{delivery_id}') {
                                            if ($call == 'GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('hook_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: hook_id');
                                                }
                                                $arguments['hook_id'] = $params['hook_id'];
                                                unset($params['hook_id']);
                                                if (array_key_exists('delivery_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: delivery_id');
                                                }
                                                $arguments['delivery_id'] = $params['delivery_id'];
                                                unset($params['delivery_id']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks🌀CbHookIdRcb🌀Deliveries🌀CbDeliveryIdRcb();
                                                }
                                                $operation = new Operation\Orgs\GetWebhookDelivery($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb::class], $arguments['org'], $arguments['hook_id'], $arguments['delivery_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\HookDelivery {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'packages') {
                                if ($pathChunks[4] == '{package_type}') {
                                    if ($pathChunks[5] == '{package_name}') {
                                        if ($pathChunks[6] == 'versions') {
                                            if ($call == 'GET /orgs/{org}/packages/{package_type}/{package_name}/versions') {
                                                $arguments = array();
                                                if (array_key_exists('package_type', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                                }
                                                $arguments['package_type'] = $params['package_type'];
                                                unset($params['package_type']);
                                                if (array_key_exists('package_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                                }
                                                $arguments['package_name'] = $params['package_name'];
                                                unset($params['package_name']);
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('state', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: state');
                                                }
                                                $arguments['state'] = $params['state'];
                                                unset($params['state']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions();
                                                }
                                                $operation = new Operation\Packages\GetAllPackageVersionsForPackageOwnedByOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions::class], $arguments['package_type'], $arguments['package_name'], $arguments['org'], $arguments['page'], $arguments['per_page'], $arguments['state']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'teams') {
                                if ($pathChunks[4] == '{team_slug}') {
                                    if ($pathChunks[5] == 'discussions') {
                                        if ($pathChunks[6] == '{discussion_number}') {
                                            if ($call == 'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('team_slug', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                }
                                                $arguments['team_slug'] = $params['team_slug'];
                                                unset($params['team_slug']);
                                                if (array_key_exists('discussion_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                                }
                                                $arguments['discussion_number'] = $params['discussion_number'];
                                                unset($params['discussion_number']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb();
                                                }
                                                $operation = new Operation\Teams\GetDiscussionInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb::class], $arguments['org'], $arguments['team_slug'], $arguments['discussion_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamDiscussion {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'memberships') {
                                        if ($pathChunks[6] == '{username}') {
                                            if ($call == 'GET /orgs/{org}/teams/{team_slug}/memberships/{username}') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('team_slug', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                }
                                                $arguments['team_slug'] = $params['team_slug'];
                                                unset($params['team_slug']);
                                                if (array_key_exists('username', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: username');
                                                }
                                                $arguments['username'] = $params['username'];
                                                unset($params['username']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Memberships\CbUsernameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Memberships\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Memberships🌀CbUsernameRcb();
                                                }
                                                $operation = new Operation\Teams\GetMembershipForUserInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Memberships\CbUsernameRcb::class], $arguments['org'], $arguments['team_slug'], $arguments['username']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamMembership {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'projects') {
                                        if ($pathChunks[6] == '{project_id}') {
                                            if ($call == 'GET /orgs/{org}/teams/{team_slug}/projects/{project_id}') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('team_slug', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                }
                                                $arguments['team_slug'] = $params['team_slug'];
                                                unset($params['team_slug']);
                                                if (array_key_exists('project_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: project_id');
                                                }
                                                $arguments['project_id'] = $params['project_id'];
                                                unset($params['project_id']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Projects\CbProjectIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Projects\CbProjectIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Projects🌀CbProjectIdRcb();
                                                }
                                                $operation = new Operation\Teams\CheckPermissionsForProjectInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Projects\CbProjectIdRcb::class], $arguments['org'], $arguments['team_slug'], $arguments['project_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamProject {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'required_workflows') {
                                        if ($pathChunks[6] == '{required_workflow_id_for_repo}') {
                                            if ($call == 'GET /repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('required_workflow_id_for_repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: required_workflow_id_for_repo');
                                                }
                                                $arguments['required_workflow_id_for_repo'] = $params['required_workflow_id_for_repo'];
                                                unset($params['required_workflow_id_for_repo']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOrgRcb\CbRepoRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdForRepoRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOrgRcb\CbRepoRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdForRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOrgRcb🌀CbRepoRcb🌀Actions🌀RequiredWorkflows🌀CbRequiredWorkflowIdForRepoRcb();
                                                }
                                                $operation = new Operation\Actions\GetRepoRequiredWorkflow($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOrgRcb\CbRepoRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdForRepoRcb::class], $arguments['org'], $arguments['repo'], $arguments['required_workflow_id_for_repo']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\RepoRequiredWorkflow {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        } elseif ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'artifacts') {
                                        if ($pathChunks[6] == '{artifact_id}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('artifact_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: artifact_id');
                                                }
                                                $arguments['artifact_id'] = $params['artifact_id'];
                                                unset($params['artifact_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts\CbArtifactIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts\CbArtifactIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Artifacts🌀CbArtifactIdRcb();
                                                }
                                                $operation = new Operation\Actions\GetArtifact($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts\CbArtifactIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['artifact_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Artifact {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'cache') {
                                        if ($pathChunks[6] == 'usage') {
                                            if ($call == 'GET /repos/{owner}/{repo}/actions/cache/usage') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Cache\Usage::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Cache\Usage::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Cache🌀Usage();
                                                }
                                                $operation = new Operation\Actions\GetActionsCacheUsage($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Cache\Usage::class], $arguments['owner'], $arguments['repo']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ActionsCacheUsageByRepository {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'jobs') {
                                        if ($pathChunks[6] == '{job_id}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/actions/jobs/{job_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('job_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: job_id');
                                                }
                                                $arguments['job_id'] = $params['job_id'];
                                                unset($params['job_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Jobs\CbJobIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Jobs\CbJobIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Jobs🌀CbJobIdRcb();
                                                }
                                                $operation = new Operation\Actions\GetJobForWorkflowRun($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Jobs\CbJobIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['job_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Job {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'permissions') {
                                        if ($pathChunks[6] == 'access') {
                                            if ($call == 'GET /repos/{owner}/{repo}/actions/permissions/access') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions\Access::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions\Access::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Permissions🌀Access();
                                                }
                                                $operation = new Operation\Actions\GetWorkflowAccessToRepository($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions\Access::class], $arguments['owner'], $arguments['repo']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ActionsWorkflowAccessToRepository {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'selected-actions') {
                                            if ($call == 'GET /repos/{owner}/{repo}/actions/permissions/selected-actions') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions\SelectedActions::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions\SelectedActions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Permissions🌀SelectedActions();
                                                }
                                                $operation = new Operation\Actions\GetAllowedActionsRepository($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions\SelectedActions::class], $arguments['owner'], $arguments['repo']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\SelectedActions {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'workflow') {
                                            if ($call == 'GET /repos/{owner}/{repo}/actions/permissions/workflow') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions\Workflow::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions\Workflow::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Permissions🌀Workflow();
                                                }
                                                $operation = new Operation\Actions\GetGithubActionsDefaultWorkflowPermissionsRepository($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions\Workflow::class], $arguments['owner'], $arguments['repo']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ActionsGetDefaultWorkflowPermissions {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'runners') {
                                        if ($pathChunks[6] == 'downloads') {
                                            if ($call == 'GET /repos/{owner}/{repo}/actions/runners/downloads') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\Downloads::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\Downloads::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners🌀Downloads();
                                                }
                                                $operation = new Operation\Actions\ListRunnerApplicationsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\Downloads::class], $arguments['owner'], $arguments['repo']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == '{runner_id}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/actions/runners/{runner_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('runner_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: runner_id');
                                                }
                                                $arguments['runner_id'] = $params['runner_id'];
                                                unset($params['runner_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners🌀CbRunnerIdRcb();
                                                }
                                                $operation = new Operation\Actions\GetSelfHostedRunnerForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['runner_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Runner {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'runs') {
                                        if ($pathChunks[6] == '{run_id}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/actions/runs/{run_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('run_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: run_id');
                                                }
                                                $arguments['run_id'] = $params['run_id'];
                                                unset($params['run_id']);
                                                if (array_key_exists('exclude_pull_requests', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: exclude_pull_requests');
                                                }
                                                $arguments['exclude_pull_requests'] = $params['exclude_pull_requests'];
                                                unset($params['exclude_pull_requests']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb();
                                                }
                                                $operation = new Operation\Actions\GetWorkflowRun($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['run_id'], $arguments['exclude_pull_requests']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\WorkflowRun {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'secrets') {
                                        if ($pathChunks[6] == 'public-key') {
                                            if ($call == 'GET /repos/{owner}/{repo}/actions/secrets/public-key') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets\PublicKey::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets\PublicKey::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Secrets🌀PublicKey();
                                                }
                                                $operation = new Operation\Actions\GetRepoPublicKey($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets\PublicKey::class], $arguments['owner'], $arguments['repo']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ActionsPublicKey {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == '{secret_name}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/actions/secrets/{secret_name}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Secrets🌀CbSecretNameRcb();
                                                }
                                                $operation = new Operation\Actions\GetRepoSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets\CbSecretNameRcb::class], $arguments['owner'], $arguments['repo'], $arguments['secret_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ActionsSecret {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'variables') {
                                        if ($pathChunks[6] == '{name}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/actions/variables/{name}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: name');
                                                }
                                                $arguments['name'] = $params['name'];
                                                unset($params['name']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Variables\CbNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Variables\CbNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Variables🌀CbNameRcb();
                                                }
                                                $operation = new Operation\Actions\GetRepoVariable($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Variables\CbNameRcb::class], $arguments['owner'], $arguments['repo'], $arguments['name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ActionsVariable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'workflows') {
                                        if ($pathChunks[6] == '{workflow_id}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('workflow_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: workflow_id');
                                                }
                                                $arguments['workflow_id'] = $params['workflow_id'];
                                                unset($params['workflow_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows\CbWorkflowIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows\CbWorkflowIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Workflows🌀CbWorkflowIdRcb();
                                                }
                                                $operation = new Operation\Actions\GetWorkflow($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows\CbWorkflowIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['workflow_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Workflow {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'branches') {
                                    if ($pathChunks[5] == '{branch}') {
                                        if ($pathChunks[6] == 'protection') {
                                            if ($call == 'GET /repos/{owner}/{repo}/branches/{branch}/protection') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('branch', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                }
                                                $arguments['branch'] = $params['branch'];
                                                unset($params['branch']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection();
                                                }
                                                $operation = new Operation\Repos\GetBranchProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\BranchProtection {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'check-runs') {
                                    if ($pathChunks[5] == '{check_run_id}') {
                                        if ($pathChunks[6] == 'annotations') {
                                            if ($call == 'GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('check_run_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: check_run_id');
                                                }
                                                $arguments['check_run_id'] = $params['check_run_id'];
                                                unset($params['check_run_id']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb\Annotations::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb\Annotations::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckDashRuns🌀CbCheckRunIdRcb🌀Annotations();
                                                }
                                                $operation = new Operation\Checks\ListAnnotations($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb\Annotations::class], $arguments['owner'], $arguments['repo'], $arguments['check_run_id'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'check-suites') {
                                    if ($pathChunks[5] == '{check_suite_id}') {
                                        if ($pathChunks[6] == 'check-runs') {
                                            if ($call == 'GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('check_suite_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: check_suite_id');
                                                }
                                                $arguments['check_suite_id'] = $params['check_suite_id'];
                                                unset($params['check_suite_id']);
                                                if (array_key_exists('check_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: check_name');
                                                }
                                                $arguments['check_name'] = $params['check_name'];
                                                unset($params['check_name']);
                                                if (array_key_exists('status', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: status');
                                                }
                                                $arguments['status'] = $params['status'];
                                                unset($params['status']);
                                                if (array_key_exists('filter', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: filter');
                                                }
                                                $arguments['filter'] = $params['filter'];
                                                unset($params['filter']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashSuites\CbCheckSuiteIdRcb\CheckDashRuns::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashSuites\CbCheckSuiteIdRcb\CheckDashRuns::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckDashSuites🌀CbCheckSuiteIdRcb🌀CheckDashRuns();
                                                }
                                                $operation = new Operation\Checks\ListForSuite($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashSuites\CbCheckSuiteIdRcb\CheckDashRuns::class], $arguments['owner'], $arguments['repo'], $arguments['check_suite_id'], $arguments['check_name'], $arguments['status'], $arguments['filter'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Checks\ListForSuite\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'code-scanning') {
                                    if ($pathChunks[5] == 'alerts') {
                                        if ($pathChunks[6] == '{alert_number}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('alert_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: alert_number');
                                                }
                                                $arguments['alert_number'] = $params['alert_number'];
                                                unset($params['alert_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Alerts\CbAlertNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Alerts\CbAlertNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeDashScanning🌀Alerts🌀CbAlertNumberRcb();
                                                }
                                                $operation = new Operation\CodeScanning\GetAlert($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Alerts\CbAlertNumberRcb::class], $arguments['owner'], $arguments['repo'], $arguments['alert_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CodeScanningAlert {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'analyses') {
                                        if ($pathChunks[6] == '{analysis_id}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('analysis_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: analysis_id');
                                                }
                                                $arguments['analysis_id'] = $params['analysis_id'];
                                                unset($params['analysis_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Analyses\CbAnalysisIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Analyses\CbAnalysisIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeDashScanning🌀Analyses🌀CbAnalysisIdRcb();
                                                }
                                                $operation = new Operation\CodeScanning\GetAnalysis($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Analyses\CbAnalysisIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['analysis_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CodeScanningAnalysis|\ApiClients\Client\Github\Schema\Operation\CodeScanning\GetAnalysis\Response\ApplicationjsonPlusSarif\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'codeql') {
                                        if ($pathChunks[6] == 'databases') {
                                            if ($call == 'GET /repos/{owner}/{repo}/code-scanning/codeql/databases') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Codeql\Databases::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Codeql\Databases::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeScanning🌀Codeql🌀Databases();
                                                }
                                                $operation = new Operation\CodeScanning\ListCodeqlDatabases($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Codeql\Databases::class], $arguments['owner'], $arguments['repo']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'sarifs') {
                                        if ($pathChunks[6] == '{sarif_id}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('sarif_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: sarif_id');
                                                }
                                                $arguments['sarif_id'] = $params['sarif_id'];
                                                unset($params['sarif_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Sarifs\CbSarifIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Sarifs\CbSarifIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeDashScanning🌀Sarifs🌀CbSarifIdRcb();
                                                }
                                                $operation = new Operation\CodeScanning\GetSarif($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Sarifs\CbSarifIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['sarif_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CodeScanningSarifsStatus {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'codespaces') {
                                    if ($pathChunks[5] == 'secrets') {
                                        if ($pathChunks[6] == 'public-key') {
                                            if ($call == 'GET /repos/{owner}/{repo}/codespaces/secrets/public-key') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets\PublicKey::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets\PublicKey::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codespaces🌀Secrets🌀PublicKey();
                                                }
                                                $operation = new Operation\Codespaces\GetRepoPublicKey($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets\PublicKey::class], $arguments['owner'], $arguments['repo']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CodespacesPublicKey {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == '{secret_name}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codespaces🌀Secrets🌀CbSecretNameRcb();
                                                }
                                                $operation = new Operation\Codespaces\GetRepoSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets\CbSecretNameRcb::class], $arguments['owner'], $arguments['repo'], $arguments['secret_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\RepoCodespacesSecret {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'collaborators') {
                                    if ($pathChunks[5] == '{username}') {
                                        if ($pathChunks[6] == 'permission') {
                                            if ($call == 'GET /repos/{owner}/{repo}/collaborators/{username}/permission') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('username', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: username');
                                                }
                                                $arguments['username'] = $params['username'];
                                                unset($params['username']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Collaborators\CbUsernameRcb\Permission::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Collaborators\CbUsernameRcb\Permission::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Collaborators🌀CbUsernameRcb🌀Permission();
                                                }
                                                $operation = new Operation\Repos\GetCollaboratorPermissionLevel($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Collaborators\CbUsernameRcb\Permission::class], $arguments['owner'], $arguments['repo'], $arguments['username']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\RepositoryCollaboratorPermission {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'comments') {
                                    if ($pathChunks[5] == '{comment_id}') {
                                        if ($pathChunks[6] == 'reactions') {
                                            if ($call == 'GET /repos/{owner}/{repo}/comments/{comment_id}/reactions') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('comment_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                                }
                                                $arguments['comment_id'] = $params['comment_id'];
                                                unset($params['comment_id']);
                                                if (array_key_exists('content', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: content');
                                                }
                                                $arguments['content'] = $params['content'];
                                                unset($params['content']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb\Reactions::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Comments🌀CbCommentIdRcb🌀Reactions();
                                                }
                                                $operation = new Operation\Reactions\ListForCommitComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb\Reactions::class], $arguments['owner'], $arguments['repo'], $arguments['comment_id'], $arguments['content'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'commits') {
                                    if ($pathChunks[5] == '{commit_sha}') {
                                        if ($pathChunks[6] == 'branches-where-head') {
                                            if ($call == 'GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('commit_sha', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: commit_sha');
                                                }
                                                $arguments['commit_sha'] = $params['commit_sha'];
                                                unset($params['commit_sha']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\BranchesDashWhereDashHead::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\BranchesDashWhereDashHead::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits🌀CbCommitShaRcb🌀BranchesDashWhereDashHead();
                                                }
                                                $operation = new Operation\Repos\ListBranchesForHeadCommit($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\BranchesDashWhereDashHead::class], $arguments['owner'], $arguments['repo'], $arguments['commit_sha']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'comments') {
                                            if ($call == 'GET /repos/{owner}/{repo}/commits/{commit_sha}/comments') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('commit_sha', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: commit_sha');
                                                }
                                                $arguments['commit_sha'] = $params['commit_sha'];
                                                unset($params['commit_sha']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\Comments::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits🌀CbCommitShaRcb🌀Comments();
                                                }
                                                $operation = new Operation\Repos\ListCommentsForCommit($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\Comments::class], $arguments['owner'], $arguments['repo'], $arguments['commit_sha'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'pulls') {
                                            if ($call == 'GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('commit_sha', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: commit_sha');
                                                }
                                                $arguments['commit_sha'] = $params['commit_sha'];
                                                unset($params['commit_sha']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\Pulls::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\Pulls::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits🌀CbCommitShaRcb🌀Pulls();
                                                }
                                                $operation = new Operation\Repos\ListPullRequestsAssociatedWithCommit($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\Pulls::class], $arguments['owner'], $arguments['repo'], $arguments['commit_sha'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == '{ref}') {
                                        if ($pathChunks[6] == 'check-runs') {
                                            if ($call == 'GET /repos/{owner}/{repo}/commits/{ref}/check-runs') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('ref', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: ref');
                                                }
                                                $arguments['ref'] = $params['ref'];
                                                unset($params['ref']);
                                                if (array_key_exists('check_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: check_name');
                                                }
                                                $arguments['check_name'] = $params['check_name'];
                                                unset($params['check_name']);
                                                if (array_key_exists('status', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: status');
                                                }
                                                $arguments['status'] = $params['status'];
                                                unset($params['status']);
                                                if (array_key_exists('app_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: app_id');
                                                }
                                                $arguments['app_id'] = $params['app_id'];
                                                unset($params['app_id']);
                                                if (array_key_exists('filter', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: filter');
                                                }
                                                $arguments['filter'] = $params['filter'];
                                                unset($params['filter']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\CheckRuns::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\CheckRuns::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits🌀CbRefRcb🌀CheckRuns();
                                                }
                                                $operation = new Operation\Checks\ListForRef($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\CheckRuns::class], $arguments['owner'], $arguments['repo'], $arguments['ref'], $arguments['check_name'], $arguments['status'], $arguments['app_id'], $arguments['filter'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Checks\ListForRef\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'check-suites') {
                                            if ($call == 'GET /repos/{owner}/{repo}/commits/{ref}/check-suites') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('ref', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: ref');
                                                }
                                                $arguments['ref'] = $params['ref'];
                                                unset($params['ref']);
                                                if (array_key_exists('app_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: app_id');
                                                }
                                                $arguments['app_id'] = $params['app_id'];
                                                unset($params['app_id']);
                                                if (array_key_exists('check_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: check_name');
                                                }
                                                $arguments['check_name'] = $params['check_name'];
                                                unset($params['check_name']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\CheckSuites::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\CheckSuites::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits🌀CbRefRcb🌀CheckSuites();
                                                }
                                                $operation = new Operation\Checks\ListSuitesForRef($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\CheckSuites::class], $arguments['owner'], $arguments['repo'], $arguments['ref'], $arguments['app_id'], $arguments['check_name'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Checks\ListSuitesForRef\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'status') {
                                            if ($call == 'GET /repos/{owner}/{repo}/commits/{ref}/status') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('ref', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: ref');
                                                }
                                                $arguments['ref'] = $params['ref'];
                                                unset($params['ref']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\Status::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\Status::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits🌀CbRefRcb🌀Status();
                                                }
                                                $operation = new Operation\Repos\GetCombinedStatusForRef($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\Status::class], $arguments['owner'], $arguments['repo'], $arguments['ref'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CombinedCommitStatus {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'statuses') {
                                            if ($call == 'GET /repos/{owner}/{repo}/commits/{ref}/statuses') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('ref', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: ref');
                                                }
                                                $arguments['ref'] = $params['ref'];
                                                unset($params['ref']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\Statuses::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\Statuses::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits🌀CbRefRcb🌀Statuses();
                                                }
                                                $operation = new Operation\Repos\ListCommitStatusesForRef($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\Statuses::class], $arguments['owner'], $arguments['repo'], $arguments['ref'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable|\ApiClients\Client\Github\Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'dependabot') {
                                    if ($pathChunks[5] == 'alerts') {
                                        if ($pathChunks[6] == '{alert_number}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('alert_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: alert_number');
                                                }
                                                $arguments['alert_number'] = $params['alert_number'];
                                                unset($params['alert_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Alerts\CbAlertNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Alerts\CbAlertNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Dependabot🌀Alerts🌀CbAlertNumberRcb();
                                                }
                                                $operation = new Operation\Dependabot\GetAlert($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Alerts\CbAlertNumberRcb::class], $arguments['owner'], $arguments['repo'], $arguments['alert_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\DependabotAlert {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'secrets') {
                                        if ($pathChunks[6] == 'public-key') {
                                            if ($call == 'GET /repos/{owner}/{repo}/dependabot/secrets/public-key') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets\PublicKey::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets\PublicKey::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Dependabot🌀Secrets🌀PublicKey();
                                                }
                                                $operation = new Operation\Dependabot\GetRepoPublicKey($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets\PublicKey::class], $arguments['owner'], $arguments['repo']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\DependabotPublicKey {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == '{secret_name}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Dependabot🌀Secrets🌀CbSecretNameRcb();
                                                }
                                                $operation = new Operation\Dependabot\GetRepoSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets\CbSecretNameRcb::class], $arguments['owner'], $arguments['repo'], $arguments['secret_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\DependabotSecret {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'dependency-graph') {
                                    if ($pathChunks[5] == 'compare') {
                                        if ($pathChunks[6] == '{basehead}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('basehead', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: basehead');
                                                }
                                                $arguments['basehead'] = $params['basehead'];
                                                unset($params['basehead']);
                                                if (array_key_exists('name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: name');
                                                }
                                                $arguments['name'] = $params['name'];
                                                unset($params['name']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\DependencyGraph\Compare\CbBaseheadRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\DependencyGraph\Compare\CbBaseheadRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀DependencyGraph🌀Compare🌀CbBaseheadRcb();
                                                }
                                                $operation = new Operation\DependencyGraph\DiffRange($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\DependencyGraph\Compare\CbBaseheadRcb::class], $arguments['owner'], $arguments['repo'], $arguments['basehead'], $arguments['name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'deployments') {
                                    if ($pathChunks[5] == '{deployment_id}') {
                                        if ($pathChunks[6] == 'statuses') {
                                            if ($call == 'GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('deployment_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: deployment_id');
                                                }
                                                $arguments['deployment_id'] = $params['deployment_id'];
                                                unset($params['deployment_id']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb\Statuses::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb\Statuses::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Deployments🌀CbDeploymentIdRcb🌀Statuses();
                                                }
                                                $operation = new Operation\Repos\ListDeploymentStatuses($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb\Statuses::class], $arguments['owner'], $arguments['repo'], $arguments['deployment_id'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'environments') {
                                    if ($pathChunks[5] == '{environment_name}') {
                                        if ($pathChunks[6] == 'deployment-branch-policies') {
                                            if ($call == 'GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('environment_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: environment_name');
                                                }
                                                $arguments['environment_name'] = $params['environment_name'];
                                                unset($params['environment_name']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Environments🌀CbEnvironmentNameRcb🌀DeploymentDashBranchDashPolicies();
                                                }
                                                $operation = new Operation\Repos\ListDeploymentBranchPolicies($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies::class], $arguments['owner'], $arguments['repo'], $arguments['environment_name'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Repos\ListDeploymentBranchPolicies\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'git') {
                                    if ($pathChunks[5] == 'blobs') {
                                        if ($pathChunks[6] == '{file_sha}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/git/blobs/{file_sha}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('file_sha', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: file_sha');
                                                }
                                                $arguments['file_sha'] = $params['file_sha'];
                                                unset($params['file_sha']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Blobs\CbFileShaRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Blobs\CbFileShaRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Blobs🌀CbFileShaRcb();
                                                }
                                                $operation = new Operation\Git\GetBlob($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Blobs\CbFileShaRcb::class], $arguments['owner'], $arguments['repo'], $arguments['file_sha']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Blob {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'commits') {
                                        if ($pathChunks[6] == '{commit_sha}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/git/commits/{commit_sha}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('commit_sha', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: commit_sha');
                                                }
                                                $arguments['commit_sha'] = $params['commit_sha'];
                                                unset($params['commit_sha']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Commits\CbCommitShaRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Commits\CbCommitShaRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Commits🌀CbCommitShaRcb();
                                                }
                                                $operation = new Operation\Git\GetCommit($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Commits\CbCommitShaRcb::class], $arguments['owner'], $arguments['repo'], $arguments['commit_sha']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\GitCommit {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'matching-refs') {
                                        if ($pathChunks[6] == '{ref}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/git/matching-refs/{ref}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('ref', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: ref');
                                                }
                                                $arguments['ref'] = $params['ref'];
                                                unset($params['ref']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\MatchingRefs\CbRefRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\MatchingRefs\CbRefRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀MatchingRefs🌀CbRefRcb();
                                                }
                                                $operation = new Operation\Git\ListMatchingRefs($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\MatchingRefs\CbRefRcb::class], $arguments['owner'], $arguments['repo'], $arguments['ref']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'ref') {
                                        if ($pathChunks[6] == '{ref}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/git/ref/{ref}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('ref', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: ref');
                                                }
                                                $arguments['ref'] = $params['ref'];
                                                unset($params['ref']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Ref\CbRefRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Ref\CbRefRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Ref🌀CbRefRcb();
                                                }
                                                $operation = new Operation\Git\GetRef($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Ref\CbRefRcb::class], $arguments['owner'], $arguments['repo'], $arguments['ref']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\GitRef {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'tags') {
                                        if ($pathChunks[6] == '{tag_sha}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/git/tags/{tag_sha}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('tag_sha', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: tag_sha');
                                                }
                                                $arguments['tag_sha'] = $params['tag_sha'];
                                                unset($params['tag_sha']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Tags\CbTagShaRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Tags\CbTagShaRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Tags🌀CbTagShaRcb();
                                                }
                                                $operation = new Operation\Git\GetTag($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Tags\CbTagShaRcb::class], $arguments['owner'], $arguments['repo'], $arguments['tag_sha']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\GitTag {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'trees') {
                                        if ($pathChunks[6] == '{tree_sha}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/git/trees/{tree_sha}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('tree_sha', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: tree_sha');
                                                }
                                                $arguments['tree_sha'] = $params['tree_sha'];
                                                unset($params['tree_sha']);
                                                if (array_key_exists('recursive', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: recursive');
                                                }
                                                $arguments['recursive'] = $params['recursive'];
                                                unset($params['recursive']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Trees\CbTreeShaRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Trees\CbTreeShaRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Trees🌀CbTreeShaRcb();
                                                }
                                                $operation = new Operation\Git\GetTree($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Trees\CbTreeShaRcb::class], $arguments['owner'], $arguments['repo'], $arguments['tree_sha'], $arguments['recursive']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\GitTree {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'hooks') {
                                    if ($pathChunks[5] == '{hook_id}') {
                                        if ($pathChunks[6] == 'config') {
                                            if ($call == 'GET /repos/{owner}/{repo}/hooks/{hook_id}/config') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('hook_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: hook_id');
                                                }
                                                $arguments['hook_id'] = $params['hook_id'];
                                                unset($params['hook_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Config::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Config::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb🌀Config();
                                                }
                                                $operation = new Operation\Repos\GetWebhookConfigForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Config::class], $arguments['owner'], $arguments['repo'], $arguments['hook_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\WebhookConfig {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'deliveries') {
                                            if ($call == 'GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('hook_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: hook_id');
                                                }
                                                $arguments['hook_id'] = $params['hook_id'];
                                                unset($params['hook_id']);
                                                if (array_key_exists('cursor', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: cursor');
                                                }
                                                $arguments['cursor'] = $params['cursor'];
                                                unset($params['cursor']);
                                                if (array_key_exists('redelivery', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: redelivery');
                                                }
                                                $arguments['redelivery'] = $params['redelivery'];
                                                unset($params['redelivery']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Deliveries::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Deliveries::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb🌀Deliveries();
                                                }
                                                $operation = new Operation\Repos\ListWebhookDeliveries($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Deliveries::class], $arguments['owner'], $arguments['repo'], $arguments['hook_id'], $arguments['cursor'], $arguments['redelivery'], $arguments['per_page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'issues') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($pathChunks[6] == '{comment_id}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/issues/comments/{comment_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('comment_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                                }
                                                $arguments['comment_id'] = $params['comment_id'];
                                                unset($params['comment_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀Comments🌀CbCommentIdRcb();
                                                }
                                                $operation = new Operation\Issues\GetComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['comment_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\IssueComment {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'events') {
                                        if ($pathChunks[6] == '{event_id}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/issues/events/{event_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('event_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: event_id');
                                                }
                                                $arguments['event_id'] = $params['event_id'];
                                                unset($params['event_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Events\CbEventIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Events\CbEventIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀Events🌀CbEventIdRcb();
                                                }
                                                $operation = new Operation\Issues\GetEvent($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Events\CbEventIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['event_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\IssueEvent {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == '{issue_number}') {
                                        if ($pathChunks[6] == 'comments') {
                                            if ($call == 'GET /repos/{owner}/{repo}/issues/{issue_number}/comments') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('issue_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: issue_number');
                                                }
                                                $arguments['issue_number'] = $params['issue_number'];
                                                unset($params['issue_number']);
                                                if (array_key_exists('since', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: since');
                                                }
                                                $arguments['since'] = $params['since'];
                                                unset($params['since']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Comments::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Comments();
                                                }
                                                $operation = new Operation\Issues\ListComments($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Comments::class], $arguments['owner'], $arguments['repo'], $arguments['issue_number'], $arguments['since'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'events') {
                                            if ($call == 'GET /repos/{owner}/{repo}/issues/{issue_number}/events') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('issue_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: issue_number');
                                                }
                                                $arguments['issue_number'] = $params['issue_number'];
                                                unset($params['issue_number']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Events::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Events::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Events();
                                                }
                                                $operation = new Operation\Issues\ListEvents($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Events::class], $arguments['owner'], $arguments['repo'], $arguments['issue_number'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'labels') {
                                            if ($call == 'GET /repos/{owner}/{repo}/issues/{issue_number}/labels') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('issue_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: issue_number');
                                                }
                                                $arguments['issue_number'] = $params['issue_number'];
                                                unset($params['issue_number']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Labels();
                                                }
                                                $operation = new Operation\Issues\ListLabelsOnIssue($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class], $arguments['owner'], $arguments['repo'], $arguments['issue_number'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable|\ApiClients\Client\Github\Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'reactions') {
                                            if ($call == 'GET /repos/{owner}/{repo}/issues/{issue_number}/reactions') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('issue_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: issue_number');
                                                }
                                                $arguments['issue_number'] = $params['issue_number'];
                                                unset($params['issue_number']);
                                                if (array_key_exists('content', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: content');
                                                }
                                                $arguments['content'] = $params['content'];
                                                unset($params['content']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Reactions();
                                                }
                                                $operation = new Operation\Reactions\ListForIssue($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Reactions::class], $arguments['owner'], $arguments['repo'], $arguments['issue_number'], $arguments['content'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'timeline') {
                                            if ($call == 'GET /repos/{owner}/{repo}/issues/{issue_number}/timeline') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('issue_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: issue_number');
                                                }
                                                $arguments['issue_number'] = $params['issue_number'];
                                                unset($params['issue_number']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Timeline::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Timeline::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Timeline();
                                                }
                                                $operation = new Operation\Issues\ListEventsForTimeline($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Timeline::class], $arguments['owner'], $arguments['repo'], $arguments['issue_number'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'milestones') {
                                    if ($pathChunks[5] == '{milestone_number}') {
                                        if ($pathChunks[6] == 'labels') {
                                            if ($call == 'GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('milestone_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: milestone_number');
                                                }
                                                $arguments['milestone_number'] = $params['milestone_number'];
                                                unset($params['milestone_number']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Milestones🌀CbMilestoneNumberRcb🌀Labels();
                                                }
                                                $operation = new Operation\Issues\ListLabelsForMilestone($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb\Labels::class], $arguments['owner'], $arguments['repo'], $arguments['milestone_number'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'pages') {
                                    if ($pathChunks[5] == 'builds') {
                                        if ($pathChunks[6] == 'latest') {
                                            if ($call == 'GET /repos/{owner}/{repo}/pages/builds/latest') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds\Latest::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds\Latest::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages🌀Builds🌀Latest();
                                                }
                                                $operation = new Operation\Repos\GetLatestPagesBuild($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds\Latest::class], $arguments['owner'], $arguments['repo']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PageBuild {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == '{build_id}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/pages/builds/{build_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('build_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: build_id');
                                                }
                                                $arguments['build_id'] = $params['build_id'];
                                                unset($params['build_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds\CbBuildIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds\CbBuildIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages🌀Builds🌀CbBuildIdRcb();
                                                }
                                                $operation = new Operation\Repos\GetPagesBuild($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds\CbBuildIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['build_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PageBuild {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'pulls') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($pathChunks[6] == '{comment_id}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/pulls/comments/{comment_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('comment_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                                }
                                                $arguments['comment_id'] = $params['comment_id'];
                                                unset($params['comment_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀Comments🌀CbCommentIdRcb();
                                                }
                                                $operation = new Operation\Pulls\GetReviewComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['comment_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PullRequestReviewComment {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == '{pull_number}') {
                                        if ($pathChunks[6] == 'comments') {
                                            if ($call == 'GET /repos/{owner}/{repo}/pulls/{pull_number}/comments') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('pull_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                }
                                                $arguments['pull_number'] = $params['pull_number'];
                                                unset($params['pull_number']);
                                                if (array_key_exists('direction', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: direction');
                                                }
                                                $arguments['direction'] = $params['direction'];
                                                unset($params['direction']);
                                                if (array_key_exists('since', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: since');
                                                }
                                                $arguments['since'] = $params['since'];
                                                unset($params['since']);
                                                if (array_key_exists('sort', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: sort');
                                                }
                                                $arguments['sort'] = $params['sort'];
                                                unset($params['sort']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Comments::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Comments();
                                                }
                                                $operation = new Operation\Pulls\ListReviewComments($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Comments::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number'], $arguments['direction'], $arguments['since'], $arguments['sort'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'commits') {
                                            if ($call == 'GET /repos/{owner}/{repo}/pulls/{pull_number}/commits') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('pull_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                }
                                                $arguments['pull_number'] = $params['pull_number'];
                                                unset($params['pull_number']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Commits::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Commits::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Commits();
                                                }
                                                $operation = new Operation\Pulls\ListCommits($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Commits::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'files') {
                                            if ($call == 'GET /repos/{owner}/{repo}/pulls/{pull_number}/files') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('pull_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                }
                                                $arguments['pull_number'] = $params['pull_number'];
                                                unset($params['pull_number']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Files::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Files::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Files();
                                                }
                                                $operation = new Operation\Pulls\ListFiles($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Files::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'merge') {
                                            if ($call == 'GET /repos/{owner}/{repo}/pulls/{pull_number}/merge') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('pull_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                }
                                                $arguments['pull_number'] = $params['pull_number'];
                                                unset($params['pull_number']);
                                                $operation = new Operation\Pulls\CheckIfMerged($arguments['owner'], $arguments['repo'], $arguments['pull_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'requested_reviewers') {
                                            if ($call == 'GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('pull_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                }
                                                $arguments['pull_number'] = $params['pull_number'];
                                                unset($params['pull_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\RequestedReviewers::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\RequestedReviewers::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀RequestedReviewers();
                                                }
                                                $operation = new Operation\Pulls\ListRequestedReviewers($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\RequestedReviewers::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PullRequestReviewRequest {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'reviews') {
                                            if ($call == 'GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('pull_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                }
                                                $arguments['pull_number'] = $params['pull_number'];
                                                unset($params['pull_number']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Reviews();
                                                }
                                                $operation = new Operation\Pulls\ListReviews($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'releases') {
                                    if ($pathChunks[5] == 'assets') {
                                        if ($pathChunks[6] == '{asset_id}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/releases/assets/{asset_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('asset_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: asset_id');
                                                }
                                                $arguments['asset_id'] = $params['asset_id'];
                                                unset($params['asset_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Assets\CbAssetIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Assets\CbAssetIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀Assets🌀CbAssetIdRcb();
                                                }
                                                $operation = new Operation\Repos\GetReleaseAsset($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Assets\CbAssetIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['asset_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ReleaseAsset {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'tags') {
                                        if ($pathChunks[6] == '{tag}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/releases/tags/{tag}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('tag', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: tag');
                                                }
                                                $arguments['tag'] = $params['tag'];
                                                unset($params['tag']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Tags\CbTagRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Tags\CbTagRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀Tags🌀CbTagRcb();
                                                }
                                                $operation = new Operation\Repos\GetReleaseByTag($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Tags\CbTagRcb::class], $arguments['owner'], $arguments['repo'], $arguments['tag']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Release {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == '{release_id}') {
                                        if ($pathChunks[6] == 'assets') {
                                            if ($call == 'GET /repos/{owner}/{repo}/releases/{release_id}/assets') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('release_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: release_id');
                                                }
                                                $arguments['release_id'] = $params['release_id'];
                                                unset($params['release_id']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Assets::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Assets::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀CbReleaseIdRcb🌀Assets();
                                                }
                                                $operation = new Operation\Repos\ListReleaseAssets($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Assets::class], $arguments['owner'], $arguments['repo'], $arguments['release_id'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'reactions') {
                                            if ($call == 'GET /repos/{owner}/{repo}/releases/{release_id}/reactions') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('release_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: release_id');
                                                }
                                                $arguments['release_id'] = $params['release_id'];
                                                unset($params['release_id']);
                                                if (array_key_exists('content', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: content');
                                                }
                                                $arguments['content'] = $params['content'];
                                                unset($params['content']);
                                                if (array_key_exists('per_page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                }
                                                $arguments['per_page'] = $params['per_page'];
                                                unset($params['per_page']);
                                                if (array_key_exists('page', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: page');
                                                }
                                                $arguments['page'] = $params['page'];
                                                unset($params['page']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Reactions::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀CbReleaseIdRcb🌀Reactions();
                                                }
                                                $operation = new Operation\Reactions\ListForRelease($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Reactions::class], $arguments['owner'], $arguments['repo'], $arguments['release_id'], $arguments['content'], $arguments['per_page'], $arguments['page']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'secret-scanning') {
                                    if ($pathChunks[5] == 'alerts') {
                                        if ($pathChunks[6] == '{alert_number}') {
                                            if ($call == 'GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('alert_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: alert_number');
                                                }
                                                $arguments['alert_number'] = $params['alert_number'];
                                                unset($params['alert_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretDashScanning\Alerts\CbAlertNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretDashScanning\Alerts\CbAlertNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀SecretDashScanning🌀Alerts🌀CbAlertNumberRcb();
                                                }
                                                $operation = new Operation\SecretScanning\GetAlert($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretDashScanning\Alerts\CbAlertNumberRcb::class], $arguments['owner'], $arguments['repo'], $arguments['alert_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\SecretScanningAlert {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'traffic') {
                                    if ($pathChunks[5] == 'popular') {
                                        if ($pathChunks[6] == 'paths') {
                                            if ($call == 'GET /repos/{owner}/{repo}/traffic/popular/paths') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Popular\Paths::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Popular\Paths::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Traffic🌀Popular🌀Paths();
                                                }
                                                $operation = new Operation\Repos\GetTopPaths($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Popular\Paths::class], $arguments['owner'], $arguments['repo']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'referrers') {
                                            if ($call == 'GET /repos/{owner}/{repo}/traffic/popular/referrers') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Popular\Referrers::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Popular\Referrers::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Traffic🌀Popular🌀Referrers();
                                                }
                                                $operation = new Operation\Repos\GetTopReferrers($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Popular\Referrers::class], $arguments['owner'], $arguments['repo']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repositories') {
                        if ($pathChunks[2] == '{repository_id}') {
                            if ($pathChunks[3] == 'environments') {
                                if ($pathChunks[4] == '{environment_name}') {
                                    if ($pathChunks[5] == 'secrets') {
                                        if ($pathChunks[6] == 'public-key') {
                                            if ($call == 'GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key') {
                                                $arguments = array();
                                                if (array_key_exists('repository_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                }
                                                $arguments['repository_id'] = $params['repository_id'];
                                                unset($params['repository_id']);
                                                if (array_key_exists('environment_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: environment_name');
                                                }
                                                $arguments['environment_name'] = $params['environment_name'];
                                                unset($params['environment_name']);
                                                if (\array_key_exists(Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets\PublicDashKey::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets\PublicDashKey::class] = $this->hydrators->getObjectMapperOperation🌀Repositories🌀CbRepositoryIdRcb🌀Environments🌀CbEnvironmentNameRcb🌀Secrets🌀PublicDashKey();
                                                }
                                                $operation = new Operation\Actions\GetEnvironmentPublicKey($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets\PublicDashKey::class], $arguments['repository_id'], $arguments['environment_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ActionsPublicKey {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == '{secret_name}') {
                                            if ($call == 'GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}') {
                                                $arguments = array();
                                                if (array_key_exists('repository_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                }
                                                $arguments['repository_id'] = $params['repository_id'];
                                                unset($params['repository_id']);
                                                if (array_key_exists('environment_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: environment_name');
                                                }
                                                $arguments['environment_name'] = $params['environment_name'];
                                                unset($params['environment_name']);
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                if (\array_key_exists(Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repositories🌀CbRepositoryIdRcb🌀Environments🌀CbEnvironmentNameRcb🌀Secrets🌀CbSecretNameRcb();
                                                }
                                                $operation = new Operation\Actions\GetEnvironmentSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets\CbSecretNameRcb::class], $arguments['repository_id'], $arguments['environment_name'], $arguments['secret_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ActionsSecret {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'variables') {
                                        if ($pathChunks[6] == '{name}') {
                                            if ($call == 'GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}') {
                                                $arguments = array();
                                                if (array_key_exists('repository_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                }
                                                $arguments['repository_id'] = $params['repository_id'];
                                                unset($params['repository_id']);
                                                if (array_key_exists('environment_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: environment_name');
                                                }
                                                $arguments['environment_name'] = $params['environment_name'];
                                                unset($params['environment_name']);
                                                if (array_key_exists('name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: name');
                                                }
                                                $arguments['name'] = $params['name'];
                                                unset($params['name']);
                                                if (\array_key_exists(Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Variables\CbNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Variables\CbNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repositories🌀CbRepositoryIdRcb🌀Environments🌀CbEnvironmentNameRcb🌀Variables🌀CbNameRcb();
                                                }
                                                $operation = new Operation\Actions\GetEnvironmentVariable($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Variables\CbNameRcb::class], $arguments['repository_id'], $arguments['environment_name'], $arguments['name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ActionsVariable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'teams') {
                        if ($pathChunks[2] == '{team_id}') {
                            if ($pathChunks[3] == 'discussions') {
                                if ($pathChunks[4] == '{discussion_number}') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($pathChunks[6] == '{comment_number}') {
                                            if ($call == 'GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}') {
                                                $arguments = array();
                                                if (array_key_exists('team_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                                }
                                                $arguments['team_id'] = $params['team_id'];
                                                unset($params['team_id']);
                                                if (array_key_exists('discussion_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                                }
                                                $arguments['discussion_number'] = $params['discussion_number'];
                                                unset($params['discussion_number']);
                                                if (array_key_exists('comment_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: comment_number');
                                                }
                                                $arguments['comment_number'] = $params['comment_number'];
                                                unset($params['comment_number']);
                                                if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments🌀CbCommentNumberRcb();
                                                }
                                                $operation = new Operation\Teams\GetDiscussionCommentLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class], $arguments['team_id'], $arguments['discussion_number'], $arguments['comment_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamDiscussionComment {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'packages') {
                            if ($pathChunks[3] == '{package_type}') {
                                if ($pathChunks[4] == '{package_name}') {
                                    if ($pathChunks[5] == 'versions') {
                                        if ($pathChunks[6] == '{package_version_id}') {
                                            if ($call == 'GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}') {
                                                $arguments = array();
                                                if (array_key_exists('package_type', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                                }
                                                $arguments['package_type'] = $params['package_type'];
                                                unset($params['package_type']);
                                                if (array_key_exists('package_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                                }
                                                $arguments['package_name'] = $params['package_name'];
                                                unset($params['package_name']);
                                                if (array_key_exists('package_version_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: package_version_id');
                                                }
                                                $arguments['package_version_id'] = $params['package_version_id'];
                                                unset($params['package_version_id']);
                                                if (\array_key_exists(Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions🌀CbPackageVersionIdRcb();
                                                }
                                                $operation = new Operation\Packages\GetPackageVersionForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class], $arguments['package_type'], $arguments['package_name'], $arguments['package_version_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PackageVersion {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'users') {
                        if ($pathChunks[2] == '{username}') {
                            if ($pathChunks[3] == 'packages') {
                                if ($pathChunks[4] == '{package_type}') {
                                    if ($pathChunks[5] == '{package_name}') {
                                        if ($pathChunks[6] == 'versions') {
                                            if ($call == 'GET /users/{username}/packages/{package_type}/{package_name}/versions') {
                                                $arguments = array();
                                                if (array_key_exists('package_type', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                                }
                                                $arguments['package_type'] = $params['package_type'];
                                                unset($params['package_type']);
                                                if (array_key_exists('package_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                                }
                                                $arguments['package_name'] = $params['package_name'];
                                                unset($params['package_name']);
                                                if (array_key_exists('username', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: username');
                                                }
                                                $arguments['username'] = $params['username'];
                                                unset($params['username']);
                                                if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions();
                                                }
                                                $operation = new Operation\Packages\GetAllPackageVersionsForPackageOwnedByUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions::class], $arguments['package_type'], $arguments['package_name'], $arguments['username']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 8) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'packages') {
                                if ($pathChunks[4] == '{package_type}') {
                                    if ($pathChunks[5] == '{package_name}') {
                                        if ($pathChunks[6] == 'versions') {
                                            if ($pathChunks[7] == '{package_version_id}') {
                                                if ($call == 'GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('package_type', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                                    }
                                                    $arguments['package_type'] = $params['package_type'];
                                                    unset($params['package_type']);
                                                    if (array_key_exists('package_name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                                    }
                                                    $arguments['package_name'] = $params['package_name'];
                                                    unset($params['package_name']);
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('package_version_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: package_version_id');
                                                    }
                                                    $arguments['package_version_id'] = $params['package_version_id'];
                                                    unset($params['package_version_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions🌀CbPackageVersionIdRcb();
                                                    }
                                                    $operation = new Operation\Packages\GetPackageVersionForOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class], $arguments['package_type'], $arguments['package_name'], $arguments['org'], $arguments['package_version_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PackageVersion {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'teams') {
                                if ($pathChunks[4] == '{team_slug}') {
                                    if ($pathChunks[5] == 'discussions') {
                                        if ($pathChunks[6] == '{discussion_number}') {
                                            if ($pathChunks[7] == 'comments') {
                                                if ($call == 'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('team_slug', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                    }
                                                    $arguments['team_slug'] = $params['team_slug'];
                                                    unset($params['team_slug']);
                                                    if (array_key_exists('discussion_number', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                                    }
                                                    $arguments['discussion_number'] = $params['discussion_number'];
                                                    unset($params['discussion_number']);
                                                    if (array_key_exists('direction', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: direction');
                                                    }
                                                    $arguments['direction'] = $params['direction'];
                                                    unset($params['direction']);
                                                    if (array_key_exists('per_page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                    }
                                                    $arguments['per_page'] = $params['per_page'];
                                                    unset($params['per_page']);
                                                    if (array_key_exists('page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                                    }
                                                    $arguments['page'] = $params['page'];
                                                    unset($params['page']);
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments();
                                                    }
                                                    $operation = new Operation\Teams\ListDiscussionCommentsInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments::class], $arguments['org'], $arguments['team_slug'], $arguments['discussion_number'], $arguments['direction'], $arguments['per_page'], $arguments['page']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'reactions') {
                                                if ($call == 'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('team_slug', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                    }
                                                    $arguments['team_slug'] = $params['team_slug'];
                                                    unset($params['team_slug']);
                                                    if (array_key_exists('discussion_number', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                                    }
                                                    $arguments['discussion_number'] = $params['discussion_number'];
                                                    unset($params['discussion_number']);
                                                    if (array_key_exists('content', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: content');
                                                    }
                                                    $arguments['content'] = $params['content'];
                                                    unset($params['content']);
                                                    if (array_key_exists('per_page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                    }
                                                    $arguments['per_page'] = $params['per_page'];
                                                    unset($params['per_page']);
                                                    if (array_key_exists('page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                                    }
                                                    $arguments['page'] = $params['page'];
                                                    unset($params['page']);
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Reactions();
                                                    }
                                                    $operation = new Operation\Reactions\ListForTeamDiscussionInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Reactions::class], $arguments['org'], $arguments['team_slug'], $arguments['discussion_number'], $arguments['content'], $arguments['per_page'], $arguments['page']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'repos') {
                                        if ($pathChunks[6] == '{owner}') {
                                            if ($pathChunks[7] == '{repo}') {
                                                if ($call == 'GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('team_slug', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                    }
                                                    $arguments['team_slug'] = $params['team_slug'];
                                                    unset($params['team_slug']);
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Repos\CbOwnerRcb\CbRepoRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Repos\CbOwnerRcb\CbRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Repos🌀CbOwnerRcb🌀CbRepoRcb();
                                                    }
                                                    $operation = new Operation\Teams\CheckPermissionsForRepoInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Repos\CbOwnerRcb\CbRepoRcb::class], $arguments['org'], $arguments['team_slug'], $arguments['owner'], $arguments['repo']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamRepository {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'required_workflows') {
                                        if ($pathChunks[6] == '{required_workflow_id_for_repo}') {
                                            if ($pathChunks[7] == 'timing') {
                                                if ($call == 'GET /repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('required_workflow_id_for_repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: required_workflow_id_for_repo');
                                                    }
                                                    $arguments['required_workflow_id_for_repo'] = $params['required_workflow_id_for_repo'];
                                                    unset($params['required_workflow_id_for_repo']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOrgRcb\CbRepoRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdForRepoRcb\Timing::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOrgRcb\CbRepoRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdForRepoRcb\Timing::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOrgRcb🌀CbRepoRcb🌀Actions🌀RequiredWorkflows🌀CbRequiredWorkflowIdForRepoRcb🌀Timing();
                                                    }
                                                    $operation = new Operation\Actions\GetRepoRequiredWorkflowUsage($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOrgRcb\CbRepoRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdForRepoRcb\Timing::class], $arguments['org'], $arguments['repo'], $arguments['required_workflow_id_for_repo']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\WorkflowUsage {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } elseif ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'artifacts') {
                                        if ($pathChunks[6] == '{artifact_id}') {
                                            if ($pathChunks[7] == '{archive_format}') {
                                                if ($call == 'GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('artifact_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: artifact_id');
                                                    }
                                                    $arguments['artifact_id'] = $params['artifact_id'];
                                                    unset($params['artifact_id']);
                                                    if (array_key_exists('archive_format', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: archive_format');
                                                    }
                                                    $arguments['archive_format'] = $params['archive_format'];
                                                    unset($params['archive_format']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts\CbArtifactIdRcb\CbArchiveFormatRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts\CbArtifactIdRcb\CbArchiveFormatRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Artifacts🌀CbArtifactIdRcb🌀CbArchiveFormatRcb();
                                                    }
                                                    $operation = new Operation\Actions\DownloadArtifact($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts\CbArtifactIdRcb\CbArchiveFormatRcb::class], $arguments['owner'], $arguments['repo'], $arguments['artifact_id'], $arguments['archive_format']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \array {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'jobs') {
                                        if ($pathChunks[6] == '{job_id}') {
                                            if ($pathChunks[7] == 'logs') {
                                                if ($call == 'GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('job_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: job_id');
                                                    }
                                                    $arguments['job_id'] = $params['job_id'];
                                                    unset($params['job_id']);
                                                    $operation = new Operation\Actions\DownloadJobLogsForWorkflowRun($arguments['owner'], $arguments['repo'], $arguments['job_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \array {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'oidc') {
                                        if ($pathChunks[6] == 'customization') {
                                            if ($pathChunks[7] == 'sub') {
                                                if ($call == 'GET /repos/{owner}/{repo}/actions/oidc/customization/sub') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Oidc\Customization\Sub::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Oidc\Customization\Sub::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Oidc🌀Customization🌀Sub();
                                                    }
                                                    $operation = new Operation\Actions\GetCustomOidcSubClaimForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Oidc\Customization\Sub::class], $arguments['owner'], $arguments['repo']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\OidcCustomSubRepo {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'required_workflows') {
                                        if ($pathChunks[6] == '{required_workflow_id_for_repo}') {
                                            if ($pathChunks[7] == 'runs') {
                                                if ($call == 'GET /repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('required_workflow_id_for_repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: required_workflow_id_for_repo');
                                                    }
                                                    $arguments['required_workflow_id_for_repo'] = $params['required_workflow_id_for_repo'];
                                                    unset($params['required_workflow_id_for_repo']);
                                                    if (array_key_exists('actor', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: actor');
                                                    }
                                                    $arguments['actor'] = $params['actor'];
                                                    unset($params['actor']);
                                                    if (array_key_exists('branch', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                    }
                                                    $arguments['branch'] = $params['branch'];
                                                    unset($params['branch']);
                                                    if (array_key_exists('event', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: event');
                                                    }
                                                    $arguments['event'] = $params['event'];
                                                    unset($params['event']);
                                                    if (array_key_exists('status', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: status');
                                                    }
                                                    $arguments['status'] = $params['status'];
                                                    unset($params['status']);
                                                    if (array_key_exists('created', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: created');
                                                    }
                                                    $arguments['created'] = $params['created'];
                                                    unset($params['created']);
                                                    if (array_key_exists('check_suite_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: check_suite_id');
                                                    }
                                                    $arguments['check_suite_id'] = $params['check_suite_id'];
                                                    unset($params['check_suite_id']);
                                                    if (array_key_exists('head_sha', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: head_sha');
                                                    }
                                                    $arguments['head_sha'] = $params['head_sha'];
                                                    unset($params['head_sha']);
                                                    if (array_key_exists('per_page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                    }
                                                    $arguments['per_page'] = $params['per_page'];
                                                    unset($params['per_page']);
                                                    if (array_key_exists('page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                                    }
                                                    $arguments['page'] = $params['page'];
                                                    unset($params['page']);
                                                    if (array_key_exists('exclude_pull_requests', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: exclude_pull_requests');
                                                    }
                                                    $arguments['exclude_pull_requests'] = $params['exclude_pull_requests'];
                                                    unset($params['exclude_pull_requests']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdForRepoRcb\Runs::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdForRepoRcb\Runs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀RequiredWorkflows🌀CbRequiredWorkflowIdForRepoRcb🌀Runs();
                                                    }
                                                    $operation = new Operation\Actions\ListRequiredWorkflowRuns($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdForRepoRcb\Runs::class], $arguments['owner'], $arguments['repo'], $arguments['required_workflow_id_for_repo'], $arguments['actor'], $arguments['branch'], $arguments['event'], $arguments['status'], $arguments['created'], $arguments['check_suite_id'], $arguments['head_sha'], $arguments['per_page'], $arguments['page'], $arguments['exclude_pull_requests']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListRequiredWorkflowRuns\Response\Applicationjson\H200 {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'runners') {
                                        if ($pathChunks[6] == '{runner_id}') {
                                            if ($pathChunks[7] == 'labels') {
                                                if ($call == 'GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('runner_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: runner_id');
                                                    }
                                                    $arguments['runner_id'] = $params['runner_id'];
                                                    unset($params['runner_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                    }
                                                    $operation = new Operation\Actions\ListLabelsForSelfHostedRunnerForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $arguments['owner'], $arguments['repo'], $arguments['runner_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200 {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'runs') {
                                        if ($pathChunks[6] == '{run_id}') {
                                            if ($pathChunks[7] == 'approvals') {
                                                if ($call == 'GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('run_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: run_id');
                                                    }
                                                    $arguments['run_id'] = $params['run_id'];
                                                    unset($params['run_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Approvals::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Approvals::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Approvals();
                                                    }
                                                    $operation = new Operation\Actions\GetReviewsForRun($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Approvals::class], $arguments['owner'], $arguments['repo'], $arguments['run_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'artifacts') {
                                                if ($call == 'GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('run_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: run_id');
                                                    }
                                                    $arguments['run_id'] = $params['run_id'];
                                                    unset($params['run_id']);
                                                    if (array_key_exists('per_page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                    }
                                                    $arguments['per_page'] = $params['per_page'];
                                                    unset($params['per_page']);
                                                    if (array_key_exists('page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                                    }
                                                    $arguments['page'] = $params['page'];
                                                    unset($params['page']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Artifacts::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Artifacts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Artifacts();
                                                    }
                                                    $operation = new Operation\Actions\ListWorkflowRunArtifacts($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Artifacts::class], $arguments['owner'], $arguments['repo'], $arguments['run_id'], $arguments['per_page'], $arguments['page']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListWorkflowRunArtifacts\Response\Applicationjson\H200 {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'jobs') {
                                                if ($call == 'GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('run_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: run_id');
                                                    }
                                                    $arguments['run_id'] = $params['run_id'];
                                                    unset($params['run_id']);
                                                    if (array_key_exists('filter', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: filter');
                                                    }
                                                    $arguments['filter'] = $params['filter'];
                                                    unset($params['filter']);
                                                    if (array_key_exists('per_page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                    }
                                                    $arguments['per_page'] = $params['per_page'];
                                                    unset($params['per_page']);
                                                    if (array_key_exists('page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                                    }
                                                    $arguments['page'] = $params['page'];
                                                    unset($params['page']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Jobs::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Jobs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Jobs();
                                                    }
                                                    $operation = new Operation\Actions\ListJobsForWorkflowRun($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Jobs::class], $arguments['owner'], $arguments['repo'], $arguments['run_id'], $arguments['filter'], $arguments['per_page'], $arguments['page']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListJobsForWorkflowRun\Response\Applicationjson\H200 {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'logs') {
                                                if ($call == 'GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('run_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: run_id');
                                                    }
                                                    $arguments['run_id'] = $params['run_id'];
                                                    unset($params['run_id']);
                                                    $operation = new Operation\Actions\DownloadWorkflowRunLogs($arguments['owner'], $arguments['repo'], $arguments['run_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \array {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'pending_deployments') {
                                                if ($call == 'GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('run_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: run_id');
                                                    }
                                                    $arguments['run_id'] = $params['run_id'];
                                                    unset($params['run_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\PendingDeployments::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\PendingDeployments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀PendingDeployments();
                                                    }
                                                    $operation = new Operation\Actions\GetPendingDeploymentsForRun($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\PendingDeployments::class], $arguments['owner'], $arguments['repo'], $arguments['run_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'timing') {
                                                if ($call == 'GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('run_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: run_id');
                                                    }
                                                    $arguments['run_id'] = $params['run_id'];
                                                    unset($params['run_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Timing::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Timing::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Timing();
                                                    }
                                                    $operation = new Operation\Actions\GetWorkflowRunUsage($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Timing::class], $arguments['owner'], $arguments['repo'], $arguments['run_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\WorkflowRunUsage {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'workflows') {
                                        if ($pathChunks[6] == '{workflow_id}') {
                                            if ($pathChunks[7] == 'runs') {
                                                if ($call == 'GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('workflow_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: workflow_id');
                                                    }
                                                    $arguments['workflow_id'] = $params['workflow_id'];
                                                    unset($params['workflow_id']);
                                                    if (array_key_exists('actor', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: actor');
                                                    }
                                                    $arguments['actor'] = $params['actor'];
                                                    unset($params['actor']);
                                                    if (array_key_exists('branch', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                    }
                                                    $arguments['branch'] = $params['branch'];
                                                    unset($params['branch']);
                                                    if (array_key_exists('event', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: event');
                                                    }
                                                    $arguments['event'] = $params['event'];
                                                    unset($params['event']);
                                                    if (array_key_exists('status', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: status');
                                                    }
                                                    $arguments['status'] = $params['status'];
                                                    unset($params['status']);
                                                    if (array_key_exists('created', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: created');
                                                    }
                                                    $arguments['created'] = $params['created'];
                                                    unset($params['created']);
                                                    if (array_key_exists('check_suite_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: check_suite_id');
                                                    }
                                                    $arguments['check_suite_id'] = $params['check_suite_id'];
                                                    unset($params['check_suite_id']);
                                                    if (array_key_exists('head_sha', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: head_sha');
                                                    }
                                                    $arguments['head_sha'] = $params['head_sha'];
                                                    unset($params['head_sha']);
                                                    if (array_key_exists('per_page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                    }
                                                    $arguments['per_page'] = $params['per_page'];
                                                    unset($params['per_page']);
                                                    if (array_key_exists('page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                                    }
                                                    $arguments['page'] = $params['page'];
                                                    unset($params['page']);
                                                    if (array_key_exists('exclude_pull_requests', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: exclude_pull_requests');
                                                    }
                                                    $arguments['exclude_pull_requests'] = $params['exclude_pull_requests'];
                                                    unset($params['exclude_pull_requests']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows\CbWorkflowIdRcb\Runs::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows\CbWorkflowIdRcb\Runs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Workflows🌀CbWorkflowIdRcb🌀Runs();
                                                    }
                                                    $operation = new Operation\Actions\ListWorkflowRuns($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows\CbWorkflowIdRcb\Runs::class], $arguments['owner'], $arguments['repo'], $arguments['workflow_id'], $arguments['actor'], $arguments['branch'], $arguments['event'], $arguments['status'], $arguments['created'], $arguments['check_suite_id'], $arguments['head_sha'], $arguments['per_page'], $arguments['page'], $arguments['exclude_pull_requests']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListWorkflowRuns\Response\Applicationjson\H200 {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'timing') {
                                                if ($call == 'GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('workflow_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: workflow_id');
                                                    }
                                                    $arguments['workflow_id'] = $params['workflow_id'];
                                                    unset($params['workflow_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows\CbWorkflowIdRcb\Timing::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows\CbWorkflowIdRcb\Timing::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Workflows🌀CbWorkflowIdRcb🌀Timing();
                                                    }
                                                    $operation = new Operation\Actions\GetWorkflowUsage($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows\CbWorkflowIdRcb\Timing::class], $arguments['owner'], $arguments['repo'], $arguments['workflow_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\WorkflowUsage {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'branches') {
                                    if ($pathChunks[5] == '{branch}') {
                                        if ($pathChunks[6] == 'protection') {
                                            if ($pathChunks[7] == 'enforce_admins') {
                                                if ($call == 'GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('branch', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                    }
                                                    $arguments['branch'] = $params['branch'];
                                                    unset($params['branch']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\EnforceAdmins::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\EnforceAdmins::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀EnforceAdmins();
                                                    }
                                                    $operation = new Operation\Repos\GetAdminBranchProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\EnforceAdmins::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ProtectedBranchAdminEnforced {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'required_pull_request_reviews') {
                                                if ($call == 'GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('branch', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                    }
                                                    $arguments['branch'] = $params['branch'];
                                                    unset($params['branch']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredPullRequestReviews::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredPullRequestReviews::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredPullRequestReviews();
                                                    }
                                                    $operation = new Operation\Repos\GetPullRequestReviewProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredPullRequestReviews::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ProtectedBranchPullRequestReview {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'required_signatures') {
                                                if ($call == 'GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('branch', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                    }
                                                    $arguments['branch'] = $params['branch'];
                                                    unset($params['branch']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredSignatures::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredSignatures::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredSignatures();
                                                    }
                                                    $operation = new Operation\Repos\GetCommitSignatureProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredSignatures::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ProtectedBranchAdminEnforced {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'required_status_checks') {
                                                if ($call == 'GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('branch', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                    }
                                                    $arguments['branch'] = $params['branch'];
                                                    unset($params['branch']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredStatusChecks();
                                                    }
                                                    $operation = new Operation\Repos\GetStatusChecksProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\StatusCheckPolicy {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'restrictions') {
                                                if ($call == 'GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('branch', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                    }
                                                    $arguments['branch'] = $params['branch'];
                                                    unset($params['branch']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions();
                                                    }
                                                    $operation = new Operation\Repos\GetAccessRestrictions($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\BranchRestrictionPolicy {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'code-scanning') {
                                    if ($pathChunks[5] == 'alerts') {
                                        if ($pathChunks[6] == '{alert_number}') {
                                            if ($pathChunks[7] == 'instances') {
                                                if ($call == 'GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('alert_number', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: alert_number');
                                                    }
                                                    $arguments['alert_number'] = $params['alert_number'];
                                                    unset($params['alert_number']);
                                                    if (array_key_exists('ref', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: ref');
                                                    }
                                                    $arguments['ref'] = $params['ref'];
                                                    unset($params['ref']);
                                                    if (array_key_exists('page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                                    }
                                                    $arguments['page'] = $params['page'];
                                                    unset($params['page']);
                                                    if (array_key_exists('per_page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                    }
                                                    $arguments['per_page'] = $params['per_page'];
                                                    unset($params['per_page']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Alerts\CbAlertNumberRcb\Instances::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Alerts\CbAlertNumberRcb\Instances::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeDashScanning🌀Alerts🌀CbAlertNumberRcb🌀Instances();
                                                    }
                                                    $operation = new Operation\CodeScanning\ListAlertInstances($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Alerts\CbAlertNumberRcb\Instances::class], $arguments['owner'], $arguments['repo'], $arguments['alert_number'], $arguments['ref'], $arguments['page'], $arguments['per_page']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'codeql') {
                                        if ($pathChunks[6] == 'databases') {
                                            if ($pathChunks[7] == '{language}') {
                                                if ($call == 'GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('language', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: language');
                                                    }
                                                    $arguments['language'] = $params['language'];
                                                    unset($params['language']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Codeql\Databases\CbLanguageRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Codeql\Databases\CbLanguageRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeScanning🌀Codeql🌀Databases🌀CbLanguageRcb();
                                                    }
                                                    $operation = new Operation\CodeScanning\GetCodeqlDatabase($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Codeql\Databases\CbLanguageRcb::class], $arguments['owner'], $arguments['repo'], $arguments['language']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CodeScanningCodeqlDatabase {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'deployments') {
                                    if ($pathChunks[5] == '{deployment_id}') {
                                        if ($pathChunks[6] == 'statuses') {
                                            if ($pathChunks[7] == '{status_id}') {
                                                if ($call == 'GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('deployment_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: deployment_id');
                                                    }
                                                    $arguments['deployment_id'] = $params['deployment_id'];
                                                    unset($params['deployment_id']);
                                                    if (array_key_exists('status_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: status_id');
                                                    }
                                                    $arguments['status_id'] = $params['status_id'];
                                                    unset($params['status_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb\Statuses\CbStatusIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb\Statuses\CbStatusIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Deployments🌀CbDeploymentIdRcb🌀Statuses🌀CbStatusIdRcb();
                                                    }
                                                    $operation = new Operation\Repos\GetDeploymentStatus($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb\Statuses\CbStatusIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['deployment_id'], $arguments['status_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\DeploymentStatus {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'environments') {
                                    if ($pathChunks[5] == '{environment_name}') {
                                        if ($pathChunks[6] == 'deployment-branch-policies') {
                                            if ($pathChunks[7] == '{branch_policy_id}') {
                                                if ($call == 'GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('environment_name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: environment_name');
                                                    }
                                                    $arguments['environment_name'] = $params['environment_name'];
                                                    unset($params['environment_name']);
                                                    if (array_key_exists('branch_policy_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: branch_policy_id');
                                                    }
                                                    $arguments['branch_policy_id'] = $params['branch_policy_id'];
                                                    unset($params['branch_policy_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies\CbBranchPolicyIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies\CbBranchPolicyIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Environments🌀CbEnvironmentNameRcb🌀DeploymentDashBranchDashPolicies🌀CbBranchPolicyIdRcb();
                                                    }
                                                    $operation = new Operation\Repos\GetDeploymentBranchPolicy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies\CbBranchPolicyIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['environment_name'], $arguments['branch_policy_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\DeploymentBranchPolicy {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'hooks') {
                                    if ($pathChunks[5] == '{hook_id}') {
                                        if ($pathChunks[6] == 'deliveries') {
                                            if ($pathChunks[7] == '{delivery_id}') {
                                                if ($call == 'GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('hook_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: hook_id');
                                                    }
                                                    $arguments['hook_id'] = $params['hook_id'];
                                                    unset($params['hook_id']);
                                                    if (array_key_exists('delivery_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: delivery_id');
                                                    }
                                                    $arguments['delivery_id'] = $params['delivery_id'];
                                                    unset($params['delivery_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb🌀Deliveries🌀CbDeliveryIdRcb();
                                                    }
                                                    $operation = new Operation\Repos\GetWebhookDelivery($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['hook_id'], $arguments['delivery_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\HookDelivery {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'issues') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($pathChunks[6] == '{comment_id}') {
                                            if ($pathChunks[7] == 'reactions') {
                                                if ($call == 'GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('comment_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                                    }
                                                    $arguments['comment_id'] = $params['comment_id'];
                                                    unset($params['comment_id']);
                                                    if (array_key_exists('content', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: content');
                                                    }
                                                    $arguments['content'] = $params['content'];
                                                    unset($params['content']);
                                                    if (array_key_exists('per_page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                    }
                                                    $arguments['per_page'] = $params['per_page'];
                                                    unset($params['per_page']);
                                                    if (array_key_exists('page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                                    }
                                                    $arguments['page'] = $params['page'];
                                                    unset($params['page']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb\Reactions::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀Comments🌀CbCommentIdRcb🌀Reactions();
                                                    }
                                                    $operation = new Operation\Reactions\ListForIssueComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb\Reactions::class], $arguments['owner'], $arguments['repo'], $arguments['comment_id'], $arguments['content'], $arguments['per_page'], $arguments['page']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif ($pathChunks[5] == '{issue_number}') {
                                        if ($pathChunks[6] == 'assignees') {
                                            if ($pathChunks[7] == '{assignee}') {
                                                if ($call == 'GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('issue_number', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: issue_number');
                                                    }
                                                    $arguments['issue_number'] = $params['issue_number'];
                                                    unset($params['issue_number']);
                                                    if (array_key_exists('assignee', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: assignee');
                                                    }
                                                    $arguments['assignee'] = $params['assignee'];
                                                    unset($params['assignee']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Assignees\CbAssigneeRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Assignees\CbAssigneeRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Assignees🌀CbAssigneeRcb();
                                                    }
                                                    $operation = new Operation\Issues\CheckUserCanBeAssignedToIssue($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Assignees\CbAssigneeRcb::class], $arguments['owner'], $arguments['repo'], $arguments['issue_number'], $arguments['assignee']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'pulls') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($pathChunks[6] == '{comment_id}') {
                                            if ($pathChunks[7] == 'reactions') {
                                                if ($call == 'GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('comment_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                                    }
                                                    $arguments['comment_id'] = $params['comment_id'];
                                                    unset($params['comment_id']);
                                                    if (array_key_exists('content', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: content');
                                                    }
                                                    $arguments['content'] = $params['content'];
                                                    unset($params['content']);
                                                    if (array_key_exists('per_page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                    }
                                                    $arguments['per_page'] = $params['per_page'];
                                                    unset($params['per_page']);
                                                    if (array_key_exists('page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                                    }
                                                    $arguments['page'] = $params['page'];
                                                    unset($params['page']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb\Reactions::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀Comments🌀CbCommentIdRcb🌀Reactions();
                                                    }
                                                    $operation = new Operation\Reactions\ListForPullRequestReviewComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb\Reactions::class], $arguments['owner'], $arguments['repo'], $arguments['comment_id'], $arguments['content'], $arguments['per_page'], $arguments['page']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif ($pathChunks[5] == '{pull_number}') {
                                        if ($pathChunks[6] == 'reviews') {
                                            if ($pathChunks[7] == '{review_id}') {
                                                if ($call == 'GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('pull_number', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                    }
                                                    $arguments['pull_number'] = $params['pull_number'];
                                                    unset($params['pull_number']);
                                                    if (array_key_exists('review_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: review_id');
                                                    }
                                                    $arguments['review_id'] = $params['review_id'];
                                                    unset($params['review_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Reviews🌀CbReviewIdRcb();
                                                    }
                                                    $operation = new Operation\Pulls\GetReview($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number'], $arguments['review_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PullRequestReview {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'secret-scanning') {
                                    if ($pathChunks[5] == 'alerts') {
                                        if ($pathChunks[6] == '{alert_number}') {
                                            if ($pathChunks[7] == 'locations') {
                                                if ($call == 'GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('alert_number', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: alert_number');
                                                    }
                                                    $arguments['alert_number'] = $params['alert_number'];
                                                    unset($params['alert_number']);
                                                    if (array_key_exists('page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                                    }
                                                    $arguments['page'] = $params['page'];
                                                    unset($params['page']);
                                                    if (array_key_exists('per_page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                    }
                                                    $arguments['per_page'] = $params['per_page'];
                                                    unset($params['per_page']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretDashScanning\Alerts\CbAlertNumberRcb\Locations::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretDashScanning\Alerts\CbAlertNumberRcb\Locations::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀SecretDashScanning🌀Alerts🌀CbAlertNumberRcb🌀Locations();
                                                    }
                                                    $operation = new Operation\SecretScanning\ListLocationsForAlert($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretDashScanning\Alerts\CbAlertNumberRcb\Locations::class], $arguments['owner'], $arguments['repo'], $arguments['alert_number'], $arguments['page'], $arguments['per_page']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'teams') {
                        if ($pathChunks[2] == '{team_id}') {
                            if ($pathChunks[3] == 'discussions') {
                                if ($pathChunks[4] == '{discussion_number}') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($pathChunks[6] == '{comment_number}') {
                                            if ($pathChunks[7] == 'reactions') {
                                                if ($call == 'GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions') {
                                                    $arguments = array();
                                                    if (array_key_exists('team_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                                    }
                                                    $arguments['team_id'] = $params['team_id'];
                                                    unset($params['team_id']);
                                                    if (array_key_exists('discussion_number', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                                    }
                                                    $arguments['discussion_number'] = $params['discussion_number'];
                                                    unset($params['discussion_number']);
                                                    if (array_key_exists('comment_number', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: comment_number');
                                                    }
                                                    $arguments['comment_number'] = $params['comment_number'];
                                                    unset($params['comment_number']);
                                                    if (array_key_exists('content', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: content');
                                                    }
                                                    $arguments['content'] = $params['content'];
                                                    unset($params['content']);
                                                    if (array_key_exists('per_page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                    }
                                                    $arguments['per_page'] = $params['per_page'];
                                                    unset($params['per_page']);
                                                    if (array_key_exists('page', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: page');
                                                    }
                                                    $arguments['page'] = $params['page'];
                                                    unset($params['page']);
                                                    if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments🌀CbCommentNumberRcb🌀Reactions();
                                                    }
                                                    $operation = new Operation\Reactions\ListForTeamDiscussionCommentLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class], $arguments['team_id'], $arguments['discussion_number'], $arguments['comment_number'], $arguments['content'], $arguments['per_page'], $arguments['page']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'users') {
                        if ($pathChunks[2] == '{username}') {
                            if ($pathChunks[3] == 'packages') {
                                if ($pathChunks[4] == '{package_type}') {
                                    if ($pathChunks[5] == '{package_name}') {
                                        if ($pathChunks[6] == 'versions') {
                                            if ($pathChunks[7] == '{package_version_id}') {
                                                if ($call == 'GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('package_type', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                                    }
                                                    $arguments['package_type'] = $params['package_type'];
                                                    unset($params['package_type']);
                                                    if (array_key_exists('package_name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                                    }
                                                    $arguments['package_name'] = $params['package_name'];
                                                    unset($params['package_name']);
                                                    if (array_key_exists('package_version_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: package_version_id');
                                                    }
                                                    $arguments['package_version_id'] = $params['package_version_id'];
                                                    unset($params['package_version_id']);
                                                    if (array_key_exists('username', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                                    }
                                                    $arguments['username'] = $params['username'];
                                                    unset($params['username']);
                                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions🌀CbPackageVersionIdRcb();
                                                    }
                                                    $operation = new Operation\Packages\GetPackageVersionForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class], $arguments['package_type'], $arguments['package_name'], $arguments['package_version_id'], $arguments['username']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PackageVersion {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 9) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'teams') {
                                if ($pathChunks[4] == '{team_slug}') {
                                    if ($pathChunks[5] == 'discussions') {
                                        if ($pathChunks[6] == '{discussion_number}') {
                                            if ($pathChunks[7] == 'comments') {
                                                if ($pathChunks[8] == '{comment_number}') {
                                                    if ($call == 'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}') {
                                                        $arguments = array();
                                                        if (array_key_exists('org', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                                        }
                                                        $arguments['org'] = $params['org'];
                                                        unset($params['org']);
                                                        if (array_key_exists('team_slug', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                        }
                                                        $arguments['team_slug'] = $params['team_slug'];
                                                        unset($params['team_slug']);
                                                        if (array_key_exists('discussion_number', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                                        }
                                                        $arguments['discussion_number'] = $params['discussion_number'];
                                                        unset($params['discussion_number']);
                                                        if (array_key_exists('comment_number', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: comment_number');
                                                        }
                                                        $arguments['comment_number'] = $params['comment_number'];
                                                        unset($params['comment_number']);
                                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments🌀CbCommentNumberRcb();
                                                        }
                                                        $operation = new Operation\Teams\GetDiscussionCommentInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class], $arguments['org'], $arguments['team_slug'], $arguments['discussion_number'], $arguments['comment_number']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamDiscussionComment {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'runs') {
                                        if ($pathChunks[6] == '{run_id}') {
                                            if ($pathChunks[7] == 'attempts') {
                                                if ($pathChunks[8] == '{attempt_number}') {
                                                    if ($call == 'GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('run_id', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: run_id');
                                                        }
                                                        $arguments['run_id'] = $params['run_id'];
                                                        unset($params['run_id']);
                                                        if (array_key_exists('attempt_number', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: attempt_number');
                                                        }
                                                        $arguments['attempt_number'] = $params['attempt_number'];
                                                        unset($params['attempt_number']);
                                                        if (array_key_exists('exclude_pull_requests', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: exclude_pull_requests');
                                                        }
                                                        $arguments['exclude_pull_requests'] = $params['exclude_pull_requests'];
                                                        unset($params['exclude_pull_requests']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Attempts\CbAttemptNumberRcb::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Attempts\CbAttemptNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Attempts🌀CbAttemptNumberRcb();
                                                        }
                                                        $operation = new Operation\Actions\GetWorkflowRunAttempt($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Attempts\CbAttemptNumberRcb::class], $arguments['owner'], $arguments['repo'], $arguments['run_id'], $arguments['attempt_number'], $arguments['exclude_pull_requests']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\WorkflowRun {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'branches') {
                                    if ($pathChunks[5] == '{branch}') {
                                        if ($pathChunks[6] == 'protection') {
                                            if ($pathChunks[7] == 'required_status_checks') {
                                                if ($pathChunks[8] == 'contexts') {
                                                    if ($call == 'GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('branch', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                        }
                                                        $arguments['branch'] = $params['branch'];
                                                        unset($params['branch']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredStatusChecks🌀Contexts();
                                                        }
                                                        $operation = new Operation\Repos\GetAllStatusCheckContexts($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            } elseif ($pathChunks[7] == 'restrictions') {
                                                if ($pathChunks[8] == 'apps') {
                                                    if ($call == 'GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('branch', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                        }
                                                        $arguments['branch'] = $params['branch'];
                                                        unset($params['branch']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Apps();
                                                        }
                                                        $operation = new Operation\Repos\GetAppsWithAccessToProtectedBranch($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                } elseif ($pathChunks[8] == 'teams') {
                                                    if ($call == 'GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('branch', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                        }
                                                        $arguments['branch'] = $params['branch'];
                                                        unset($params['branch']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Teams();
                                                        }
                                                        $operation = new Operation\Repos\GetTeamsWithAccessToProtectedBranch($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                } elseif ($pathChunks[8] == 'users') {
                                                    if ($call == 'GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('branch', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                        }
                                                        $arguments['branch'] = $params['branch'];
                                                        unset($params['branch']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Users();
                                                        }
                                                        $operation = new Operation\Repos\GetUsersWithAccessToProtectedBranch($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'pulls') {
                                    if ($pathChunks[5] == '{pull_number}') {
                                        if ($pathChunks[6] == 'reviews') {
                                            if ($pathChunks[7] == '{review_id}') {
                                                if ($pathChunks[8] == 'comments') {
                                                    if ($call == 'GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('pull_number', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                        }
                                                        $arguments['pull_number'] = $params['pull_number'];
                                                        unset($params['pull_number']);
                                                        if (array_key_exists('review_id', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: review_id');
                                                        }
                                                        $arguments['review_id'] = $params['review_id'];
                                                        unset($params['review_id']);
                                                        if (array_key_exists('per_page', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                        }
                                                        $arguments['per_page'] = $params['per_page'];
                                                        unset($params['per_page']);
                                                        if (array_key_exists('page', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: page');
                                                        }
                                                        $arguments['page'] = $params['page'];
                                                        unset($params['page']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb\Comments::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Reviews🌀CbReviewIdRcb🌀Comments();
                                                        }
                                                        $operation = new Operation\Pulls\ListCommentsForReview($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb\Comments::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number'], $arguments['review_id'], $arguments['per_page'], $arguments['page']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 10) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'teams') {
                                if ($pathChunks[4] == '{team_slug}') {
                                    if ($pathChunks[5] == 'discussions') {
                                        if ($pathChunks[6] == '{discussion_number}') {
                                            if ($pathChunks[7] == 'comments') {
                                                if ($pathChunks[8] == '{comment_number}') {
                                                    if ($pathChunks[9] == 'reactions') {
                                                        if ($call == 'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions') {
                                                            $arguments = array();
                                                            if (array_key_exists('org', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                                            }
                                                            $arguments['org'] = $params['org'];
                                                            unset($params['org']);
                                                            if (array_key_exists('team_slug', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                            }
                                                            $arguments['team_slug'] = $params['team_slug'];
                                                            unset($params['team_slug']);
                                                            if (array_key_exists('discussion_number', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                                            }
                                                            $arguments['discussion_number'] = $params['discussion_number'];
                                                            unset($params['discussion_number']);
                                                            if (array_key_exists('comment_number', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: comment_number');
                                                            }
                                                            $arguments['comment_number'] = $params['comment_number'];
                                                            unset($params['comment_number']);
                                                            if (array_key_exists('content', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: content');
                                                            }
                                                            $arguments['content'] = $params['content'];
                                                            unset($params['content']);
                                                            if (array_key_exists('per_page', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                            }
                                                            $arguments['per_page'] = $params['per_page'];
                                                            unset($params['per_page']);
                                                            if (array_key_exists('page', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                                            }
                                                            $arguments['page'] = $params['page'];
                                                            unset($params['page']);
                                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments🌀CbCommentNumberRcb🌀Reactions();
                                                            }
                                                            $operation = new Operation\Reactions\ListForTeamDiscussionCommentInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class], $arguments['org'], $arguments['team_slug'], $arguments['discussion_number'], $arguments['comment_number'], $arguments['content'], $arguments['per_page'], $arguments['page']);
                                                            $request = $operation->createRequest($params);
                                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                                return $operation->createResponse($response);
                                                            });
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'runs') {
                                        if ($pathChunks[6] == '{run_id}') {
                                            if ($pathChunks[7] == 'attempts') {
                                                if ($pathChunks[8] == '{attempt_number}') {
                                                    if ($pathChunks[9] == 'jobs') {
                                                        if ($call == 'GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs') {
                                                            $arguments = array();
                                                            if (array_key_exists('owner', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                            }
                                                            $arguments['owner'] = $params['owner'];
                                                            unset($params['owner']);
                                                            if (array_key_exists('repo', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                            }
                                                            $arguments['repo'] = $params['repo'];
                                                            unset($params['repo']);
                                                            if (array_key_exists('run_id', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: run_id');
                                                            }
                                                            $arguments['run_id'] = $params['run_id'];
                                                            unset($params['run_id']);
                                                            if (array_key_exists('attempt_number', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: attempt_number');
                                                            }
                                                            $arguments['attempt_number'] = $params['attempt_number'];
                                                            unset($params['attempt_number']);
                                                            if (array_key_exists('per_page', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: per_page');
                                                            }
                                                            $arguments['per_page'] = $params['per_page'];
                                                            unset($params['per_page']);
                                                            if (array_key_exists('page', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: page');
                                                            }
                                                            $arguments['page'] = $params['page'];
                                                            unset($params['page']);
                                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Attempts\CbAttemptNumberRcb\Jobs::class, $this->hydrator) == false) {
                                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Attempts\CbAttemptNumberRcb\Jobs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Attempts🌀CbAttemptNumberRcb🌀Jobs();
                                                            }
                                                            $operation = new Operation\Actions\ListJobsForWorkflowRunAttempt($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Attempts\CbAttemptNumberRcb\Jobs::class], $arguments['owner'], $arguments['repo'], $arguments['run_id'], $arguments['attempt_number'], $arguments['per_page'], $arguments['page']);
                                                            $request = $operation->createRequest($params);
                                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListJobsForWorkflowRunAttempt\Response\Applicationjson\H200 {
                                                                return $operation->createResponse($response);
                                                            });
                                                        }
                                                    } elseif ($pathChunks[9] == 'logs') {
                                                        if ($call == 'GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs') {
                                                            $arguments = array();
                                                            if (array_key_exists('owner', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                            }
                                                            $arguments['owner'] = $params['owner'];
                                                            unset($params['owner']);
                                                            if (array_key_exists('repo', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                            }
                                                            $arguments['repo'] = $params['repo'];
                                                            unset($params['repo']);
                                                            if (array_key_exists('run_id', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: run_id');
                                                            }
                                                            $arguments['run_id'] = $params['run_id'];
                                                            unset($params['run_id']);
                                                            if (array_key_exists('attempt_number', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: attempt_number');
                                                            }
                                                            $arguments['attempt_number'] = $params['attempt_number'];
                                                            unset($params['attempt_number']);
                                                            $operation = new Operation\Actions\DownloadWorkflowRunAttemptLogs($arguments['owner'], $arguments['repo'], $arguments['run_id'], $arguments['attempt_number']);
                                                            $request = $operation->createRequest($params);
                                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \array {
                                                                return $operation->createResponse($response);
                                                            });
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } elseif ($method === 'POST') {
            if ($pathChunksCount === 4) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'app-manifests') {
                        if ($pathChunks[2] == '{code}') {
                            if ($pathChunks[3] == 'conversions') {
                                if ($call == 'POST /app-manifests/{code}/conversions') {
                                    $arguments = array();
                                    if (array_key_exists('code', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: code');
                                    }
                                    $arguments['code'] = $params['code'];
                                    unset($params['code']);
                                    if (\array_key_exists(Hydrator\Operation\AppManifests\CbCodeRcb\Conversions::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\AppManifests\CbCodeRcb\Conversions::class] = $this->hydrators->getObjectMapperOperation🌀AppManifests🌀CbCodeRcb🌀Conversions();
                                    }
                                    $operation = new Operation\Apps\CreateFromManifest($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\AppManifests\CbCodeRcb\Conversions::class], $arguments['code']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Apps\CreateFromManifest\Response\Applicationjson\H201 {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'applications') {
                        if ($pathChunks[2] == '{client_id}') {
                            if ($pathChunks[3] == 'token') {
                                if ($call == 'POST /applications/{client_id}/token') {
                                    $arguments = array();
                                    if (array_key_exists('client_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: client_id');
                                    }
                                    $arguments['client_id'] = $params['client_id'];
                                    unset($params['client_id']);
                                    if (\array_key_exists(Hydrator\Operation\Applications\CbClientIdRcb\Token::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Token::class] = $this->hydrators->getObjectMapperOperation🌀Applications🌀CbClientIdRcb🌀Token();
                                    }
                                    $operation = new Operation\Apps\CheckToken($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Token::class], $arguments['client_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Authorization {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'gists') {
                        if ($pathChunks[2] == '{gist_id}') {
                            if ($pathChunks[3] == 'comments') {
                                if ($call == 'POST /gists/{gist_id}/comments') {
                                    $arguments = array();
                                    if (array_key_exists('gist_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: gist_id');
                                    }
                                    $arguments['gist_id'] = $params['gist_id'];
                                    unset($params['gist_id']);
                                    if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Comments::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Comments();
                                    }
                                    $operation = new Operation\Gists\CreateComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments::class], $arguments['gist_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\GistComment {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'forks') {
                                if ($call == 'POST /gists/{gist_id}/forks') {
                                    $arguments = array();
                                    if (array_key_exists('gist_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: gist_id');
                                    }
                                    $arguments['gist_id'] = $params['gist_id'];
                                    unset($params['gist_id']);
                                    if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Forks::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Forks::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Forks();
                                    }
                                    $operation = new Operation\Gists\Fork($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Forks::class], $arguments['gist_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\BaseGist {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'organizations') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'personal-access-token-requests') {
                                if ($call == 'POST /organizations/{org}/personal-access-token-requests') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (\array_key_exists(Hydrator\Operation\Organizations\CbOrgRcb\PersonalAccessTokenRequests::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Organizations\CbOrgRcb\PersonalAccessTokenRequests::class] = $this->hydrators->getObjectMapperOperation🌀Organizations🌀CbOrgRcb🌀PersonalAccessTokenRequests();
                                    }
                                    $operation = new Operation\Orgs\ReviewPatGrantRequestsInBulk($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Organizations\CbOrgRcb\PersonalAccessTokenRequests::class], $arguments['org']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Orgs\ReviewPatGrantRequestsInBulk\Response\Applicationjson\H202 {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'personal-access-tokens') {
                                if ($call == 'POST /organizations/{org}/personal-access-tokens') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (\array_key_exists(Hydrator\Operation\Organizations\CbOrgRcb\PersonalAccessTokens::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Organizations\CbOrgRcb\PersonalAccessTokens::class] = $this->hydrators->getObjectMapperOperation🌀Organizations🌀CbOrgRcb🌀PersonalAccessTokens();
                                    }
                                    $operation = new Operation\Orgs\UpdatePatAccesses($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Organizations\CbOrgRcb\PersonalAccessTokens::class], $arguments['org']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Orgs\UpdatePatAccesses\Response\Applicationjson\H202 {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'hooks') {
                                if ($call == 'POST /orgs/{org}/hooks') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks();
                                    }
                                    $operation = new Operation\Orgs\CreateWebhook($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks::class], $arguments['org']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\OrgHook {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'invitations') {
                                if ($call == 'POST /orgs/{org}/invitations') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Invitations::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Invitations::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Invitations();
                                    }
                                    $operation = new Operation\Orgs\CreateInvitation($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Invitations::class], $arguments['org']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\OrganizationInvitation {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'migrations') {
                                if ($call == 'POST /orgs/{org}/migrations') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Migrations::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Migrations();
                                    }
                                    $operation = new Operation\Migrations\StartForOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations::class], $arguments['org']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Migration {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'projects') {
                                if ($call == 'POST /orgs/{org}/projects') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Projects::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Projects::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Projects();
                                    }
                                    $operation = new Operation\Projects\CreateForOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Projects::class], $arguments['org']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Project {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'repos') {
                                if ($call == 'POST /orgs/{org}/repos') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Repos::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Repos::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Repos();
                                    }
                                    $operation = new Operation\Repos\CreateInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Repos::class], $arguments['org']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Repository {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'teams') {
                                if ($call == 'POST /orgs/{org}/teams') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams();
                                    }
                                    $operation = new Operation\Teams\Create($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams::class], $arguments['org']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamFull {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'projects') {
                        if ($pathChunks[2] == '{project_id}') {
                            if ($pathChunks[3] == 'columns') {
                                if ($call == 'POST /projects/{project_id}/columns') {
                                    $arguments = array();
                                    if (array_key_exists('project_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: project_id');
                                    }
                                    $arguments['project_id'] = $params['project_id'];
                                    unset($params['project_id']);
                                    if (\array_key_exists(Hydrator\Operation\Projects\CbProjectIdRcb\Columns::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Columns::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀CbProjectIdRcb🌀Columns();
                                    }
                                    $operation = new Operation\Projects\CreateColumn($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Columns::class], $arguments['project_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ProjectColumn {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'teams') {
                        if ($pathChunks[2] == '{team_id}') {
                            if ($pathChunks[3] == 'discussions') {
                                if ($call == 'POST /teams/{team_id}/discussions') {
                                    $arguments = array();
                                    if (array_key_exists('team_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                    }
                                    $arguments['team_id'] = $params['team_id'];
                                    unset($params['team_id']);
                                    if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions();
                                    }
                                    $operation = new Operation\Teams\CreateDiscussionLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions::class], $arguments['team_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamDiscussion {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 6) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'app') {
                        if ($pathChunks[2] == 'hook') {
                            if ($pathChunks[3] == 'deliveries') {
                                if ($pathChunks[4] == '{delivery_id}') {
                                    if ($pathChunks[5] == 'attempts') {
                                        if ($call == 'POST /app/hook/deliveries/{delivery_id}/attempts') {
                                            $arguments = array();
                                            if (array_key_exists('delivery_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: delivery_id');
                                            }
                                            $arguments['delivery_id'] = $params['delivery_id'];
                                            unset($params['delivery_id']);
                                            if (\array_key_exists(Hydrator\Operation\App\Hook\Deliveries\CbDeliveryIdRcb\Attempts::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\App\Hook\Deliveries\CbDeliveryIdRcb\Attempts::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Hook🌀Deliveries🌀CbDeliveryIdRcb🌀Attempts();
                                            }
                                            $operation = new Operation\Apps\RedeliverWebhookDelivery($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Hook\Deliveries\CbDeliveryIdRcb\Attempts::class], $arguments['delivery_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Apps\RedeliverWebhookDelivery\Response\Applicationjson\H202 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'actions') {
                                if ($pathChunks[4] == 'runners') {
                                    if ($pathChunks[5] == 'registration-token') {
                                        if ($call == 'POST /orgs/{org}/actions/runners/registration-token') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\RegistrationToken::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\RegistrationToken::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners🌀RegistrationToken();
                                            }
                                            $operation = new Operation\Actions\CreateRegistrationTokenForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\RegistrationToken::class], $arguments['org']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\AuthenticationToken {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'remove-token') {
                                        if ($call == 'POST /orgs/{org}/actions/runners/remove-token') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\RemoveToken::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\RemoveToken::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners🌀RemoveToken();
                                            }
                                            $operation = new Operation\Actions\CreateRemoveTokenForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\RemoveToken::class], $arguments['org']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\AuthenticationToken {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'codespaces') {
                                if ($pathChunks[4] == 'billing') {
                                    if ($pathChunks[5] == 'selected_users') {
                                        if ($call == 'POST /orgs/{org}/codespaces/billing/selected_users') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Billing\SelectedUsers::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Billing\SelectedUsers::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Billing🌀SelectedUsers();
                                            }
                                            $operation = new Operation\Codespaces\SetCodespacesBillingUsers($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Billing\SelectedUsers::class], $arguments['org']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'hooks') {
                                if ($pathChunks[4] == '{hook_id}') {
                                    if ($pathChunks[5] == 'pings') {
                                        if ($call == 'POST /orgs/{org}/hooks/{hook_id}/pings') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('hook_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: hook_id');
                                            }
                                            $arguments['hook_id'] = $params['hook_id'];
                                            unset($params['hook_id']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Pings::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Pings::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks🌀CbHookIdRcb🌀Pings();
                                            }
                                            $operation = new Operation\Orgs\PingWebhook($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Pings::class], $arguments['org'], $arguments['hook_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'teams') {
                                if ($pathChunks[4] == '{team_slug}') {
                                    if ($pathChunks[5] == 'discussions') {
                                        if ($call == 'POST /orgs/{org}/teams/{team_slug}/discussions') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('team_slug', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                            }
                                            $arguments['team_slug'] = $params['team_slug'];
                                            unset($params['team_slug']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions();
                                            }
                                            $operation = new Operation\Teams\CreateDiscussionInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions::class], $arguments['org'], $arguments['team_slug']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamDiscussion {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'projects') {
                        if ($pathChunks[2] == 'columns') {
                            if ($pathChunks[3] == 'cards') {
                                if ($pathChunks[4] == '{card_id}') {
                                    if ($pathChunks[5] == 'moves') {
                                        if ($call == 'POST /projects/columns/cards/{card_id}/moves') {
                                            $arguments = array();
                                            if (array_key_exists('card_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: card_id');
                                            }
                                            $arguments['card_id'] = $params['card_id'];
                                            unset($params['card_id']);
                                            if (\array_key_exists(Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb\Moves::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb\Moves::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀Cards🌀CbCardIdRcb🌀Moves();
                                            }
                                            $operation = new Operation\Projects\MoveCard($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb\Moves::class], $arguments['card_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Projects\MoveCard\Response\Applicationjson\H201 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'variables') {
                                        if ($call == 'POST /repos/{owner}/{repo}/actions/variables') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Variables::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Variables::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Variables();
                                            }
                                            $operation = new Operation\Actions\CreateRepoVariable($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Variables::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'code-scanning') {
                                    if ($pathChunks[5] == 'sarifs') {
                                        if ($call == 'POST /repos/{owner}/{repo}/code-scanning/sarifs') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Sarifs::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Sarifs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeScanning🌀Sarifs();
                                            }
                                            $operation = new Operation\CodeScanning\UploadSarif($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Sarifs::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CodeScanningSarifsReceipt {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'dependency-graph') {
                                    if ($pathChunks[5] == 'snapshots') {
                                        if ($call == 'POST /repos/{owner}/{repo}/dependency-graph/snapshots') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\DependencyGraph\Snapshots::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\DependencyGraph\Snapshots::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀DependencyGraph🌀Snapshots();
                                            }
                                            $operation = new Operation\DependencyGraph\CreateRepositorySnapshot($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\DependencyGraph\Snapshots::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\DependencyGraph\CreateRepositorySnapshot\Response\Applicationjson\H201 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'git') {
                                    if ($pathChunks[5] == 'blobs') {
                                        if ($call == 'POST /repos/{owner}/{repo}/git/blobs') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Blobs::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Blobs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Blobs();
                                            }
                                            $operation = new Operation\Git\CreateBlob($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Blobs::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ShortBlob {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'commits') {
                                        if ($call == 'POST /repos/{owner}/{repo}/git/commits') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Commits::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Commits::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Commits();
                                            }
                                            $operation = new Operation\Git\CreateCommit($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Commits::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\GitCommit {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'refs') {
                                        if ($call == 'POST /repos/{owner}/{repo}/git/refs') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Refs::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Refs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Refs();
                                            }
                                            $operation = new Operation\Git\CreateRef($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Refs::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\GitRef {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'tags') {
                                        if ($call == 'POST /repos/{owner}/{repo}/git/tags') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Tags::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Tags::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Tags();
                                            }
                                            $operation = new Operation\Git\CreateTag($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Tags::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\GitTag {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'trees') {
                                        if ($call == 'POST /repos/{owner}/{repo}/git/trees') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Trees::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Trees::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Trees();
                                            }
                                            $operation = new Operation\Git\CreateTree($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Trees::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\GitTree {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'pages') {
                                    if ($pathChunks[5] == 'builds') {
                                        if ($call == 'POST /repos/{owner}/{repo}/pages/builds') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages🌀Builds();
                                            }
                                            $operation = new Operation\Repos\RequestPagesBuild($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PageBuildStatus {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'deployment') {
                                        if ($call == 'POST /repos/{owner}/{repo}/pages/deployment') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Deployment::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Deployment::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages🌀Deployment();
                                            }
                                            $operation = new Operation\Repos\CreatePagesDeployment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Deployment::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PageDeployment {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'releases') {
                                    if ($pathChunks[5] == 'generate-notes') {
                                        if ($call == 'POST /repos/{owner}/{repo}/releases/generate-notes') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\GenerateNotes::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\GenerateNotes::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀GenerateNotes();
                                            }
                                            $operation = new Operation\Repos\GenerateReleaseNotes($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\GenerateNotes::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ReleaseNotesContent {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'statuses') {
                                    if ($pathChunks[5] == '{sha}') {
                                        if ($call == 'POST /repos/{owner}/{repo}/statuses/{sha}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('sha', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: sha');
                                            }
                                            $arguments['sha'] = $params['sha'];
                                            unset($params['sha']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Statuses\CbShaRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Statuses\CbShaRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Statuses🌀CbShaRcb();
                                            }
                                            $operation = new Operation\Repos\CreateCommitStatus($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Statuses\CbShaRcb::class], $arguments['owner'], $arguments['repo'], $arguments['sha']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Status {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'tags') {
                                    if ($pathChunks[5] == 'protection') {
                                        if ($call == 'POST /repos/{owner}/{repo}/tags/protection') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags\Protection::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags\Protection::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Tags🌀Protection();
                                            }
                                            $operation = new Operation\Repos\CreateTagProtection($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags\Protection::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TagProtection {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repositories') {
                        if ($pathChunks[2] == '{repository_id}') {
                            if ($pathChunks[3] == 'environments') {
                                if ($pathChunks[4] == '{environment_name}') {
                                    if ($pathChunks[5] == 'variables') {
                                        if ($call == 'POST /repositories/{repository_id}/environments/{environment_name}/variables') {
                                            $arguments = array();
                                            if (array_key_exists('repository_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                            }
                                            $arguments['repository_id'] = $params['repository_id'];
                                            unset($params['repository_id']);
                                            if (array_key_exists('environment_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: environment_name');
                                            }
                                            $arguments['environment_name'] = $params['environment_name'];
                                            unset($params['environment_name']);
                                            if (\array_key_exists(Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Variables::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Variables::class] = $this->hydrators->getObjectMapperOperation🌀Repositories🌀CbRepositoryIdRcb🌀Environments🌀CbEnvironmentNameRcb🌀Variables();
                                            }
                                            $operation = new Operation\Actions\CreateEnvironmentVariable($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Variables::class], $arguments['repository_id'], $arguments['environment_name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'teams') {
                        if ($pathChunks[2] == '{team_id}') {
                            if ($pathChunks[3] == 'discussions') {
                                if ($pathChunks[4] == '{discussion_number}') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($call == 'POST /teams/{team_id}/discussions/{discussion_number}/comments') {
                                            $arguments = array();
                                            if (array_key_exists('team_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                            }
                                            $arguments['team_id'] = $params['team_id'];
                                            unset($params['team_id']);
                                            if (array_key_exists('discussion_number', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                            }
                                            $arguments['discussion_number'] = $params['discussion_number'];
                                            unset($params['discussion_number']);
                                            if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments();
                                            }
                                            $operation = new Operation\Teams\CreateDiscussionCommentLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments::class], $arguments['team_id'], $arguments['discussion_number']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamDiscussionComment {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'reactions') {
                                        if ($call == 'POST /teams/{team_id}/discussions/{discussion_number}/reactions') {
                                            $arguments = array();
                                            if (array_key_exists('team_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                            }
                                            $arguments['team_id'] = $params['team_id'];
                                            unset($params['team_id']);
                                            if (array_key_exists('discussion_number', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                            }
                                            $arguments['discussion_number'] = $params['discussion_number'];
                                            unset($params['discussion_number']);
                                            if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Reactions();
                                            }
                                            $operation = new Operation\Reactions\CreateForTeamDiscussionLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Reactions::class], $arguments['team_id'], $arguments['discussion_number']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Reaction {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'packages') {
                            if ($pathChunks[3] == '{package_type}') {
                                if ($pathChunks[4] == '{package_name}') {
                                    if ($pathChunks[5] == 'restore') {
                                        if ($call == 'POST /user/packages/{package_type}/{package_name}/restore') {
                                            $arguments = array();
                                            if (array_key_exists('package_type', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                            }
                                            $arguments['package_type'] = $params['package_type'];
                                            unset($params['package_type']);
                                            if (array_key_exists('package_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                            }
                                            $arguments['package_name'] = $params['package_name'];
                                            unset($params['package_name']);
                                            if (array_key_exists('token', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: token');
                                            }
                                            $arguments['token'] = $params['token'];
                                            unset($params['token']);
                                            if (\array_key_exists(Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Restore::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Restore::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Restore();
                                            }
                                            $operation = new Operation\Packages\RestorePackageForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Restore::class], $arguments['package_type'], $arguments['package_name'], $arguments['token']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 5) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'app') {
                        if ($pathChunks[2] == 'installations') {
                            if ($pathChunks[3] == '{installation_id}') {
                                if ($pathChunks[4] == 'access_tokens') {
                                    if ($call == 'POST /app/installations/{installation_id}/access_tokens') {
                                        $arguments = array();
                                        if (array_key_exists('installation_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: installation_id');
                                        }
                                        $arguments['installation_id'] = $params['installation_id'];
                                        unset($params['installation_id']);
                                        if (\array_key_exists(Hydrator\Operation\App\Installations\CbInstallationIdRcb\AccessTokens::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb\AccessTokens::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Installations🌀CbInstallationIdRcb🌀AccessTokens();
                                        }
                                        $operation = new Operation\Apps\CreateInstallationAccessToken($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb\AccessTokens::class], $arguments['installation_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\InstallationToken {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'applications') {
                        if ($pathChunks[2] == '{client_id}') {
                            if ($pathChunks[3] == 'token') {
                                if ($pathChunks[4] == 'scoped') {
                                    if ($call == 'POST /applications/{client_id}/token/scoped') {
                                        $arguments = array();
                                        if (array_key_exists('client_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: client_id');
                                        }
                                        $arguments['client_id'] = $params['client_id'];
                                        unset($params['client_id']);
                                        if (\array_key_exists(Hydrator\Operation\Applications\CbClientIdRcb\Token\Scoped::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Token\Scoped::class] = $this->hydrators->getObjectMapperOperation🌀Applications🌀CbClientIdRcb🌀Token🌀Scoped();
                                        }
                                        $operation = new Operation\Apps\ScopeToken($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Token\Scoped::class], $arguments['client_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Authorization {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'organizations') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'personal-access-token-requests') {
                                if ($pathChunks[4] == '{pat_request_id}') {
                                    if ($call == 'POST /organizations/{org}/personal-access-token-requests/{pat_request_id}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('pat_request_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: pat_request_id');
                                        }
                                        $arguments['pat_request_id'] = $params['pat_request_id'];
                                        unset($params['pat_request_id']);
                                        if (\array_key_exists(Hydrator\Operation\Organizations\CbOrgRcb\PersonalDashAccessDashTokenDashRequests\CbPatRequestIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Organizations\CbOrgRcb\PersonalDashAccessDashTokenDashRequests\CbPatRequestIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Organizations🌀CbOrgRcb🌀PersonalDashAccessDashTokenDashRequests🌀CbPatRequestIdRcb();
                                        }
                                        $operation = new Operation\Orgs\ReviewPatGrantRequest($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Organizations\CbOrgRcb\PersonalDashAccessDashTokenDashRequests\CbPatRequestIdRcb::class], $arguments['org'], $arguments['pat_request_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'personal-access-tokens') {
                                if ($pathChunks[4] == '{pat_id}') {
                                    if ($call == 'POST /organizations/{org}/personal-access-tokens/{pat_id}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('pat_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: pat_id');
                                        }
                                        $arguments['pat_id'] = $params['pat_id'];
                                        unset($params['pat_id']);
                                        if (\array_key_exists(Hydrator\Operation\Organizations\CbOrgRcb\PersonalDashAccessDashTokens\CbPatIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Organizations\CbOrgRcb\PersonalDashAccessDashTokens\CbPatIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Organizations🌀CbOrgRcb🌀PersonalDashAccessDashTokens🌀CbPatIdRcb();
                                        }
                                        $operation = new Operation\Orgs\UpdatePatAccess($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Organizations\CbOrgRcb\PersonalDashAccessDashTokens\CbPatIdRcb::class], $arguments['org'], $arguments['pat_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'actions') {
                                if ($pathChunks[4] == 'required_workflows') {
                                    if ($call == 'POST /orgs/{org}/actions/required_workflows') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀RequiredWorkflows();
                                        }
                                        $operation = new Operation\Actions\CreateRequiredWorkflow($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows::class], $arguments['org']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\RequiredWorkflow {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'variables') {
                                    if ($call == 'POST /orgs/{org}/actions/variables') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Variables();
                                        }
                                        $operation = new Operation\Actions\CreateOrgVariable($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables::class], $arguments['org']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == '{security_product}') {
                                if ($pathChunks[4] == '{enablement}') {
                                    if ($call == 'POST /orgs/{org}/{security_product}/{enablement}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('security_product', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: security_product');
                                        }
                                        $arguments['security_product'] = $params['security_product'];
                                        unset($params['security_product']);
                                        if (array_key_exists('enablement', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: enablement');
                                        }
                                        $arguments['enablement'] = $params['enablement'];
                                        unset($params['enablement']);
                                        $operation = new Operation\Orgs\EnableOrDisableSecurityProductOnAllOrgRepos($arguments['org'], $arguments['security_product'], $arguments['enablement']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'projects') {
                        if ($pathChunks[2] == 'columns') {
                            if ($pathChunks[3] == '{column_id}') {
                                if ($pathChunks[4] == 'cards') {
                                    if ($call == 'POST /projects/columns/{column_id}/cards') {
                                        $arguments = array();
                                        if (array_key_exists('column_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: column_id');
                                        }
                                        $arguments['column_id'] = $params['column_id'];
                                        unset($params['column_id']);
                                        if (\array_key_exists(Hydrator\Operation\Projects\Columns\CbColumnIdRcb\Cards::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb\Cards::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀CbColumnIdRcb🌀Cards();
                                        }
                                        $operation = new Operation\Projects\CreateCard($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb\Cards::class], $arguments['column_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ProjectCard {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'moves') {
                                    if ($call == 'POST /projects/columns/{column_id}/moves') {
                                        $arguments = array();
                                        if (array_key_exists('column_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: column_id');
                                        }
                                        $arguments['column_id'] = $params['column_id'];
                                        unset($params['column_id']);
                                        if (\array_key_exists(Hydrator\Operation\Projects\Columns\CbColumnIdRcb\Moves::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb\Moves::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀CbColumnIdRcb🌀Moves();
                                        }
                                        $operation = new Operation\Projects\MoveColumn($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb\Moves::class], $arguments['column_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Projects\MoveColumn\Response\Applicationjson\H201 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'autolinks') {
                                    if ($call == 'POST /repos/{owner}/{repo}/autolinks') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Autolinks();
                                        }
                                        $operation = new Operation\Repos\CreateAutolink($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Autolink {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'check-runs') {
                                    if ($call == 'POST /repos/{owner}/{repo}/check-runs') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckRuns::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckRuns::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckRuns();
                                        }
                                        $operation = new Operation\Checks\Create($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckRuns::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CheckRun {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'check-suites') {
                                    if ($call == 'POST /repos/{owner}/{repo}/check-suites') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckSuites::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckSuites::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckSuites();
                                        }
                                        $operation = new Operation\Checks\CreateSuite($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckSuites::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CheckSuite {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'codespaces') {
                                    if ($call == 'POST /repos/{owner}/{repo}/codespaces') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codespaces();
                                        }
                                        $operation = new Operation\Codespaces\CreateWithRepoForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Codespace {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'deployments') {
                                    if ($call == 'POST /repos/{owner}/{repo}/deployments') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Deployments();
                                        }
                                        $operation = new Operation\Repos\CreateDeployment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Deployment|\ApiClients\Client\Github\Schema\Operation\Repos\CreateDeployment\Response\Applicationjson\H202 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'dispatches') {
                                    if ($call == 'POST /repos/{owner}/{repo}/dispatches') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dispatches::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dispatches::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Dispatches();
                                        }
                                        $operation = new Operation\Repos\CreateDispatchEvent($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dispatches::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'forks') {
                                    if ($call == 'POST /repos/{owner}/{repo}/forks') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Forks::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Forks::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Forks();
                                        }
                                        $operation = new Operation\Repos\CreateFork($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Forks::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\FullRepository {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'hooks') {
                                    if ($call == 'POST /repos/{owner}/{repo}/hooks') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks();
                                        }
                                        $operation = new Operation\Repos\CreateWebhook($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Hook {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'issues') {
                                    if ($call == 'POST /repos/{owner}/{repo}/issues') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues();
                                        }
                                        $operation = new Operation\Issues\Create($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Issue {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'keys') {
                                    if ($call == 'POST /repos/{owner}/{repo}/keys') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Keys::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Keys::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Keys();
                                        }
                                        $operation = new Operation\Repos\CreateDeployKey($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Keys::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\DeployKey {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'labels') {
                                    if ($call == 'POST /repos/{owner}/{repo}/labels') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Labels();
                                        }
                                        $operation = new Operation\Issues\CreateLabel($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Label {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'merge-upstream') {
                                    if ($call == 'POST /repos/{owner}/{repo}/merge-upstream') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\MergeUpstream::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\MergeUpstream::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀MergeUpstream();
                                        }
                                        $operation = new Operation\Repos\MergeUpstream($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\MergeUpstream::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\MergedUpstream {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'merges') {
                                    if ($call == 'POST /repos/{owner}/{repo}/merges') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Merges::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Merges::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Merges();
                                        }
                                        $operation = new Operation\Repos\Merge($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Merges::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Commit {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'milestones') {
                                    if ($call == 'POST /repos/{owner}/{repo}/milestones') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Milestones();
                                        }
                                        $operation = new Operation\Issues\CreateMilestone($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Milestone {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'pages') {
                                    if ($call == 'POST /repos/{owner}/{repo}/pages') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages();
                                        }
                                        $operation = new Operation\Repos\CreatePagesSite($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Page {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'projects') {
                                    if ($call == 'POST /repos/{owner}/{repo}/projects') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Projects::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Projects::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Projects();
                                        }
                                        $operation = new Operation\Projects\CreateForRepo($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Projects::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Project {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'pulls') {
                                    if ($call == 'POST /repos/{owner}/{repo}/pulls') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls();
                                        }
                                        $operation = new Operation\Pulls\Create($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PullRequest {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'releases') {
                                    if ($call == 'POST /repos/{owner}/{repo}/releases') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases();
                                        }
                                        $operation = new Operation\Repos\CreateRelease($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Release {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'security-advisories') {
                                    if ($call == 'POST /repos/{owner}/{repo}/security-advisories') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecurityAdvisories::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecurityAdvisories::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀SecurityAdvisories();
                                        }
                                        $operation = new Operation\SecurityAdvisories\CreateRepositoryAdvisory($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecurityAdvisories::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\RepositoryAdvisory {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'transfer') {
                                    if ($call == 'POST /repos/{owner}/{repo}/transfer') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Transfer::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Transfer::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Transfer();
                                        }
                                        $operation = new Operation\Repos\Transfer($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Transfer::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\MinimalRepository {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif ($pathChunks[2] == '{template_owner}') {
                            if ($pathChunks[3] == '{template_repo}') {
                                if ($pathChunks[4] == 'generate') {
                                    if ($call == 'POST /repos/{template_owner}/{template_repo}/generate') {
                                        $arguments = array();
                                        if (array_key_exists('template_owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: template_owner');
                                        }
                                        $arguments['template_owner'] = $params['template_owner'];
                                        unset($params['template_owner']);
                                        if (array_key_exists('template_repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: template_repo');
                                        }
                                        $arguments['template_repo'] = $params['template_repo'];
                                        unset($params['template_repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbTemplateOwnerRcb\CbTemplateRepoRcb\Generate::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbTemplateOwnerRcb\CbTemplateRepoRcb\Generate::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbTemplateOwnerRcb🌀CbTemplateRepoRcb🌀Generate();
                                        }
                                        $operation = new Operation\Repos\CreateUsingTemplate($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbTemplateOwnerRcb\CbTemplateRepoRcb\Generate::class], $arguments['template_owner'], $arguments['template_repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Repository {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'codespaces') {
                            if ($pathChunks[3] == '{codespace_name}') {
                                if ($pathChunks[4] == 'exports') {
                                    if ($call == 'POST /user/codespaces/{codespace_name}/exports') {
                                        $arguments = array();
                                        if (array_key_exists('codespace_name', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: codespace_name');
                                        }
                                        $arguments['codespace_name'] = $params['codespace_name'];
                                        unset($params['codespace_name']);
                                        if (\array_key_exists(Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Exports::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Exports::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀CbCodespaceNameRcb🌀Exports();
                                        }
                                        $operation = new Operation\Codespaces\ExportForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Exports::class], $arguments['codespace_name']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CodespaceExportDetails {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'publish') {
                                    if ($call == 'POST /user/codespaces/{codespace_name}/publish') {
                                        $arguments = array();
                                        if (array_key_exists('codespace_name', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: codespace_name');
                                        }
                                        $arguments['codespace_name'] = $params['codespace_name'];
                                        unset($params['codespace_name']);
                                        if (\array_key_exists(Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Publish::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Publish::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀CbCodespaceNameRcb🌀Publish();
                                        }
                                        $operation = new Operation\Codespaces\PublishForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Publish::class], $arguments['codespace_name']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CodespaceWithFullRepository {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'start') {
                                    if ($call == 'POST /user/codespaces/{codespace_name}/start') {
                                        $arguments = array();
                                        if (array_key_exists('codespace_name', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: codespace_name');
                                        }
                                        $arguments['codespace_name'] = $params['codespace_name'];
                                        unset($params['codespace_name']);
                                        if (\array_key_exists(Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Start::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Start::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀CbCodespaceNameRcb🌀Start();
                                        }
                                        $operation = new Operation\Codespaces\StartForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Start::class], $arguments['codespace_name']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Codespace {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'stop') {
                                    if ($call == 'POST /user/codespaces/{codespace_name}/stop') {
                                        $arguments = array();
                                        if (array_key_exists('codespace_name', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: codespace_name');
                                        }
                                        $arguments['codespace_name'] = $params['codespace_name'];
                                        unset($params['codespace_name']);
                                        if (\array_key_exists(Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Stop::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Stop::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀CbCodespaceNameRcb🌀Stop();
                                        }
                                        $operation = new Operation\Codespaces\StopForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Stop::class], $arguments['codespace_name']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Codespace {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 2) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'gists') {
                        if ($call == 'POST /gists') {
                            $arguments = array();
                            if (\array_key_exists(Hydrator\Operation\Gists::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Gists::class] = $this->hydrators->getObjectMapperOperation🌀Gists();
                            }
                            $operation = new Operation\Gists\Create($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists::class]);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\GistSimple {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif ($pathChunks[1] == 'markdown') {
                        if ($call == 'POST /markdown') {
                            $arguments = array();
                            if (\array_key_exists(Hydrator\Operation\Markdown::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Markdown::class] = $this->hydrators->getObjectMapperOperation🌀Markdown();
                            }
                            $operation = new Operation\Markdown\Render($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Markdown::class]);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Markdown\Render\Response\Texthtml\H200 {
                                return $operation->createResponse($response);
                            });
                        }
                    }
                }
            } elseif ($pathChunksCount === 3) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'markdown') {
                        if ($pathChunks[2] == 'raw') {
                            if ($call == 'POST /markdown/raw') {
                                $arguments = array();
                                if (\array_key_exists(Hydrator\Operation\Markdown\Raw::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Markdown\Raw::class] = $this->hydrators->getObjectMapperOperation🌀Markdown🌀Raw();
                                }
                                $operation = new Operation\Markdown\RenderRaw($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Markdown\Raw::class]);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Markdown\RenderRaw\Response\Texthtml\H200 {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'codespaces') {
                            if ($call == 'POST /user/codespaces') {
                                $arguments = array();
                                if (\array_key_exists(Hydrator\Operation\User\Codespaces::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Codespaces::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces();
                                }
                                $operation = new Operation\Codespaces\CreateForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces::class]);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Codespace {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'emails') {
                            if ($call == 'POST /user/emails') {
                                $arguments = array();
                                if (\array_key_exists(Hydrator\Operation\User\Emails::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Emails::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Emails();
                                }
                                $operation = new Operation\Users\AddEmailForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Emails::class]);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'gpg_keys') {
                            if ($call == 'POST /user/gpg_keys') {
                                $arguments = array();
                                if (\array_key_exists(Hydrator\Operation\User\GpgKeys::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\GpgKeys::class] = $this->hydrators->getObjectMapperOperation🌀User🌀GpgKeys();
                                }
                                $operation = new Operation\Users\CreateGpgKeyForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\GpgKeys::class]);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\GpgKey {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'keys') {
                            if ($call == 'POST /user/keys') {
                                $arguments = array();
                                if (\array_key_exists(Hydrator\Operation\User\Keys::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Keys::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Keys();
                                }
                                $operation = new Operation\Users\CreatePublicSshKeyForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Keys::class]);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Key {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'migrations') {
                            if ($call == 'POST /user/migrations') {
                                $arguments = array();
                                if (\array_key_exists(Hydrator\Operation\User\Migrations::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Migrations::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Migrations();
                                }
                                $operation = new Operation\Migrations\StartForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Migrations::class]);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Migration {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'projects') {
                            if ($call == 'POST /user/projects') {
                                $arguments = array();
                                if (\array_key_exists(Hydrator\Operation\User\Projects::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Projects::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Projects();
                                }
                                $operation = new Operation\Projects\CreateForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Projects::class]);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Project {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'repos') {
                            if ($call == 'POST /user/repos') {
                                $arguments = array();
                                if (\array_key_exists(Hydrator\Operation\User\Repos::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Repos::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Repos();
                                }
                                $operation = new Operation\Repos\CreateForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Repos::class]);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Repository {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'social_accounts') {
                            if ($call == 'POST /user/social_accounts') {
                                $arguments = array();
                                if (\array_key_exists(Hydrator\Operation\User\SocialAccounts::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\SocialAccounts::class] = $this->hydrators->getObjectMapperOperation🌀User🌀SocialAccounts();
                                }
                                $operation = new Operation\Users\AddSocialAccountForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\SocialAccounts::class]);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'ssh_signing_keys') {
                            if ($call == 'POST /user/ssh_signing_keys') {
                                $arguments = array();
                                if (\array_key_exists(Hydrator\Operation\User\SshSigningKeys::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\SshSigningKeys::class] = $this->hydrators->getObjectMapperOperation🌀User🌀SshSigningKeys();
                                }
                                $operation = new Operation\Users\CreateSshSigningKeyForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\SshSigningKeys::class]);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\SshSigningKey {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 7) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'actions') {
                                if ($pathChunks[4] == 'runners') {
                                    if ($pathChunks[5] == '{runner_id}') {
                                        if ($pathChunks[6] == 'labels') {
                                            if ($call == 'POST /orgs/{org}/actions/runners/{runner_id}/labels') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('runner_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: runner_id');
                                                }
                                                $arguments['runner_id'] = $params['runner_id'];
                                                unset($params['runner_id']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                }
                                                $operation = new Operation\Actions\AddCustomLabelsToSelfHostedRunnerForOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $arguments['org'], $arguments['runner_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'packages') {
                                if ($pathChunks[4] == '{package_type}') {
                                    if ($pathChunks[5] == '{package_name}') {
                                        if ($pathChunks[6] == 'restore') {
                                            if ($call == 'POST /orgs/{org}/packages/{package_type}/{package_name}/restore') {
                                                $arguments = array();
                                                if (array_key_exists('package_type', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                                }
                                                $arguments['package_type'] = $params['package_type'];
                                                unset($params['package_type']);
                                                if (array_key_exists('package_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                                }
                                                $arguments['package_name'] = $params['package_name'];
                                                unset($params['package_name']);
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('token', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: token');
                                                }
                                                $arguments['token'] = $params['token'];
                                                unset($params['token']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Restore::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Restore::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Restore();
                                                }
                                                $operation = new Operation\Packages\RestorePackageForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Restore::class], $arguments['package_type'], $arguments['package_name'], $arguments['org'], $arguments['token']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'runners') {
                                        if ($pathChunks[6] == 'registration-token') {
                                            if ($call == 'POST /repos/{owner}/{repo}/actions/runners/registration-token') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\RegistrationToken::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\RegistrationToken::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners🌀RegistrationToken();
                                                }
                                                $operation = new Operation\Actions\CreateRegistrationTokenForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\RegistrationToken::class], $arguments['owner'], $arguments['repo']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\AuthenticationToken {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'remove-token') {
                                            if ($call == 'POST /repos/{owner}/{repo}/actions/runners/remove-token') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\RemoveToken::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\RemoveToken::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners🌀RemoveToken();
                                                }
                                                $operation = new Operation\Actions\CreateRemoveTokenForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\RemoveToken::class], $arguments['owner'], $arguments['repo']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\AuthenticationToken {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'branches') {
                                    if ($pathChunks[5] == '{branch}') {
                                        if ($pathChunks[6] == 'rename') {
                                            if ($call == 'POST /repos/{owner}/{repo}/branches/{branch}/rename') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('branch', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                }
                                                $arguments['branch'] = $params['branch'];
                                                unset($params['branch']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Rename::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Rename::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Rename();
                                                }
                                                $operation = new Operation\Repos\RenameBranch($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Rename::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\BranchWithProtection {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'check-runs') {
                                    if ($pathChunks[5] == '{check_run_id}') {
                                        if ($pathChunks[6] == 'rerequest') {
                                            if ($call == 'POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('check_run_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: check_run_id');
                                                }
                                                $arguments['check_run_id'] = $params['check_run_id'];
                                                unset($params['check_run_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb\Rerequest::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb\Rerequest::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckDashRuns🌀CbCheckRunIdRcb🌀Rerequest();
                                                }
                                                $operation = new Operation\Checks\RerequestRun($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb\Rerequest::class], $arguments['owner'], $arguments['repo'], $arguments['check_run_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'check-suites') {
                                    if ($pathChunks[5] == '{check_suite_id}') {
                                        if ($pathChunks[6] == 'rerequest') {
                                            if ($call == 'POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('check_suite_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: check_suite_id');
                                                }
                                                $arguments['check_suite_id'] = $params['check_suite_id'];
                                                unset($params['check_suite_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashSuites\CbCheckSuiteIdRcb\Rerequest::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashSuites\CbCheckSuiteIdRcb\Rerequest::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckDashSuites🌀CbCheckSuiteIdRcb🌀Rerequest();
                                                }
                                                $operation = new Operation\Checks\RerequestSuite($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashSuites\CbCheckSuiteIdRcb\Rerequest::class], $arguments['owner'], $arguments['repo'], $arguments['check_suite_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'comments') {
                                    if ($pathChunks[5] == '{comment_id}') {
                                        if ($pathChunks[6] == 'reactions') {
                                            if ($call == 'POST /repos/{owner}/{repo}/comments/{comment_id}/reactions') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('comment_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                                }
                                                $arguments['comment_id'] = $params['comment_id'];
                                                unset($params['comment_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb\Reactions::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Comments🌀CbCommentIdRcb🌀Reactions();
                                                }
                                                $operation = new Operation\Reactions\CreateForCommitComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb\Reactions::class], $arguments['owner'], $arguments['repo'], $arguments['comment_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Reaction {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'commits') {
                                    if ($pathChunks[5] == '{commit_sha}') {
                                        if ($pathChunks[6] == 'comments') {
                                            if ($call == 'POST /repos/{owner}/{repo}/commits/{commit_sha}/comments') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('commit_sha', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: commit_sha');
                                                }
                                                $arguments['commit_sha'] = $params['commit_sha'];
                                                unset($params['commit_sha']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\Comments::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits🌀CbCommitShaRcb🌀Comments();
                                                }
                                                $operation = new Operation\Repos\CreateCommitComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\Comments::class], $arguments['owner'], $arguments['repo'], $arguments['commit_sha']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CommitComment {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'deployments') {
                                    if ($pathChunks[5] == '{deployment_id}') {
                                        if ($pathChunks[6] == 'statuses') {
                                            if ($call == 'POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('deployment_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: deployment_id');
                                                }
                                                $arguments['deployment_id'] = $params['deployment_id'];
                                                unset($params['deployment_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb\Statuses::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb\Statuses::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Deployments🌀CbDeploymentIdRcb🌀Statuses();
                                                }
                                                $operation = new Operation\Repos\CreateDeploymentStatus($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb\Statuses::class], $arguments['owner'], $arguments['repo'], $arguments['deployment_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\DeploymentStatus {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'environments') {
                                    if ($pathChunks[5] == '{environment_name}') {
                                        if ($pathChunks[6] == 'deployment-branch-policies') {
                                            if ($call == 'POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('environment_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: environment_name');
                                                }
                                                $arguments['environment_name'] = $params['environment_name'];
                                                unset($params['environment_name']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Environments🌀CbEnvironmentNameRcb🌀DeploymentDashBranchDashPolicies();
                                                }
                                                $operation = new Operation\Repos\CreateDeploymentBranchPolicy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies::class], $arguments['owner'], $arguments['repo'], $arguments['environment_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\DeploymentBranchPolicy {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'hooks') {
                                    if ($pathChunks[5] == '{hook_id}') {
                                        if ($pathChunks[6] == 'pings') {
                                            if ($call == 'POST /repos/{owner}/{repo}/hooks/{hook_id}/pings') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('hook_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: hook_id');
                                                }
                                                $arguments['hook_id'] = $params['hook_id'];
                                                unset($params['hook_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Pings::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Pings::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb🌀Pings();
                                                }
                                                $operation = new Operation\Repos\PingWebhook($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Pings::class], $arguments['owner'], $arguments['repo'], $arguments['hook_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'tests') {
                                            if ($call == 'POST /repos/{owner}/{repo}/hooks/{hook_id}/tests') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('hook_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: hook_id');
                                                }
                                                $arguments['hook_id'] = $params['hook_id'];
                                                unset($params['hook_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Tests::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Tests::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb🌀Tests();
                                                }
                                                $operation = new Operation\Repos\TestPushWebhook($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Tests::class], $arguments['owner'], $arguments['repo'], $arguments['hook_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'issues') {
                                    if ($pathChunks[5] == '{issue_number}') {
                                        if ($pathChunks[6] == 'assignees') {
                                            if ($call == 'POST /repos/{owner}/{repo}/issues/{issue_number}/assignees') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('issue_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: issue_number');
                                                }
                                                $arguments['issue_number'] = $params['issue_number'];
                                                unset($params['issue_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Assignees::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Assignees::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Assignees();
                                                }
                                                $operation = new Operation\Issues\AddAssignees($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Assignees::class], $arguments['owner'], $arguments['repo'], $arguments['issue_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Issue {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'comments') {
                                            if ($call == 'POST /repos/{owner}/{repo}/issues/{issue_number}/comments') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('issue_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: issue_number');
                                                }
                                                $arguments['issue_number'] = $params['issue_number'];
                                                unset($params['issue_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Comments::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Comments();
                                                }
                                                $operation = new Operation\Issues\CreateComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Comments::class], $arguments['owner'], $arguments['repo'], $arguments['issue_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\IssueComment {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'labels') {
                                            if ($call == 'POST /repos/{owner}/{repo}/issues/{issue_number}/labels') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('issue_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: issue_number');
                                                }
                                                $arguments['issue_number'] = $params['issue_number'];
                                                unset($params['issue_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Labels();
                                                }
                                                $operation = new Operation\Issues\AddLabels($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class], $arguments['owner'], $arguments['repo'], $arguments['issue_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable|\ApiClients\Client\Github\Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'reactions') {
                                            if ($call == 'POST /repos/{owner}/{repo}/issues/{issue_number}/reactions') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('issue_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: issue_number');
                                                }
                                                $arguments['issue_number'] = $params['issue_number'];
                                                unset($params['issue_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Reactions();
                                                }
                                                $operation = new Operation\Reactions\CreateForIssue($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Reactions::class], $arguments['owner'], $arguments['repo'], $arguments['issue_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Reaction {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'pulls') {
                                    if ($pathChunks[5] == '{pull_number}') {
                                        if ($pathChunks[6] == 'codespaces') {
                                            if ($call == 'POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('pull_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                }
                                                $arguments['pull_number'] = $params['pull_number'];
                                                unset($params['pull_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Codespaces::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Codespaces::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Codespaces();
                                                }
                                                $operation = new Operation\Codespaces\CreateWithPrForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Codespaces::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Codespace {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'comments') {
                                            if ($call == 'POST /repos/{owner}/{repo}/pulls/{pull_number}/comments') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('pull_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                }
                                                $arguments['pull_number'] = $params['pull_number'];
                                                unset($params['pull_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Comments::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Comments();
                                                }
                                                $operation = new Operation\Pulls\CreateReviewComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Comments::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PullRequestReviewComment {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'requested_reviewers') {
                                            if ($call == 'POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('pull_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                }
                                                $arguments['pull_number'] = $params['pull_number'];
                                                unset($params['pull_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\RequestedReviewers::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\RequestedReviewers::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀RequestedReviewers();
                                                }
                                                $operation = new Operation\Pulls\RequestReviewers($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\RequestedReviewers::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PullRequestSimple {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'reviews') {
                                            if ($call == 'POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('pull_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                }
                                                $arguments['pull_number'] = $params['pull_number'];
                                                unset($params['pull_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Reviews();
                                                }
                                                $operation = new Operation\Pulls\CreateReview($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PullRequestReview {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'releases') {
                                    if ($pathChunks[5] == '{release_id}') {
                                        if ($pathChunks[6] == 'assets') {
                                            if ($call == 'POST /repos/{owner}/{repo}/releases/{release_id}/assets') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('release_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: release_id');
                                                }
                                                $arguments['release_id'] = $params['release_id'];
                                                unset($params['release_id']);
                                                if (array_key_exists('name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: name');
                                                }
                                                $arguments['name'] = $params['name'];
                                                unset($params['name']);
                                                if (array_key_exists('label', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: label');
                                                }
                                                $arguments['label'] = $params['label'];
                                                unset($params['label']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Assets::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Assets::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀CbReleaseIdRcb🌀Assets();
                                                }
                                                $operation = new Operation\Repos\UploadReleaseAsset($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Assets::class], $arguments['owner'], $arguments['repo'], $arguments['release_id'], $arguments['name'], $arguments['label']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ReleaseAsset {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'reactions') {
                                            if ($call == 'POST /repos/{owner}/{repo}/releases/{release_id}/reactions') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('release_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: release_id');
                                                }
                                                $arguments['release_id'] = $params['release_id'];
                                                unset($params['release_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Reactions::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀CbReleaseIdRcb🌀Reactions();
                                                }
                                                $operation = new Operation\Reactions\CreateForRelease($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Reactions::class], $arguments['owner'], $arguments['repo'], $arguments['release_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Reaction {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'users') {
                        if ($pathChunks[2] == '{username}') {
                            if ($pathChunks[3] == 'packages') {
                                if ($pathChunks[4] == '{package_type}') {
                                    if ($pathChunks[5] == '{package_name}') {
                                        if ($pathChunks[6] == 'restore') {
                                            if ($call == 'POST /users/{username}/packages/{package_type}/{package_name}/restore') {
                                                $arguments = array();
                                                if (array_key_exists('package_type', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                                }
                                                $arguments['package_type'] = $params['package_type'];
                                                unset($params['package_type']);
                                                if (array_key_exists('package_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                                }
                                                $arguments['package_name'] = $params['package_name'];
                                                unset($params['package_name']);
                                                if (array_key_exists('username', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: username');
                                                }
                                                $arguments['username'] = $params['username'];
                                                unset($params['username']);
                                                if (array_key_exists('token', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: token');
                                                }
                                                $arguments['token'] = $params['token'];
                                                unset($params['token']);
                                                if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Restore::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Restore::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Restore();
                                                }
                                                $operation = new Operation\Packages\RestorePackageForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Restore::class], $arguments['package_type'], $arguments['package_name'], $arguments['username'], $arguments['token']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 8) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'hooks') {
                                if ($pathChunks[4] == '{hook_id}') {
                                    if ($pathChunks[5] == 'deliveries') {
                                        if ($pathChunks[6] == '{delivery_id}') {
                                            if ($pathChunks[7] == 'attempts') {
                                                if ($call == 'POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('hook_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: hook_id');
                                                    }
                                                    $arguments['hook_id'] = $params['hook_id'];
                                                    unset($params['hook_id']);
                                                    if (array_key_exists('delivery_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: delivery_id');
                                                    }
                                                    $arguments['delivery_id'] = $params['delivery_id'];
                                                    unset($params['delivery_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb\Attempts::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb\Attempts::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks🌀CbHookIdRcb🌀Deliveries🌀CbDeliveryIdRcb🌀Attempts();
                                                    }
                                                    $operation = new Operation\Orgs\RedeliverWebhookDelivery($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb\Attempts::class], $arguments['org'], $arguments['hook_id'], $arguments['delivery_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Orgs\RedeliverWebhookDelivery\Response\Applicationjson\H202 {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'members') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($pathChunks[5] == 'codespaces') {
                                        if ($pathChunks[6] == '{codespace_name}') {
                                            if ($pathChunks[7] == 'stop') {
                                                if ($call == 'POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('username', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                                    }
                                                    $arguments['username'] = $params['username'];
                                                    unset($params['username']);
                                                    if (array_key_exists('codespace_name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: codespace_name');
                                                    }
                                                    $arguments['codespace_name'] = $params['codespace_name'];
                                                    unset($params['codespace_name']);
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb\Codespaces\CbCodespaceNameRcb\Stop::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb\Codespaces\CbCodespaceNameRcb\Stop::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Members🌀CbUsernameRcb🌀Codespaces🌀CbCodespaceNameRcb🌀Stop();
                                                    }
                                                    $operation = new Operation\Codespaces\StopInOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb\Codespaces\CbCodespaceNameRcb\Stop::class], $arguments['org'], $arguments['username'], $arguments['codespace_name']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Codespace {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'teams') {
                                if ($pathChunks[4] == '{team_slug}') {
                                    if ($pathChunks[5] == 'discussions') {
                                        if ($pathChunks[6] == '{discussion_number}') {
                                            if ($pathChunks[7] == 'comments') {
                                                if ($call == 'POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('team_slug', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                    }
                                                    $arguments['team_slug'] = $params['team_slug'];
                                                    unset($params['team_slug']);
                                                    if (array_key_exists('discussion_number', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                                    }
                                                    $arguments['discussion_number'] = $params['discussion_number'];
                                                    unset($params['discussion_number']);
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments();
                                                    }
                                                    $operation = new Operation\Teams\CreateDiscussionCommentInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments::class], $arguments['org'], $arguments['team_slug'], $arguments['discussion_number']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamDiscussionComment {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'reactions') {
                                                if ($call == 'POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('team_slug', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                    }
                                                    $arguments['team_slug'] = $params['team_slug'];
                                                    unset($params['team_slug']);
                                                    if (array_key_exists('discussion_number', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                                    }
                                                    $arguments['discussion_number'] = $params['discussion_number'];
                                                    unset($params['discussion_number']);
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Reactions();
                                                    }
                                                    $operation = new Operation\Reactions\CreateForTeamDiscussionInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Reactions::class], $arguments['org'], $arguments['team_slug'], $arguments['discussion_number']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Reaction {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'jobs') {
                                        if ($pathChunks[6] == '{job_id}') {
                                            if ($pathChunks[7] == 'rerun') {
                                                if ($call == 'POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('job_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: job_id');
                                                    }
                                                    $arguments['job_id'] = $params['job_id'];
                                                    unset($params['job_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Jobs\CbJobIdRcb\Rerun::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Jobs\CbJobIdRcb\Rerun::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Jobs🌀CbJobIdRcb🌀Rerun();
                                                    }
                                                    $operation = new Operation\Actions\ReRunJobForWorkflowRun($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Jobs\CbJobIdRcb\Rerun::class], $arguments['owner'], $arguments['repo'], $arguments['job_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'runners') {
                                        if ($pathChunks[6] == '{runner_id}') {
                                            if ($pathChunks[7] == 'labels') {
                                                if ($call == 'POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('runner_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: runner_id');
                                                    }
                                                    $arguments['runner_id'] = $params['runner_id'];
                                                    unset($params['runner_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                    }
                                                    $operation = new Operation\Actions\AddCustomLabelsToSelfHostedRunnerForRepo($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $arguments['owner'], $arguments['repo'], $arguments['runner_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200 {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'runs') {
                                        if ($pathChunks[6] == '{run_id}') {
                                            if ($pathChunks[7] == 'approve') {
                                                if ($call == 'POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('run_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: run_id');
                                                    }
                                                    $arguments['run_id'] = $params['run_id'];
                                                    unset($params['run_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Approve::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Approve::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Approve();
                                                    }
                                                    $operation = new Operation\Actions\ApproveWorkflowRun($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Approve::class], $arguments['owner'], $arguments['repo'], $arguments['run_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'cancel') {
                                                if ($call == 'POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('run_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: run_id');
                                                    }
                                                    $arguments['run_id'] = $params['run_id'];
                                                    unset($params['run_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Cancel::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Cancel::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Cancel();
                                                    }
                                                    $operation = new Operation\Actions\CancelWorkflowRun($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Cancel::class], $arguments['owner'], $arguments['repo'], $arguments['run_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'pending_deployments') {
                                                if ($call == 'POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('run_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: run_id');
                                                    }
                                                    $arguments['run_id'] = $params['run_id'];
                                                    unset($params['run_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\PendingDeployments::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\PendingDeployments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀PendingDeployments();
                                                    }
                                                    $operation = new Operation\Actions\ReviewPendingDeploymentsForRun($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\PendingDeployments::class], $arguments['owner'], $arguments['repo'], $arguments['run_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'rerun') {
                                                if ($call == 'POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('run_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: run_id');
                                                    }
                                                    $arguments['run_id'] = $params['run_id'];
                                                    unset($params['run_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Rerun::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Rerun::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Rerun();
                                                    }
                                                    $operation = new Operation\Actions\ReRunWorkflow($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Rerun::class], $arguments['owner'], $arguments['repo'], $arguments['run_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'rerun-failed-jobs') {
                                                if ($call == 'POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('run_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: run_id');
                                                    }
                                                    $arguments['run_id'] = $params['run_id'];
                                                    unset($params['run_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\RerunDashFailedDashJobs::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\RerunDashFailedDashJobs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀RerunDashFailedDashJobs();
                                                    }
                                                    $operation = new Operation\Actions\ReRunWorkflowFailedJobs($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\RerunDashFailedDashJobs::class], $arguments['owner'], $arguments['repo'], $arguments['run_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'workflows') {
                                        if ($pathChunks[6] == '{workflow_id}') {
                                            if ($pathChunks[7] == 'dispatches') {
                                                if ($call == 'POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('workflow_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: workflow_id');
                                                    }
                                                    $arguments['workflow_id'] = $params['workflow_id'];
                                                    unset($params['workflow_id']);
                                                    $operation = new Operation\Actions\CreateWorkflowDispatch($this->requestSchemaValidator, $arguments['owner'], $arguments['repo'], $arguments['workflow_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'branches') {
                                    if ($pathChunks[5] == '{branch}') {
                                        if ($pathChunks[6] == 'protection') {
                                            if ($pathChunks[7] == 'enforce_admins') {
                                                if ($call == 'POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('branch', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                    }
                                                    $arguments['branch'] = $params['branch'];
                                                    unset($params['branch']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\EnforceAdmins::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\EnforceAdmins::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀EnforceAdmins();
                                                    }
                                                    $operation = new Operation\Repos\SetAdminBranchProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\EnforceAdmins::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ProtectedBranchAdminEnforced {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'required_signatures') {
                                                if ($call == 'POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('branch', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                    }
                                                    $arguments['branch'] = $params['branch'];
                                                    unset($params['branch']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredSignatures::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredSignatures::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredSignatures();
                                                    }
                                                    $operation = new Operation\Repos\CreateCommitSignatureProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredSignatures::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ProtectedBranchAdminEnforced {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'issues') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($pathChunks[6] == '{comment_id}') {
                                            if ($pathChunks[7] == 'reactions') {
                                                if ($call == 'POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('comment_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                                    }
                                                    $arguments['comment_id'] = $params['comment_id'];
                                                    unset($params['comment_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb\Reactions::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀Comments🌀CbCommentIdRcb🌀Reactions();
                                                    }
                                                    $operation = new Operation\Reactions\CreateForIssueComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb\Reactions::class], $arguments['owner'], $arguments['repo'], $arguments['comment_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Reaction {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'pulls') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($pathChunks[6] == '{comment_id}') {
                                            if ($pathChunks[7] == 'reactions') {
                                                if ($call == 'POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('comment_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                                    }
                                                    $arguments['comment_id'] = $params['comment_id'];
                                                    unset($params['comment_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb\Reactions::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀Comments🌀CbCommentIdRcb🌀Reactions();
                                                    }
                                                    $operation = new Operation\Reactions\CreateForPullRequestReviewComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb\Reactions::class], $arguments['owner'], $arguments['repo'], $arguments['comment_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Reaction {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'teams') {
                        if ($pathChunks[2] == '{team_id}') {
                            if ($pathChunks[3] == 'discussions') {
                                if ($pathChunks[4] == '{discussion_number}') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($pathChunks[6] == '{comment_number}') {
                                            if ($pathChunks[7] == 'reactions') {
                                                if ($call == 'POST /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions') {
                                                    $arguments = array();
                                                    if (array_key_exists('team_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                                    }
                                                    $arguments['team_id'] = $params['team_id'];
                                                    unset($params['team_id']);
                                                    if (array_key_exists('discussion_number', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                                    }
                                                    $arguments['discussion_number'] = $params['discussion_number'];
                                                    unset($params['discussion_number']);
                                                    if (array_key_exists('comment_number', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: comment_number');
                                                    }
                                                    $arguments['comment_number'] = $params['comment_number'];
                                                    unset($params['comment_number']);
                                                    if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments🌀CbCommentNumberRcb🌀Reactions();
                                                    }
                                                    $operation = new Operation\Reactions\CreateForTeamDiscussionCommentLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class], $arguments['team_id'], $arguments['discussion_number'], $arguments['comment_number']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Reaction {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'packages') {
                            if ($pathChunks[3] == '{package_type}') {
                                if ($pathChunks[4] == '{package_name}') {
                                    if ($pathChunks[5] == 'versions') {
                                        if ($pathChunks[6] == '{package_version_id}') {
                                            if ($pathChunks[7] == 'restore') {
                                                if ($call == 'POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore') {
                                                    $arguments = array();
                                                    if (array_key_exists('package_type', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                                    }
                                                    $arguments['package_type'] = $params['package_type'];
                                                    unset($params['package_type']);
                                                    if (array_key_exists('package_name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                                    }
                                                    $arguments['package_name'] = $params['package_name'];
                                                    unset($params['package_name']);
                                                    if (array_key_exists('package_version_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: package_version_id');
                                                    }
                                                    $arguments['package_version_id'] = $params['package_version_id'];
                                                    unset($params['package_version_id']);
                                                    if (\array_key_exists(Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb\Restore::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb\Restore::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions🌀CbPackageVersionIdRcb🌀Restore();
                                                    }
                                                    $operation = new Operation\Packages\RestorePackageVersionForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb\Restore::class], $arguments['package_type'], $arguments['package_name'], $arguments['package_version_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 9) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'packages') {
                                if ($pathChunks[4] == '{package_type}') {
                                    if ($pathChunks[5] == '{package_name}') {
                                        if ($pathChunks[6] == 'versions') {
                                            if ($pathChunks[7] == '{package_version_id}') {
                                                if ($pathChunks[8] == 'restore') {
                                                    if ($call == 'POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore') {
                                                        $arguments = array();
                                                        if (array_key_exists('package_type', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                                        }
                                                        $arguments['package_type'] = $params['package_type'];
                                                        unset($params['package_type']);
                                                        if (array_key_exists('package_name', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                                        }
                                                        $arguments['package_name'] = $params['package_name'];
                                                        unset($params['package_name']);
                                                        if (array_key_exists('org', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                                        }
                                                        $arguments['org'] = $params['org'];
                                                        unset($params['org']);
                                                        if (array_key_exists('package_version_id', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: package_version_id');
                                                        }
                                                        $arguments['package_version_id'] = $params['package_version_id'];
                                                        unset($params['package_version_id']);
                                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb\Restore::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb\Restore::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions🌀CbPackageVersionIdRcb🌀Restore();
                                                        }
                                                        $operation = new Operation\Packages\RestorePackageVersionForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb\Restore::class], $arguments['package_type'], $arguments['package_name'], $arguments['org'], $arguments['package_version_id']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'branches') {
                                    if ($pathChunks[5] == '{branch}') {
                                        if ($pathChunks[6] == 'protection') {
                                            if ($pathChunks[7] == 'required_status_checks') {
                                                if ($pathChunks[8] == 'contexts') {
                                                    if ($call == 'POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('branch', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                        }
                                                        $arguments['branch'] = $params['branch'];
                                                        unset($params['branch']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredStatusChecks🌀Contexts();
                                                        }
                                                        $operation = new Operation\Repos\AddStatusCheckContexts($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            } elseif ($pathChunks[7] == 'restrictions') {
                                                if ($pathChunks[8] == 'apps') {
                                                    if ($call == 'POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('branch', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                        }
                                                        $arguments['branch'] = $params['branch'];
                                                        unset($params['branch']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Apps();
                                                        }
                                                        $operation = new Operation\Repos\AddAppAccessRestrictions($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                } elseif ($pathChunks[8] == 'teams') {
                                                    if ($call == 'POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('branch', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                        }
                                                        $arguments['branch'] = $params['branch'];
                                                        unset($params['branch']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Teams();
                                                        }
                                                        $operation = new Operation\Repos\AddTeamAccessRestrictions($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                } elseif ($pathChunks[8] == 'users') {
                                                    if ($call == 'POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('branch', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                        }
                                                        $arguments['branch'] = $params['branch'];
                                                        unset($params['branch']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Users();
                                                        }
                                                        $operation = new Operation\Repos\AddUserAccessRestrictions($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'hooks') {
                                    if ($pathChunks[5] == '{hook_id}') {
                                        if ($pathChunks[6] == 'deliveries') {
                                            if ($pathChunks[7] == '{delivery_id}') {
                                                if ($pathChunks[8] == 'attempts') {
                                                    if ($call == 'POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('hook_id', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: hook_id');
                                                        }
                                                        $arguments['hook_id'] = $params['hook_id'];
                                                        unset($params['hook_id']);
                                                        if (array_key_exists('delivery_id', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: delivery_id');
                                                        }
                                                        $arguments['delivery_id'] = $params['delivery_id'];
                                                        unset($params['delivery_id']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb\Attempts::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb\Attempts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb🌀Deliveries🌀CbDeliveryIdRcb🌀Attempts();
                                                        }
                                                        $operation = new Operation\Repos\RedeliverWebhookDelivery($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb\Attempts::class], $arguments['owner'], $arguments['repo'], $arguments['hook_id'], $arguments['delivery_id']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Repos\RedeliverWebhookDelivery\Response\Applicationjson\H202 {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'pulls') {
                                    if ($pathChunks[5] == '{pull_number}') {
                                        if ($pathChunks[6] == 'comments') {
                                            if ($pathChunks[7] == '{comment_id}') {
                                                if ($pathChunks[8] == 'replies') {
                                                    if ($call == 'POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('pull_number', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                        }
                                                        $arguments['pull_number'] = $params['pull_number'];
                                                        unset($params['pull_number']);
                                                        if (array_key_exists('comment_id', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                                        }
                                                        $arguments['comment_id'] = $params['comment_id'];
                                                        unset($params['comment_id']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Comments\CbCommentIdRcb\Replies::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Comments\CbCommentIdRcb\Replies::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Comments🌀CbCommentIdRcb🌀Replies();
                                                        }
                                                        $operation = new Operation\Pulls\CreateReplyForReviewComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Comments\CbCommentIdRcb\Replies::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number'], $arguments['comment_id']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PullRequestReviewComment {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        } elseif ($pathChunks[6] == 'reviews') {
                                            if ($pathChunks[7] == '{review_id}') {
                                                if ($pathChunks[8] == 'events') {
                                                    if ($call == 'POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('pull_number', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                        }
                                                        $arguments['pull_number'] = $params['pull_number'];
                                                        unset($params['pull_number']);
                                                        if (array_key_exists('review_id', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: review_id');
                                                        }
                                                        $arguments['review_id'] = $params['review_id'];
                                                        unset($params['review_id']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb\Events::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb\Events::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Reviews🌀CbReviewIdRcb🌀Events();
                                                        }
                                                        $operation = new Operation\Pulls\SubmitReview($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb\Events::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number'], $arguments['review_id']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PullRequestReview {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'users') {
                        if ($pathChunks[2] == '{username}') {
                            if ($pathChunks[3] == 'packages') {
                                if ($pathChunks[4] == '{package_type}') {
                                    if ($pathChunks[5] == '{package_name}') {
                                        if ($pathChunks[6] == 'versions') {
                                            if ($pathChunks[7] == '{package_version_id}') {
                                                if ($pathChunks[8] == 'restore') {
                                                    if ($call == 'POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore') {
                                                        $arguments = array();
                                                        if (array_key_exists('package_type', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                                        }
                                                        $arguments['package_type'] = $params['package_type'];
                                                        unset($params['package_type']);
                                                        if (array_key_exists('package_name', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                                        }
                                                        $arguments['package_name'] = $params['package_name'];
                                                        unset($params['package_name']);
                                                        if (array_key_exists('username', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                                        }
                                                        $arguments['username'] = $params['username'];
                                                        unset($params['username']);
                                                        if (array_key_exists('package_version_id', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: package_version_id');
                                                        }
                                                        $arguments['package_version_id'] = $params['package_version_id'];
                                                        unset($params['package_version_id']);
                                                        if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb\Restore::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb\Restore::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions🌀CbPackageVersionIdRcb🌀Restore();
                                                        }
                                                        $operation = new Operation\Packages\RestorePackageVersionForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb\Restore::class], $arguments['package_type'], $arguments['package_name'], $arguments['username'], $arguments['package_version_id']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 10) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'teams') {
                                if ($pathChunks[4] == '{team_slug}') {
                                    if ($pathChunks[5] == 'discussions') {
                                        if ($pathChunks[6] == '{discussion_number}') {
                                            if ($pathChunks[7] == 'comments') {
                                                if ($pathChunks[8] == '{comment_number}') {
                                                    if ($pathChunks[9] == 'reactions') {
                                                        if ($call == 'POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions') {
                                                            $arguments = array();
                                                            if (array_key_exists('org', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                                            }
                                                            $arguments['org'] = $params['org'];
                                                            unset($params['org']);
                                                            if (array_key_exists('team_slug', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                            }
                                                            $arguments['team_slug'] = $params['team_slug'];
                                                            unset($params['team_slug']);
                                                            if (array_key_exists('discussion_number', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                                            }
                                                            $arguments['discussion_number'] = $params['discussion_number'];
                                                            unset($params['discussion_number']);
                                                            if (array_key_exists('comment_number', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: comment_number');
                                                            }
                                                            $arguments['comment_number'] = $params['comment_number'];
                                                            unset($params['comment_number']);
                                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments🌀CbCommentNumberRcb🌀Reactions();
                                                            }
                                                            $operation = new Operation\Reactions\CreateForTeamDiscussionCommentInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class], $arguments['org'], $arguments['team_slug'], $arguments['discussion_number'], $arguments['comment_number']);
                                                            $request = $operation->createRequest($params);
                                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Reaction {
                                                                return $operation->createResponse($response);
                                                            });
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } elseif ($method === 'PATCH') {
            if ($pathChunksCount === 4) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'app') {
                        if ($pathChunks[2] == 'hook') {
                            if ($pathChunks[3] == 'config') {
                                if ($call == 'PATCH /app/hook/config') {
                                    $arguments = array();
                                    if (\array_key_exists(Hydrator\Operation\App\Hook\Config::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\App\Hook\Config::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Hook🌀Config();
                                    }
                                    $operation = new Operation\Apps\UpdateWebhookConfigForApp($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Hook\Config::class]);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\WebhookConfig {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'applications') {
                        if ($pathChunks[2] == '{client_id}') {
                            if ($pathChunks[3] == 'token') {
                                if ($call == 'PATCH /applications/{client_id}/token') {
                                    $arguments = array();
                                    if (array_key_exists('client_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: client_id');
                                    }
                                    $arguments['client_id'] = $params['client_id'];
                                    unset($params['client_id']);
                                    if (\array_key_exists(Hydrator\Operation\Applications\CbClientIdRcb\Token::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Token::class] = $this->hydrators->getObjectMapperOperation🌀Applications🌀CbClientIdRcb🌀Token();
                                    }
                                    $operation = new Operation\Apps\ResetToken($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Token::class], $arguments['client_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Authorization {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'notifications') {
                        if ($pathChunks[2] == 'threads') {
                            if ($pathChunks[3] == '{thread_id}') {
                                if ($call == 'PATCH /notifications/threads/{thread_id}') {
                                    $arguments = array();
                                    if (array_key_exists('thread_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: thread_id');
                                    }
                                    $arguments['thread_id'] = $params['thread_id'];
                                    unset($params['thread_id']);
                                    if (\array_key_exists(Hydrator\Operation\Notifications\Threads\CbThreadIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Notifications🌀Threads🌀CbThreadIdRcb();
                                    }
                                    $operation = new Operation\Activity\MarkThreadAsRead($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb::class], $arguments['thread_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'projects') {
                        if ($pathChunks[2] == 'columns') {
                            if ($pathChunks[3] == '{column_id}') {
                                if ($call == 'PATCH /projects/columns/{column_id}') {
                                    $arguments = array();
                                    if (array_key_exists('column_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: column_id');
                                    }
                                    $arguments['column_id'] = $params['column_id'];
                                    unset($params['column_id']);
                                    if (\array_key_exists(Hydrator\Operation\Projects\Columns\CbColumnIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀CbColumnIdRcb();
                                    }
                                    $operation = new Operation\Projects\UpdateColumn($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb::class], $arguments['column_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ProjectColumn {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($call == 'PATCH /repos/{owner}/{repo}') {
                                    $arguments = array();
                                    if (array_key_exists('owner', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                    }
                                    $arguments['owner'] = $params['owner'];
                                    unset($params['owner']);
                                    if (array_key_exists('repo', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                    }
                                    $arguments['repo'] = $params['repo'];
                                    unset($params['repo']);
                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb();
                                    }
                                    $operation = new Operation\Repos\Update($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb::class], $arguments['owner'], $arguments['repo']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\FullRepository|\ApiClients\Client\Github\Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'codespaces') {
                            if ($pathChunks[3] == '{codespace_name}') {
                                if ($call == 'PATCH /user/codespaces/{codespace_name}') {
                                    $arguments = array();
                                    if (array_key_exists('codespace_name', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: codespace_name');
                                    }
                                    $arguments['codespace_name'] = $params['codespace_name'];
                                    unset($params['codespace_name']);
                                    if (\array_key_exists(Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀CbCodespaceNameRcb();
                                    }
                                    $operation = new Operation\Codespaces\UpdateForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb::class], $arguments['codespace_name']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Codespace {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'email') {
                            if ($pathChunks[3] == 'visibility') {
                                if ($call == 'PATCH /user/email/visibility') {
                                    $arguments = array();
                                    if (\array_key_exists(Hydrator\Operation\User\Email\Visibility::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Email\Visibility::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Email🌀Visibility();
                                    }
                                    $operation = new Operation\Users\SetPrimaryEmailVisibilityForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Email\Visibility::class]);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'repository_invitations') {
                            if ($pathChunks[3] == '{invitation_id}') {
                                if ($call == 'PATCH /user/repository_invitations/{invitation_id}') {
                                    $arguments = array();
                                    if (array_key_exists('invitation_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: invitation_id');
                                    }
                                    $arguments['invitation_id'] = $params['invitation_id'];
                                    unset($params['invitation_id']);
                                    if (\array_key_exists(Hydrator\Operation\User\RepositoryInvitations\CbInvitationIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\RepositoryInvitations\CbInvitationIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀RepositoryInvitations🌀CbInvitationIdRcb();
                                    }
                                    $operation = new Operation\Repos\AcceptInvitationForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\RepositoryInvitations\CbInvitationIdRcb::class], $arguments['invitation_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 3) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'gists') {
                        if ($pathChunks[2] == '{gist_id}') {
                            if ($call == 'PATCH /gists/{gist_id}') {
                                $arguments = array();
                                if (array_key_exists('gist_id', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: gist_id');
                                }
                                $arguments['gist_id'] = $params['gist_id'];
                                unset($params['gist_id']);
                                if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb();
                                }
                                $operation = new Operation\Gists\Update($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb::class], $arguments['gist_id']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\GistSimple {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($call == 'PATCH /orgs/{org}') {
                                $arguments = array();
                                if (array_key_exists('org', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                }
                                $arguments['org'] = $params['org'];
                                unset($params['org']);
                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb();
                                }
                                $operation = new Operation\Orgs\Update($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb::class], $arguments['org']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\OrganizationFull {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'projects') {
                        if ($pathChunks[2] == '{project_id}') {
                            if ($call == 'PATCH /projects/{project_id}') {
                                $arguments = array();
                                if (array_key_exists('project_id', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: project_id');
                                }
                                $arguments['project_id'] = $params['project_id'];
                                unset($params['project_id']);
                                if (\array_key_exists(Hydrator\Operation\Projects\CbProjectIdRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀CbProjectIdRcb();
                                }
                                $operation = new Operation\Projects\Update($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb::class], $arguments['project_id']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Project {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'teams') {
                        if ($pathChunks[2] == '{team_id}') {
                            if ($call == 'PATCH /teams/{team_id}') {
                                $arguments = array();
                                if (array_key_exists('team_id', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                }
                                $arguments['team_id'] = $params['team_id'];
                                unset($params['team_id']);
                                if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb();
                                }
                                $operation = new Operation\Teams\UpdateLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb::class], $arguments['team_id']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamFull {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 5) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'gists') {
                        if ($pathChunks[2] == '{gist_id}') {
                            if ($pathChunks[3] == 'comments') {
                                if ($pathChunks[4] == '{comment_id}') {
                                    if ($call == 'PATCH /gists/{gist_id}/comments/{comment_id}') {
                                        $arguments = array();
                                        if (array_key_exists('gist_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: gist_id');
                                        }
                                        $arguments['gist_id'] = $params['gist_id'];
                                        unset($params['gist_id']);
                                        if (array_key_exists('comment_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                        }
                                        $arguments['comment_id'] = $params['comment_id'];
                                        unset($params['comment_id']);
                                        if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Comments🌀CbCommentIdRcb();
                                        }
                                        $operation = new Operation\Gists\UpdateComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments\CbCommentIdRcb::class], $arguments['gist_id'], $arguments['comment_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\GistComment {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'hooks') {
                                if ($pathChunks[4] == '{hook_id}') {
                                    if ($call == 'PATCH /orgs/{org}/hooks/{hook_id}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('hook_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: hook_id');
                                        }
                                        $arguments['hook_id'] = $params['hook_id'];
                                        unset($params['hook_id']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks🌀CbHookIdRcb();
                                        }
                                        $operation = new Operation\Orgs\UpdateWebhook($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb::class], $arguments['org'], $arguments['hook_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\OrgHook {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'teams') {
                                if ($pathChunks[4] == '{team_slug}') {
                                    if ($call == 'PATCH /orgs/{org}/teams/{team_slug}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('team_slug', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                        }
                                        $arguments['team_slug'] = $params['team_slug'];
                                        unset($params['team_slug']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb();
                                        }
                                        $operation = new Operation\Teams\UpdateInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb::class], $arguments['org'], $arguments['team_slug']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamFull {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'projects') {
                        if ($pathChunks[2] == 'columns') {
                            if ($pathChunks[3] == 'cards') {
                                if ($pathChunks[4] == '{card_id}') {
                                    if ($call == 'PATCH /projects/columns/cards/{card_id}') {
                                        $arguments = array();
                                        if (array_key_exists('card_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: card_id');
                                        }
                                        $arguments['card_id'] = $params['card_id'];
                                        unset($params['card_id']);
                                        if (\array_key_exists(Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀Cards🌀CbCardIdRcb();
                                        }
                                        $operation = new Operation\Projects\UpdateCard($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb::class], $arguments['card_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ProjectCard {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'import') {
                                    if ($call == 'PATCH /repos/{owner}/{repo}/import') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Import();
                                        }
                                        $operation = new Operation\Migrations\UpdateImport($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Import {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'teams') {
                        if ($pathChunks[2] == '{team_id}') {
                            if ($pathChunks[3] == 'discussions') {
                                if ($pathChunks[4] == '{discussion_number}') {
                                    if ($call == 'PATCH /teams/{team_id}/discussions/{discussion_number}') {
                                        $arguments = array();
                                        if (array_key_exists('team_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                        }
                                        $arguments['team_id'] = $params['team_id'];
                                        unset($params['team_id']);
                                        if (array_key_exists('discussion_number', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                        }
                                        $arguments['discussion_number'] = $params['discussion_number'];
                                        unset($params['discussion_number']);
                                        if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb();
                                        }
                                        $operation = new Operation\Teams\UpdateDiscussionLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb::class], $arguments['team_id'], $arguments['discussion_number']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamDiscussion {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'memberships') {
                            if ($pathChunks[3] == 'orgs') {
                                if ($pathChunks[4] == '{org}') {
                                    if ($call == 'PATCH /user/memberships/orgs/{org}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (\array_key_exists(Hydrator\Operation\User\Memberships\Orgs\CbOrgRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Memberships\Orgs\CbOrgRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Memberships🌀Orgs🌀CbOrgRcb();
                                        }
                                        $operation = new Operation\Orgs\UpdateMembershipForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Memberships\Orgs\CbOrgRcb::class], $arguments['org']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\OrgMembership {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 6) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'actions') {
                                if ($pathChunks[4] == 'required_workflows') {
                                    if ($pathChunks[5] == '{required_workflow_id}') {
                                        if ($call == 'PATCH /orgs/{org}/actions/required_workflows/{required_workflow_id}') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('required_workflow_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: required_workflow_id');
                                            }
                                            $arguments['required_workflow_id'] = $params['required_workflow_id'];
                                            unset($params['required_workflow_id']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀RequiredWorkflows🌀CbRequiredWorkflowIdRcb();
                                            }
                                            $operation = new Operation\Actions\UpdateRequiredWorkflow($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdRcb::class], $arguments['org'], $arguments['required_workflow_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\RequiredWorkflow {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'variables') {
                                    if ($pathChunks[5] == '{name}') {
                                        if ($call == 'PATCH /orgs/{org}/actions/variables/{name}') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: name');
                                            }
                                            $arguments['name'] = $params['name'];
                                            unset($params['name']);
                                            $operation = new Operation\Actions\UpdateOrgVariable($this->requestSchemaValidator, $arguments['org'], $arguments['name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'hooks') {
                                if ($pathChunks[4] == '{hook_id}') {
                                    if ($pathChunks[5] == 'config') {
                                        if ($call == 'PATCH /orgs/{org}/hooks/{hook_id}/config') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('hook_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: hook_id');
                                            }
                                            $arguments['hook_id'] = $params['hook_id'];
                                            unset($params['hook_id']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Config::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Config::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks🌀CbHookIdRcb🌀Config();
                                            }
                                            $operation = new Operation\Orgs\UpdateWebhookConfigForOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Config::class], $arguments['org'], $arguments['hook_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\WebhookConfig {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'check-runs') {
                                    if ($pathChunks[5] == '{check_run_id}') {
                                        if ($call == 'PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('check_run_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: check_run_id');
                                            }
                                            $arguments['check_run_id'] = $params['check_run_id'];
                                            unset($params['check_run_id']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckDashRuns🌀CbCheckRunIdRcb();
                                            }
                                            $operation = new Operation\Checks\Update($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['check_run_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CheckRun {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'check-suites') {
                                    if ($pathChunks[5] == 'preferences') {
                                        if ($call == 'PATCH /repos/{owner}/{repo}/check-suites/preferences') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckSuites\Preferences::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckSuites\Preferences::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckSuites🌀Preferences();
                                            }
                                            $operation = new Operation\Checks\SetSuitesPreferences($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckSuites\Preferences::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CheckSuitePreference {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'code-scanning') {
                                    if ($pathChunks[5] == 'default-setup') {
                                        if ($call == 'PATCH /repos/{owner}/{repo}/code-scanning/default-setup') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\DefaultSetup::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\DefaultSetup::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeScanning🌀DefaultSetup();
                                            }
                                            $operation = new Operation\CodeScanning\UpdateDefaultSetup($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\DefaultSetup::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject|\ApiClients\Client\Github\Schema\CodeScanningDefaultSetupUpdateResponse {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'comments') {
                                    if ($pathChunks[5] == '{comment_id}') {
                                        if ($call == 'PATCH /repos/{owner}/{repo}/comments/{comment_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('comment_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                            }
                                            $arguments['comment_id'] = $params['comment_id'];
                                            unset($params['comment_id']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Comments🌀CbCommentIdRcb();
                                            }
                                            $operation = new Operation\Repos\UpdateCommitComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['comment_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CommitComment {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'hooks') {
                                    if ($pathChunks[5] == '{hook_id}') {
                                        if ($call == 'PATCH /repos/{owner}/{repo}/hooks/{hook_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('hook_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: hook_id');
                                            }
                                            $arguments['hook_id'] = $params['hook_id'];
                                            unset($params['hook_id']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb();
                                            }
                                            $operation = new Operation\Repos\UpdateWebhook($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['hook_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Hook {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'import') {
                                    if ($pathChunks[5] == 'lfs') {
                                        if ($call == 'PATCH /repos/{owner}/{repo}/import/lfs') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\Lfs::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\Lfs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Import🌀Lfs();
                                            }
                                            $operation = new Operation\Migrations\SetLfsPreference($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\Lfs::class], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Import {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'invitations') {
                                    if ($pathChunks[5] == '{invitation_id}') {
                                        if ($call == 'PATCH /repos/{owner}/{repo}/invitations/{invitation_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('invitation_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: invitation_id');
                                            }
                                            $arguments['invitation_id'] = $params['invitation_id'];
                                            unset($params['invitation_id']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Invitations\CbInvitationIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Invitations\CbInvitationIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Invitations🌀CbInvitationIdRcb();
                                            }
                                            $operation = new Operation\Repos\UpdateInvitation($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Invitations\CbInvitationIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['invitation_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\RepositoryInvitation {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'issues') {
                                    if ($pathChunks[5] == '{issue_number}') {
                                        if ($call == 'PATCH /repos/{owner}/{repo}/issues/{issue_number}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('issue_number', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: issue_number');
                                            }
                                            $arguments['issue_number'] = $params['issue_number'];
                                            unset($params['issue_number']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb();
                                            }
                                            $operation = new Operation\Issues\Update($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb::class], $arguments['owner'], $arguments['repo'], $arguments['issue_number']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Issue|\ApiClients\Client\Github\Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'labels') {
                                    if ($pathChunks[5] == '{name}') {
                                        if ($call == 'PATCH /repos/{owner}/{repo}/labels/{name}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: name');
                                            }
                                            $arguments['name'] = $params['name'];
                                            unset($params['name']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels\CbNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels\CbNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Labels🌀CbNameRcb();
                                            }
                                            $operation = new Operation\Issues\UpdateLabel($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels\CbNameRcb::class], $arguments['owner'], $arguments['repo'], $arguments['name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Label {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'milestones') {
                                    if ($pathChunks[5] == '{milestone_number}') {
                                        if ($call == 'PATCH /repos/{owner}/{repo}/milestones/{milestone_number}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('milestone_number', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: milestone_number');
                                            }
                                            $arguments['milestone_number'] = $params['milestone_number'];
                                            unset($params['milestone_number']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Milestones🌀CbMilestoneNumberRcb();
                                            }
                                            $operation = new Operation\Issues\UpdateMilestone($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb::class], $arguments['owner'], $arguments['repo'], $arguments['milestone_number']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Milestone {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'pulls') {
                                    if ($pathChunks[5] == '{pull_number}') {
                                        if ($call == 'PATCH /repos/{owner}/{repo}/pulls/{pull_number}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('pull_number', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                            }
                                            $arguments['pull_number'] = $params['pull_number'];
                                            unset($params['pull_number']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb();
                                            }
                                            $operation = new Operation\Pulls\Update($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PullRequest {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'releases') {
                                    if ($pathChunks[5] == '{release_id}') {
                                        if ($call == 'PATCH /repos/{owner}/{repo}/releases/{release_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('release_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: release_id');
                                            }
                                            $arguments['release_id'] = $params['release_id'];
                                            unset($params['release_id']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀CbReleaseIdRcb();
                                            }
                                            $operation = new Operation\Repos\UpdateRelease($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['release_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Release {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'security-advisories') {
                                    if ($pathChunks[5] == '{ghsa_id}') {
                                        if ($call == 'PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('ghsa_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: ghsa_id');
                                            }
                                            $arguments['ghsa_id'] = $params['ghsa_id'];
                                            unset($params['ghsa_id']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecurityDashAdvisories\CbGhsaIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecurityDashAdvisories\CbGhsaIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀SecurityDashAdvisories🌀CbGhsaIdRcb();
                                            }
                                            $operation = new Operation\SecurityAdvisories\UpdateRepositoryAdvisory($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecurityDashAdvisories\CbGhsaIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['ghsa_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\RepositoryAdvisory {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 7) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'teams') {
                                if ($pathChunks[4] == '{team_slug}') {
                                    if ($pathChunks[5] == 'discussions') {
                                        if ($pathChunks[6] == '{discussion_number}') {
                                            if ($call == 'PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('team_slug', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                }
                                                $arguments['team_slug'] = $params['team_slug'];
                                                unset($params['team_slug']);
                                                if (array_key_exists('discussion_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                                }
                                                $arguments['discussion_number'] = $params['discussion_number'];
                                                unset($params['discussion_number']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb();
                                                }
                                                $operation = new Operation\Teams\UpdateDiscussionInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb::class], $arguments['org'], $arguments['team_slug'], $arguments['discussion_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamDiscussion {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'variables') {
                                        if ($pathChunks[6] == '{name}') {
                                            if ($call == 'PATCH /repos/{owner}/{repo}/actions/variables/{name}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: name');
                                                }
                                                $arguments['name'] = $params['name'];
                                                unset($params['name']);
                                                $operation = new Operation\Actions\UpdateRepoVariable($this->requestSchemaValidator, $arguments['owner'], $arguments['repo'], $arguments['name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'code-scanning') {
                                    if ($pathChunks[5] == 'alerts') {
                                        if ($pathChunks[6] == '{alert_number}') {
                                            if ($call == 'PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('alert_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: alert_number');
                                                }
                                                $arguments['alert_number'] = $params['alert_number'];
                                                unset($params['alert_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Alerts\CbAlertNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Alerts\CbAlertNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeDashScanning🌀Alerts🌀CbAlertNumberRcb();
                                                }
                                                $operation = new Operation\CodeScanning\UpdateAlert($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Alerts\CbAlertNumberRcb::class], $arguments['owner'], $arguments['repo'], $arguments['alert_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CodeScanningAlert {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'dependabot') {
                                    if ($pathChunks[5] == 'alerts') {
                                        if ($pathChunks[6] == '{alert_number}') {
                                            if ($call == 'PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('alert_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: alert_number');
                                                }
                                                $arguments['alert_number'] = $params['alert_number'];
                                                unset($params['alert_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Alerts\CbAlertNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Alerts\CbAlertNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Dependabot🌀Alerts🌀CbAlertNumberRcb();
                                                }
                                                $operation = new Operation\Dependabot\UpdateAlert($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Alerts\CbAlertNumberRcb::class], $arguments['owner'], $arguments['repo'], $arguments['alert_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\DependabotAlert {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'git') {
                                    if ($pathChunks[5] == 'refs') {
                                        if ($pathChunks[6] == '{ref}') {
                                            if ($call == 'PATCH /repos/{owner}/{repo}/git/refs/{ref}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('ref', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: ref');
                                                }
                                                $arguments['ref'] = $params['ref'];
                                                unset($params['ref']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Refs\CbRefRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Refs\CbRefRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Refs🌀CbRefRcb();
                                                }
                                                $operation = new Operation\Git\UpdateRef($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Refs\CbRefRcb::class], $arguments['owner'], $arguments['repo'], $arguments['ref']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\GitRef {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'hooks') {
                                    if ($pathChunks[5] == '{hook_id}') {
                                        if ($pathChunks[6] == 'config') {
                                            if ($call == 'PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('hook_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: hook_id');
                                                }
                                                $arguments['hook_id'] = $params['hook_id'];
                                                unset($params['hook_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Config::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Config::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb🌀Config();
                                                }
                                                $operation = new Operation\Repos\UpdateWebhookConfigForRepo($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Config::class], $arguments['owner'], $arguments['repo'], $arguments['hook_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\WebhookConfig {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'import') {
                                    if ($pathChunks[5] == 'authors') {
                                        if ($pathChunks[6] == '{author_id}') {
                                            if ($call == 'PATCH /repos/{owner}/{repo}/import/authors/{author_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('author_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: author_id');
                                                }
                                                $arguments['author_id'] = $params['author_id'];
                                                unset($params['author_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\Authors\CbAuthorIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\Authors\CbAuthorIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Import🌀Authors🌀CbAuthorIdRcb();
                                                }
                                                $operation = new Operation\Migrations\MapCommitAuthor($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\Authors\CbAuthorIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['author_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PorterAuthor {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'issues') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($pathChunks[6] == '{comment_id}') {
                                            if ($call == 'PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('comment_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                                }
                                                $arguments['comment_id'] = $params['comment_id'];
                                                unset($params['comment_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀Comments🌀CbCommentIdRcb();
                                                }
                                                $operation = new Operation\Issues\UpdateComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['comment_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\IssueComment {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'pulls') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($pathChunks[6] == '{comment_id}') {
                                            if ($call == 'PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('comment_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                                }
                                                $arguments['comment_id'] = $params['comment_id'];
                                                unset($params['comment_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀Comments🌀CbCommentIdRcb();
                                                }
                                                $operation = new Operation\Pulls\UpdateReviewComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['comment_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PullRequestReviewComment {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'releases') {
                                    if ($pathChunks[5] == 'assets') {
                                        if ($pathChunks[6] == '{asset_id}') {
                                            if ($call == 'PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('asset_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: asset_id');
                                                }
                                                $arguments['asset_id'] = $params['asset_id'];
                                                unset($params['asset_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Assets\CbAssetIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Assets\CbAssetIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀Assets🌀CbAssetIdRcb();
                                                }
                                                $operation = new Operation\Repos\UpdateReleaseAsset($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Assets\CbAssetIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['asset_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ReleaseAsset {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'secret-scanning') {
                                    if ($pathChunks[5] == 'alerts') {
                                        if ($pathChunks[6] == '{alert_number}') {
                                            if ($call == 'PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('alert_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: alert_number');
                                                }
                                                $arguments['alert_number'] = $params['alert_number'];
                                                unset($params['alert_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretDashScanning\Alerts\CbAlertNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretDashScanning\Alerts\CbAlertNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀SecretDashScanning🌀Alerts🌀CbAlertNumberRcb();
                                                }
                                                $operation = new Operation\SecretScanning\UpdateAlert($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretDashScanning\Alerts\CbAlertNumberRcb::class], $arguments['owner'], $arguments['repo'], $arguments['alert_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\SecretScanningAlert {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repositories') {
                        if ($pathChunks[2] == '{repository_id}') {
                            if ($pathChunks[3] == 'environments') {
                                if ($pathChunks[4] == '{environment_name}') {
                                    if ($pathChunks[5] == 'variables') {
                                        if ($pathChunks[6] == '{name}') {
                                            if ($call == 'PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}') {
                                                $arguments = array();
                                                if (array_key_exists('repository_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                }
                                                $arguments['repository_id'] = $params['repository_id'];
                                                unset($params['repository_id']);
                                                if (array_key_exists('name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: name');
                                                }
                                                $arguments['name'] = $params['name'];
                                                unset($params['name']);
                                                if (array_key_exists('environment_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: environment_name');
                                                }
                                                $arguments['environment_name'] = $params['environment_name'];
                                                unset($params['environment_name']);
                                                $operation = new Operation\Actions\UpdateEnvironmentVariable($this->requestSchemaValidator, $arguments['repository_id'], $arguments['name'], $arguments['environment_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'teams') {
                        if ($pathChunks[2] == '{team_id}') {
                            if ($pathChunks[3] == 'discussions') {
                                if ($pathChunks[4] == '{discussion_number}') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($pathChunks[6] == '{comment_number}') {
                                            if ($call == 'PATCH /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}') {
                                                $arguments = array();
                                                if (array_key_exists('team_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                                }
                                                $arguments['team_id'] = $params['team_id'];
                                                unset($params['team_id']);
                                                if (array_key_exists('discussion_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                                }
                                                $arguments['discussion_number'] = $params['discussion_number'];
                                                unset($params['discussion_number']);
                                                if (array_key_exists('comment_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: comment_number');
                                                }
                                                $arguments['comment_number'] = $params['comment_number'];
                                                unset($params['comment_number']);
                                                if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments🌀CbCommentNumberRcb();
                                                }
                                                $operation = new Operation\Teams\UpdateDiscussionCommentLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class], $arguments['team_id'], $arguments['discussion_number'], $arguments['comment_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamDiscussionComment {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 9) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'teams') {
                                if ($pathChunks[4] == '{team_slug}') {
                                    if ($pathChunks[5] == 'discussions') {
                                        if ($pathChunks[6] == '{discussion_number}') {
                                            if ($pathChunks[7] == 'comments') {
                                                if ($pathChunks[8] == '{comment_number}') {
                                                    if ($call == 'PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}') {
                                                        $arguments = array();
                                                        if (array_key_exists('org', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                                        }
                                                        $arguments['org'] = $params['org'];
                                                        unset($params['org']);
                                                        if (array_key_exists('team_slug', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                        }
                                                        $arguments['team_slug'] = $params['team_slug'];
                                                        unset($params['team_slug']);
                                                        if (array_key_exists('discussion_number', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                                        }
                                                        $arguments['discussion_number'] = $params['discussion_number'];
                                                        unset($params['discussion_number']);
                                                        if (array_key_exists('comment_number', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: comment_number');
                                                        }
                                                        $arguments['comment_number'] = $params['comment_number'];
                                                        unset($params['comment_number']);
                                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments🌀CbCommentNumberRcb();
                                                        }
                                                        $operation = new Operation\Teams\UpdateDiscussionCommentInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class], $arguments['org'], $arguments['team_slug'], $arguments['discussion_number'], $arguments['comment_number']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamDiscussionComment {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 8) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'branches') {
                                    if ($pathChunks[5] == '{branch}') {
                                        if ($pathChunks[6] == 'protection') {
                                            if ($pathChunks[7] == 'required_pull_request_reviews') {
                                                if ($call == 'PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('branch', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                    }
                                                    $arguments['branch'] = $params['branch'];
                                                    unset($params['branch']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredPullRequestReviews::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredPullRequestReviews::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredPullRequestReviews();
                                                    }
                                                    $operation = new Operation\Repos\UpdatePullRequestReviewProtection($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredPullRequestReviews::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ProtectedBranchPullRequestReview {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'required_status_checks') {
                                                if ($call == 'PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('branch', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                    }
                                                    $arguments['branch'] = $params['branch'];
                                                    unset($params['branch']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredStatusChecks();
                                                    }
                                                    $operation = new Operation\Repos\UpdateStatusCheckProtection($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\StatusCheckPolicy {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 2) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'user') {
                        if ($call == 'PATCH /user') {
                            $arguments = array();
                            if (\array_key_exists(Hydrator\Operation\User::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\User::class] = $this->hydrators->getObjectMapperOperation🌀User();
                            }
                            $operation = new Operation\Users\UpdateAuthenticated($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User::class]);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PrivateUser {
                                return $operation->createResponse($response);
                            });
                        }
                    }
                }
            }
        } elseif ($method === 'DELETE') {
            if ($pathChunksCount === 4) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'app') {
                        if ($pathChunks[2] == 'installations') {
                            if ($pathChunks[3] == '{installation_id}') {
                                if ($call == 'DELETE /app/installations/{installation_id}') {
                                    $arguments = array();
                                    if (array_key_exists('installation_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: installation_id');
                                    }
                                    $arguments['installation_id'] = $params['installation_id'];
                                    unset($params['installation_id']);
                                    if (\array_key_exists(Hydrator\Operation\App\Installations\CbInstallationIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Installations🌀CbInstallationIdRcb();
                                    }
                                    $operation = new Operation\Apps\DeleteInstallation($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb::class], $arguments['installation_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'applications') {
                        if ($pathChunks[2] == '{client_id}') {
                            if ($pathChunks[3] == 'grant') {
                                if ($call == 'DELETE /applications/{client_id}/grant') {
                                    $arguments = array();
                                    if (array_key_exists('client_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: client_id');
                                    }
                                    $arguments['client_id'] = $params['client_id'];
                                    unset($params['client_id']);
                                    if (\array_key_exists(Hydrator\Operation\Applications\CbClientIdRcb\Grant::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Grant::class] = $this->hydrators->getObjectMapperOperation🌀Applications🌀CbClientIdRcb🌀Grant();
                                    }
                                    $operation = new Operation\Apps\DeleteAuthorization($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Grant::class], $arguments['client_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif ($pathChunks[3] == 'token') {
                                if ($call == 'DELETE /applications/{client_id}/token') {
                                    $arguments = array();
                                    if (array_key_exists('client_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: client_id');
                                    }
                                    $arguments['client_id'] = $params['client_id'];
                                    unset($params['client_id']);
                                    if (\array_key_exists(Hydrator\Operation\Applications\CbClientIdRcb\Token::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Token::class] = $this->hydrators->getObjectMapperOperation🌀Applications🌀CbClientIdRcb🌀Token();
                                    }
                                    $operation = new Operation\Apps\DeleteToken($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Token::class], $arguments['client_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'gists') {
                        if ($pathChunks[2] == '{gist_id}') {
                            if ($pathChunks[3] == 'star') {
                                if ($call == 'DELETE /gists/{gist_id}/star') {
                                    $arguments = array();
                                    if (array_key_exists('gist_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: gist_id');
                                    }
                                    $arguments['gist_id'] = $params['gist_id'];
                                    unset($params['gist_id']);
                                    if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Star::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Star::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Star();
                                    }
                                    $operation = new Operation\Gists\Unstar($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Star::class], $arguments['gist_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'interaction-limits') {
                                if ($call == 'DELETE /orgs/{org}/interaction-limits') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    $operation = new Operation\Interactions\RemoveRestrictionsForOrg($arguments['org']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'projects') {
                        if ($pathChunks[2] == 'columns') {
                            if ($pathChunks[3] == '{column_id}') {
                                if ($call == 'DELETE /projects/columns/{column_id}') {
                                    $arguments = array();
                                    if (array_key_exists('column_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: column_id');
                                    }
                                    $arguments['column_id'] = $params['column_id'];
                                    unset($params['column_id']);
                                    if (\array_key_exists(Hydrator\Operation\Projects\Columns\CbColumnIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀CbColumnIdRcb();
                                    }
                                    $operation = new Operation\Projects\DeleteColumn($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb::class], $arguments['column_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($call == 'DELETE /repos/{owner}/{repo}') {
                                    $arguments = array();
                                    if (array_key_exists('owner', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                    }
                                    $arguments['owner'] = $params['owner'];
                                    unset($params['owner']);
                                    if (array_key_exists('repo', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                    }
                                    $arguments['repo'] = $params['repo'];
                                    unset($params['repo']);
                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb();
                                    }
                                    $operation = new Operation\Repos\Delete($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb::class], $arguments['owner'], $arguments['repo']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'blocks') {
                            if ($pathChunks[3] == '{username}') {
                                if ($call == 'DELETE /user/blocks/{username}') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (\array_key_exists(Hydrator\Operation\User\Blocks\CbUsernameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Blocks\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Blocks🌀CbUsernameRcb();
                                    }
                                    $operation = new Operation\Users\Unblock($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Blocks\CbUsernameRcb::class], $arguments['username']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'codespaces') {
                            if ($pathChunks[3] == '{codespace_name}') {
                                if ($call == 'DELETE /user/codespaces/{codespace_name}') {
                                    $arguments = array();
                                    if (array_key_exists('codespace_name', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: codespace_name');
                                    }
                                    $arguments['codespace_name'] = $params['codespace_name'];
                                    unset($params['codespace_name']);
                                    if (\array_key_exists(Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀CbCodespaceNameRcb();
                                    }
                                    $operation = new Operation\Codespaces\DeleteForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb::class], $arguments['codespace_name']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Codespaces\DeleteForAuthenticatedUser\Response\Applicationjson\H202 {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'following') {
                            if ($pathChunks[3] == '{username}') {
                                if ($call == 'DELETE /user/following/{username}') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (\array_key_exists(Hydrator\Operation\User\Following\CbUsernameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Following\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Following🌀CbUsernameRcb();
                                    }
                                    $operation = new Operation\Users\Unfollow($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Following\CbUsernameRcb::class], $arguments['username']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'gpg_keys') {
                            if ($pathChunks[3] == '{gpg_key_id}') {
                                if ($call == 'DELETE /user/gpg_keys/{gpg_key_id}') {
                                    $arguments = array();
                                    if (array_key_exists('gpg_key_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: gpg_key_id');
                                    }
                                    $arguments['gpg_key_id'] = $params['gpg_key_id'];
                                    unset($params['gpg_key_id']);
                                    if (\array_key_exists(Hydrator\Operation\User\GpgKeys\CbGpgKeyIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\GpgKeys\CbGpgKeyIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀GpgKeys🌀CbGpgKeyIdRcb();
                                    }
                                    $operation = new Operation\Users\DeleteGpgKeyForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\GpgKeys\CbGpgKeyIdRcb::class], $arguments['gpg_key_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'keys') {
                            if ($pathChunks[3] == '{key_id}') {
                                if ($call == 'DELETE /user/keys/{key_id}') {
                                    $arguments = array();
                                    if (array_key_exists('key_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: key_id');
                                    }
                                    $arguments['key_id'] = $params['key_id'];
                                    unset($params['key_id']);
                                    if (\array_key_exists(Hydrator\Operation\User\Keys\CbKeyIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Keys\CbKeyIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Keys🌀CbKeyIdRcb();
                                    }
                                    $operation = new Operation\Users\DeletePublicSshKeyForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Keys\CbKeyIdRcb::class], $arguments['key_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'repository_invitations') {
                            if ($pathChunks[3] == '{invitation_id}') {
                                if ($call == 'DELETE /user/repository_invitations/{invitation_id}') {
                                    $arguments = array();
                                    if (array_key_exists('invitation_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: invitation_id');
                                    }
                                    $arguments['invitation_id'] = $params['invitation_id'];
                                    unset($params['invitation_id']);
                                    if (\array_key_exists(Hydrator\Operation\User\RepositoryInvitations\CbInvitationIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\RepositoryInvitations\CbInvitationIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀RepositoryInvitations🌀CbInvitationIdRcb();
                                    }
                                    $operation = new Operation\Repos\DeclineInvitationForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\RepositoryInvitations\CbInvitationIdRcb::class], $arguments['invitation_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'ssh_signing_keys') {
                            if ($pathChunks[3] == '{ssh_signing_key_id}') {
                                if ($call == 'DELETE /user/ssh_signing_keys/{ssh_signing_key_id}') {
                                    $arguments = array();
                                    if (array_key_exists('ssh_signing_key_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: ssh_signing_key_id');
                                    }
                                    $arguments['ssh_signing_key_id'] = $params['ssh_signing_key_id'];
                                    unset($params['ssh_signing_key_id']);
                                    if (\array_key_exists(Hydrator\Operation\User\SshSigningKeys\CbSshSigningKeyIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\SshSigningKeys\CbSshSigningKeyIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀SshSigningKeys🌀CbSshSigningKeyIdRcb();
                                    }
                                    $operation = new Operation\Users\DeleteSshSigningKeyForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\SshSigningKeys\CbSshSigningKeyIdRcb::class], $arguments['ssh_signing_key_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 5) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'app') {
                        if ($pathChunks[2] == 'installations') {
                            if ($pathChunks[3] == '{installation_id}') {
                                if ($pathChunks[4] == 'suspended') {
                                    if ($call == 'DELETE /app/installations/{installation_id}/suspended') {
                                        $arguments = array();
                                        if (array_key_exists('installation_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: installation_id');
                                        }
                                        $arguments['installation_id'] = $params['installation_id'];
                                        unset($params['installation_id']);
                                        if (\array_key_exists(Hydrator\Operation\App\Installations\CbInstallationIdRcb\Suspended::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb\Suspended::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Installations🌀CbInstallationIdRcb🌀Suspended();
                                        }
                                        $operation = new Operation\Apps\UnsuspendInstallation($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb\Suspended::class], $arguments['installation_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'gists') {
                        if ($pathChunks[2] == '{gist_id}') {
                            if ($pathChunks[3] == 'comments') {
                                if ($pathChunks[4] == '{comment_id}') {
                                    if ($call == 'DELETE /gists/{gist_id}/comments/{comment_id}') {
                                        $arguments = array();
                                        if (array_key_exists('gist_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: gist_id');
                                        }
                                        $arguments['gist_id'] = $params['gist_id'];
                                        unset($params['gist_id']);
                                        if (array_key_exists('comment_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                        }
                                        $arguments['comment_id'] = $params['comment_id'];
                                        unset($params['comment_id']);
                                        if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Comments🌀CbCommentIdRcb();
                                        }
                                        $operation = new Operation\Gists\DeleteComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments\CbCommentIdRcb::class], $arguments['gist_id'], $arguments['comment_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'notifications') {
                        if ($pathChunks[2] == 'threads') {
                            if ($pathChunks[3] == '{thread_id}') {
                                if ($pathChunks[4] == 'subscription') {
                                    if ($call == 'DELETE /notifications/threads/{thread_id}/subscription') {
                                        $arguments = array();
                                        if (array_key_exists('thread_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: thread_id');
                                        }
                                        $arguments['thread_id'] = $params['thread_id'];
                                        unset($params['thread_id']);
                                        if (\array_key_exists(Hydrator\Operation\Notifications\Threads\CbThreadIdRcb\Subscription::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb\Subscription::class] = $this->hydrators->getObjectMapperOperation🌀Notifications🌀Threads🌀CbThreadIdRcb🌀Subscription();
                                        }
                                        $operation = new Operation\Activity\DeleteThreadSubscription($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb\Subscription::class], $arguments['thread_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'blocks') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'DELETE /orgs/{org}/blocks/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        $operation = new Operation\Orgs\UnblockUser($arguments['org'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'hooks') {
                                if ($pathChunks[4] == '{hook_id}') {
                                    if ($call == 'DELETE /orgs/{org}/hooks/{hook_id}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('hook_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: hook_id');
                                        }
                                        $arguments['hook_id'] = $params['hook_id'];
                                        unset($params['hook_id']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks🌀CbHookIdRcb();
                                        }
                                        $operation = new Operation\Orgs\DeleteWebhook($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb::class], $arguments['org'], $arguments['hook_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'invitations') {
                                if ($pathChunks[4] == '{invitation_id}') {
                                    if ($call == 'DELETE /orgs/{org}/invitations/{invitation_id}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('invitation_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: invitation_id');
                                        }
                                        $arguments['invitation_id'] = $params['invitation_id'];
                                        unset($params['invitation_id']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Invitations\CbInvitationIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Invitations\CbInvitationIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Invitations🌀CbInvitationIdRcb();
                                        }
                                        $operation = new Operation\Orgs\CancelInvitation($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Invitations\CbInvitationIdRcb::class], $arguments['org'], $arguments['invitation_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'members') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'DELETE /orgs/{org}/members/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Members🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Orgs\RemoveMember($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb::class], $arguments['org'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'memberships') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'DELETE /orgs/{org}/memberships/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Memberships\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Memberships\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Memberships🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Orgs\RemoveMembershipForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Memberships\CbUsernameRcb::class], $arguments['org'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'outside_collaborators') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'DELETE /orgs/{org}/outside_collaborators/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\OutsideCollaborators\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\OutsideCollaborators\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀OutsideCollaborators🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Orgs\RemoveOutsideCollaborator($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\OutsideCollaborators\CbUsernameRcb::class], $arguments['org'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'public_members') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'DELETE /orgs/{org}/public_members/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        $operation = new Operation\Orgs\RemovePublicMembershipForAuthenticatedUser($arguments['org'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'teams') {
                                if ($pathChunks[4] == '{team_slug}') {
                                    if ($call == 'DELETE /orgs/{org}/teams/{team_slug}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('team_slug', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                        }
                                        $arguments['team_slug'] = $params['team_slug'];
                                        unset($params['team_slug']);
                                        $operation = new Operation\Teams\DeleteInOrg($arguments['org'], $arguments['team_slug']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'projects') {
                        if ($pathChunks[2] == 'columns') {
                            if ($pathChunks[3] == 'cards') {
                                if ($pathChunks[4] == '{card_id}') {
                                    if ($call == 'DELETE /projects/columns/cards/{card_id}') {
                                        $arguments = array();
                                        if (array_key_exists('card_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: card_id');
                                        }
                                        $arguments['card_id'] = $params['card_id'];
                                        unset($params['card_id']);
                                        if (\array_key_exists(Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀Cards🌀CbCardIdRcb();
                                        }
                                        $operation = new Operation\Projects\DeleteCard($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb::class], $arguments['card_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif ($pathChunks[2] == '{project_id}') {
                            if ($pathChunks[3] == 'collaborators') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'DELETE /projects/{project_id}/collaborators/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('project_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: project_id');
                                        }
                                        $arguments['project_id'] = $params['project_id'];
                                        unset($params['project_id']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        if (\array_key_exists(Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀CbProjectIdRcb🌀Collaborators🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Projects\RemoveCollaborator($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators\CbUsernameRcb::class], $arguments['project_id'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'automated-security-fixes') {
                                    if ($call == 'DELETE /repos/{owner}/{repo}/automated-security-fixes') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        $operation = new Operation\Repos\DisableAutomatedSecurityFixes($arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'import') {
                                    if ($call == 'DELETE /repos/{owner}/{repo}/import') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Import();
                                        }
                                        $operation = new Operation\Migrations\CancelImport($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'interaction-limits') {
                                    if ($call == 'DELETE /repos/{owner}/{repo}/interaction-limits') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        $operation = new Operation\Interactions\RemoveRestrictionsForRepo($arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'lfs') {
                                    if ($call == 'DELETE /repos/{owner}/{repo}/lfs') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        $operation = new Operation\Repos\DisableLfsForRepo($arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'pages') {
                                    if ($call == 'DELETE /repos/{owner}/{repo}/pages') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages();
                                        }
                                        $operation = new Operation\Repos\DeletePagesSite($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'subscription') {
                                    if ($call == 'DELETE /repos/{owner}/{repo}/subscription') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        $operation = new Operation\Activity\DeleteRepoSubscription($arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'vulnerability-alerts') {
                                    if ($call == 'DELETE /repos/{owner}/{repo}/vulnerability-alerts') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        $operation = new Operation\Repos\DisableVulnerabilityAlerts($arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'teams') {
                        if ($pathChunks[2] == '{team_id}') {
                            if ($pathChunks[3] == 'discussions') {
                                if ($pathChunks[4] == '{discussion_number}') {
                                    if ($call == 'DELETE /teams/{team_id}/discussions/{discussion_number}') {
                                        $arguments = array();
                                        if (array_key_exists('team_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                        }
                                        $arguments['team_id'] = $params['team_id'];
                                        unset($params['team_id']);
                                        if (array_key_exists('discussion_number', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                        }
                                        $arguments['discussion_number'] = $params['discussion_number'];
                                        unset($params['discussion_number']);
                                        $operation = new Operation\Teams\DeleteDiscussionLegacy($arguments['team_id'], $arguments['discussion_number']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'members') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'DELETE /teams/{team_id}/members/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('team_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                        }
                                        $arguments['team_id'] = $params['team_id'];
                                        unset($params['team_id']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        $operation = new Operation\Teams\RemoveMemberLegacy($arguments['team_id'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'memberships') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'DELETE /teams/{team_id}/memberships/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('team_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                        }
                                        $arguments['team_id'] = $params['team_id'];
                                        unset($params['team_id']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        $operation = new Operation\Teams\RemoveMembershipForUserLegacy($arguments['team_id'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'projects') {
                                if ($pathChunks[4] == '{project_id}') {
                                    if ($call == 'DELETE /teams/{team_id}/projects/{project_id}') {
                                        $arguments = array();
                                        if (array_key_exists('team_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                        }
                                        $arguments['team_id'] = $params['team_id'];
                                        unset($params['team_id']);
                                        if (array_key_exists('project_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: project_id');
                                        }
                                        $arguments['project_id'] = $params['project_id'];
                                        unset($params['project_id']);
                                        if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Projects\CbProjectIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Projects\CbProjectIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Projects🌀CbProjectIdRcb();
                                        }
                                        $operation = new Operation\Teams\RemoveProjectLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Projects\CbProjectIdRcb::class], $arguments['team_id'], $arguments['project_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'codespaces') {
                            if ($pathChunks[3] == 'secrets') {
                                if ($pathChunks[4] == '{secret_name}') {
                                    if ($call == 'DELETE /user/codespaces/secrets/{secret_name}') {
                                        $arguments = array();
                                        if (array_key_exists('secret_name', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                        }
                                        $arguments['secret_name'] = $params['secret_name'];
                                        unset($params['secret_name']);
                                        $operation = new Operation\Codespaces\DeleteSecretForAuthenticatedUser($arguments['secret_name']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif ($pathChunks[2] == 'migrations') {
                            if ($pathChunks[3] == '{migration_id}') {
                                if ($pathChunks[4] == 'archive') {
                                    if ($call == 'DELETE /user/migrations/{migration_id}/archive') {
                                        $arguments = array();
                                        if (array_key_exists('migration_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: migration_id');
                                        }
                                        $arguments['migration_id'] = $params['migration_id'];
                                        unset($params['migration_id']);
                                        if (\array_key_exists(Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Archive::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Archive::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Migrations🌀CbMigrationIdRcb🌀Archive();
                                        }
                                        $operation = new Operation\Migrations\DeleteArchiveForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Archive::class], $arguments['migration_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif ($pathChunks[2] == 'packages') {
                            if ($pathChunks[3] == '{package_type}') {
                                if ($pathChunks[4] == '{package_name}') {
                                    if ($call == 'DELETE /user/packages/{package_type}/{package_name}') {
                                        $arguments = array();
                                        if (array_key_exists('package_type', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                        }
                                        $arguments['package_type'] = $params['package_type'];
                                        unset($params['package_type']);
                                        if (array_key_exists('package_name', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                        }
                                        $arguments['package_name'] = $params['package_name'];
                                        unset($params['package_name']);
                                        if (\array_key_exists(Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb();
                                        }
                                        $operation = new Operation\Packages\DeletePackageForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb::class], $arguments['package_type'], $arguments['package_name']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif ($pathChunks[2] == 'starred') {
                            if ($pathChunks[3] == '{owner}') {
                                if ($pathChunks[4] == '{repo}') {
                                    if ($call == 'DELETE /user/starred/{owner}/{repo}') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\User\Starred\CbOwnerRcb\CbRepoRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Starred\CbOwnerRcb\CbRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Starred🌀CbOwnerRcb🌀CbRepoRcb();
                                        }
                                        $operation = new Operation\Activity\UnstarRepoForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Starred\CbOwnerRcb\CbRepoRcb::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 3) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'gists') {
                        if ($pathChunks[2] == '{gist_id}') {
                            if ($call == 'DELETE /gists/{gist_id}') {
                                $arguments = array();
                                if (array_key_exists('gist_id', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: gist_id');
                                }
                                $arguments['gist_id'] = $params['gist_id'];
                                unset($params['gist_id']);
                                if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb();
                                }
                                $operation = new Operation\Gists\Delete($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb::class], $arguments['gist_id']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'installation') {
                        if ($pathChunks[2] == 'token') {
                            if ($call == 'DELETE /installation/token') {
                                $arguments = array();
                                $operation = new Operation\Apps\RevokeInstallationAccessToken();
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($call == 'DELETE /orgs/{org}') {
                                $arguments = array();
                                if (array_key_exists('org', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                }
                                $arguments['org'] = $params['org'];
                                unset($params['org']);
                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb();
                                }
                                $operation = new Operation\Orgs\Delete($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb::class], $arguments['org']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Orgs\Delete\Response\Applicationjson\H202 {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'projects') {
                        if ($pathChunks[2] == '{project_id}') {
                            if ($call == 'DELETE /projects/{project_id}') {
                                $arguments = array();
                                if (array_key_exists('project_id', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: project_id');
                                }
                                $arguments['project_id'] = $params['project_id'];
                                unset($params['project_id']);
                                if (\array_key_exists(Hydrator\Operation\Projects\CbProjectIdRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀CbProjectIdRcb();
                                }
                                $operation = new Operation\Projects\Delete($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb::class], $arguments['project_id']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'teams') {
                        if ($pathChunks[2] == '{team_id}') {
                            if ($call == 'DELETE /teams/{team_id}') {
                                $arguments = array();
                                if (array_key_exists('team_id', $params) === false) {
                                    throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                }
                                $arguments['team_id'] = $params['team_id'];
                                unset($params['team_id']);
                                if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb();
                                }
                                $operation = new Operation\Teams\DeleteLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb::class], $arguments['team_id']);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'emails') {
                            if ($call == 'DELETE /user/emails') {
                                $arguments = array();
                                if (\array_key_exists(Hydrator\Operation\User\Emails::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Emails::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Emails();
                                }
                                $operation = new Operation\Users\DeleteEmailForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Emails::class]);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'interaction-limits') {
                            if ($call == 'DELETE /user/interaction-limits') {
                                $arguments = array();
                                $operation = new Operation\Interactions\RemoveRestrictionsForAuthenticatedUser();
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif ($pathChunks[2] == 'social_accounts') {
                            if ($call == 'DELETE /user/social_accounts') {
                                $arguments = array();
                                if (\array_key_exists(Hydrator\Operation\User\SocialAccounts::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\SocialAccounts::class] = $this->hydrators->getObjectMapperOperation🌀User🌀SocialAccounts();
                                }
                                $operation = new Operation\Users\DeleteSocialAccountForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\SocialAccounts::class]);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 7) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'actions') {
                                if ($pathChunks[4] == 'permissions') {
                                    if ($pathChunks[5] == 'repositories') {
                                        if ($pathChunks[6] == '{repository_id}') {
                                            if ($call == 'DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('repository_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                }
                                                $arguments['repository_id'] = $params['repository_id'];
                                                unset($params['repository_id']);
                                                $operation = new Operation\Actions\DisableSelectedRepositoryGithubActionsOrganization($arguments['org'], $arguments['repository_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'runners') {
                                    if ($pathChunks[5] == '{runner_id}') {
                                        if ($pathChunks[6] == 'labels') {
                                            if ($call == 'DELETE /orgs/{org}/actions/runners/{runner_id}/labels') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('runner_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: runner_id');
                                                }
                                                $arguments['runner_id'] = $params['runner_id'];
                                                unset($params['runner_id']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                }
                                                $operation = new Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $arguments['org'], $arguments['runner_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForOrg\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'members') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($pathChunks[5] == 'codespaces') {
                                        if ($pathChunks[6] == '{codespace_name}') {
                                            if ($call == 'DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('username', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: username');
                                                }
                                                $arguments['username'] = $params['username'];
                                                unset($params['username']);
                                                if (array_key_exists('codespace_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: codespace_name');
                                                }
                                                $arguments['codespace_name'] = $params['codespace_name'];
                                                unset($params['codespace_name']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb\Codespaces\CbCodespaceNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb\Codespaces\CbCodespaceNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Members🌀CbUsernameRcb🌀Codespaces🌀CbCodespaceNameRcb();
                                                }
                                                $operation = new Operation\Codespaces\DeleteFromOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb\Codespaces\CbCodespaceNameRcb::class], $arguments['org'], $arguments['username'], $arguments['codespace_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Codespaces\DeleteFromOrganization\Response\Applicationjson\H202 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'teams') {
                                if ($pathChunks[4] == '{team_slug}') {
                                    if ($pathChunks[5] == 'discussions') {
                                        if ($pathChunks[6] == '{discussion_number}') {
                                            if ($call == 'DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('team_slug', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                }
                                                $arguments['team_slug'] = $params['team_slug'];
                                                unset($params['team_slug']);
                                                if (array_key_exists('discussion_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                                }
                                                $arguments['discussion_number'] = $params['discussion_number'];
                                                unset($params['discussion_number']);
                                                $operation = new Operation\Teams\DeleteDiscussionInOrg($arguments['org'], $arguments['team_slug'], $arguments['discussion_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'memberships') {
                                        if ($pathChunks[6] == '{username}') {
                                            if ($call == 'DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('team_slug', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                }
                                                $arguments['team_slug'] = $params['team_slug'];
                                                unset($params['team_slug']);
                                                if (array_key_exists('username', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: username');
                                                }
                                                $arguments['username'] = $params['username'];
                                                unset($params['username']);
                                                $operation = new Operation\Teams\RemoveMembershipForUserInOrg($arguments['org'], $arguments['team_slug'], $arguments['username']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'projects') {
                                        if ($pathChunks[6] == '{project_id}') {
                                            if ($call == 'DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('team_slug', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                }
                                                $arguments['team_slug'] = $params['team_slug'];
                                                unset($params['team_slug']);
                                                if (array_key_exists('project_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: project_id');
                                                }
                                                $arguments['project_id'] = $params['project_id'];
                                                unset($params['project_id']);
                                                $operation = new Operation\Teams\RemoveProjectInOrg($arguments['org'], $arguments['team_slug'], $arguments['project_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'artifacts') {
                                        if ($pathChunks[6] == '{artifact_id}') {
                                            if ($call == 'DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('artifact_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: artifact_id');
                                                }
                                                $arguments['artifact_id'] = $params['artifact_id'];
                                                unset($params['artifact_id']);
                                                $operation = new Operation\Actions\DeleteArtifact($arguments['owner'], $arguments['repo'], $arguments['artifact_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'caches') {
                                        if ($pathChunks[6] == '{cache_id}') {
                                            if ($call == 'DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('cache_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: cache_id');
                                                }
                                                $arguments['cache_id'] = $params['cache_id'];
                                                unset($params['cache_id']);
                                                $operation = new Operation\Actions\DeleteActionsCacheById($arguments['owner'], $arguments['repo'], $arguments['cache_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'runners') {
                                        if ($pathChunks[6] == '{runner_id}') {
                                            if ($call == 'DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('runner_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: runner_id');
                                                }
                                                $arguments['runner_id'] = $params['runner_id'];
                                                unset($params['runner_id']);
                                                $operation = new Operation\Actions\DeleteSelfHostedRunnerFromRepo($arguments['owner'], $arguments['repo'], $arguments['runner_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'runs') {
                                        if ($pathChunks[6] == '{run_id}') {
                                            if ($call == 'DELETE /repos/{owner}/{repo}/actions/runs/{run_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('run_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: run_id');
                                                }
                                                $arguments['run_id'] = $params['run_id'];
                                                unset($params['run_id']);
                                                $operation = new Operation\Actions\DeleteWorkflowRun($arguments['owner'], $arguments['repo'], $arguments['run_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'secrets') {
                                        if ($pathChunks[6] == '{secret_name}') {
                                            if ($call == 'DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                $operation = new Operation\Actions\DeleteRepoSecret($arguments['owner'], $arguments['repo'], $arguments['secret_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'variables') {
                                        if ($pathChunks[6] == '{name}') {
                                            if ($call == 'DELETE /repos/{owner}/{repo}/actions/variables/{name}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: name');
                                                }
                                                $arguments['name'] = $params['name'];
                                                unset($params['name']);
                                                $operation = new Operation\Actions\DeleteRepoVariable($arguments['owner'], $arguments['repo'], $arguments['name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'branches') {
                                    if ($pathChunks[5] == '{branch}') {
                                        if ($pathChunks[6] == 'protection') {
                                            if ($call == 'DELETE /repos/{owner}/{repo}/branches/{branch}/protection') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('branch', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                }
                                                $arguments['branch'] = $params['branch'];
                                                unset($params['branch']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection();
                                                }
                                                $operation = new Operation\Repos\DeleteBranchProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'code-scanning') {
                                    if ($pathChunks[5] == 'analyses') {
                                        if ($pathChunks[6] == '{analysis_id}') {
                                            if ($call == 'DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('analysis_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: analysis_id');
                                                }
                                                $arguments['analysis_id'] = $params['analysis_id'];
                                                unset($params['analysis_id']);
                                                if (array_key_exists('confirm_delete', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: confirm_delete');
                                                }
                                                $arguments['confirm_delete'] = $params['confirm_delete'];
                                                unset($params['confirm_delete']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Analyses\CbAnalysisIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Analyses\CbAnalysisIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeDashScanning🌀Analyses🌀CbAnalysisIdRcb();
                                                }
                                                $operation = new Operation\CodeScanning\DeleteAnalysis($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Analyses\CbAnalysisIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['analysis_id'], $arguments['confirm_delete']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\CodeScanningAnalysisDeletion {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'codespaces') {
                                    if ($pathChunks[5] == 'secrets') {
                                        if ($pathChunks[6] == '{secret_name}') {
                                            if ($call == 'DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                $operation = new Operation\Codespaces\DeleteRepoSecret($arguments['owner'], $arguments['repo'], $arguments['secret_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'dependabot') {
                                    if ($pathChunks[5] == 'secrets') {
                                        if ($pathChunks[6] == '{secret_name}') {
                                            if ($call == 'DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                $operation = new Operation\Dependabot\DeleteRepoSecret($arguments['owner'], $arguments['repo'], $arguments['secret_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'git') {
                                    if ($pathChunks[5] == 'refs') {
                                        if ($pathChunks[6] == '{ref}') {
                                            if ($call == 'DELETE /repos/{owner}/{repo}/git/refs/{ref}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('ref', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: ref');
                                                }
                                                $arguments['ref'] = $params['ref'];
                                                unset($params['ref']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Refs\CbRefRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Refs\CbRefRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Refs🌀CbRefRcb();
                                                }
                                                $operation = new Operation\Git\DeleteRef($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Refs\CbRefRcb::class], $arguments['owner'], $arguments['repo'], $arguments['ref']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'issues') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($pathChunks[6] == '{comment_id}') {
                                            if ($call == 'DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('comment_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                                }
                                                $arguments['comment_id'] = $params['comment_id'];
                                                unset($params['comment_id']);
                                                $operation = new Operation\Issues\DeleteComment($arguments['owner'], $arguments['repo'], $arguments['comment_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == '{issue_number}') {
                                        if ($pathChunks[6] == 'assignees') {
                                            if ($call == 'DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('issue_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: issue_number');
                                                }
                                                $arguments['issue_number'] = $params['issue_number'];
                                                unset($params['issue_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Assignees::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Assignees::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Assignees();
                                                }
                                                $operation = new Operation\Issues\RemoveAssignees($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Assignees::class], $arguments['owner'], $arguments['repo'], $arguments['issue_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Issue {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'labels') {
                                            if ($call == 'DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('issue_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: issue_number');
                                                }
                                                $arguments['issue_number'] = $params['issue_number'];
                                                unset($params['issue_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Labels();
                                                }
                                                $operation = new Operation\Issues\RemoveAllLabels($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class], $arguments['owner'], $arguments['repo'], $arguments['issue_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'lock') {
                                            if ($call == 'DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('issue_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: issue_number');
                                                }
                                                $arguments['issue_number'] = $params['issue_number'];
                                                unset($params['issue_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Lock::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Lock::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Lock();
                                                }
                                                $operation = new Operation\Issues\Unlock($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Lock::class], $arguments['owner'], $arguments['repo'], $arguments['issue_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'pulls') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($pathChunks[6] == '{comment_id}') {
                                            if ($call == 'DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('comment_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                                }
                                                $arguments['comment_id'] = $params['comment_id'];
                                                unset($params['comment_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀Comments🌀CbCommentIdRcb();
                                                }
                                                $operation = new Operation\Pulls\DeleteReviewComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['comment_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == '{pull_number}') {
                                        if ($pathChunks[6] == 'requested_reviewers') {
                                            if ($call == 'DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('pull_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                }
                                                $arguments['pull_number'] = $params['pull_number'];
                                                unset($params['pull_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\RequestedReviewers::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\RequestedReviewers::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀RequestedReviewers();
                                                }
                                                $operation = new Operation\Pulls\RemoveRequestedReviewers($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\RequestedReviewers::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PullRequestSimple {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'releases') {
                                    if ($pathChunks[5] == 'assets') {
                                        if ($pathChunks[6] == '{asset_id}') {
                                            if ($call == 'DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('asset_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: asset_id');
                                                }
                                                $arguments['asset_id'] = $params['asset_id'];
                                                unset($params['asset_id']);
                                                $operation = new Operation\Repos\DeleteReleaseAsset($arguments['owner'], $arguments['repo'], $arguments['asset_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'tags') {
                                    if ($pathChunks[5] == 'protection') {
                                        if ($pathChunks[6] == '{tag_protection_id}') {
                                            if ($call == 'DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('tag_protection_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: tag_protection_id');
                                                }
                                                $arguments['tag_protection_id'] = $params['tag_protection_id'];
                                                unset($params['tag_protection_id']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags\Protection\CbTagProtectionIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags\Protection\CbTagProtectionIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Tags🌀Protection🌀CbTagProtectionIdRcb();
                                                }
                                                $operation = new Operation\Repos\DeleteTagProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags\Protection\CbTagProtectionIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['tag_protection_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repositories') {
                        if ($pathChunks[2] == '{repository_id}') {
                            if ($pathChunks[3] == 'environments') {
                                if ($pathChunks[4] == '{environment_name}') {
                                    if ($pathChunks[5] == 'secrets') {
                                        if ($pathChunks[6] == '{secret_name}') {
                                            if ($call == 'DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}') {
                                                $arguments = array();
                                                if (array_key_exists('repository_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                }
                                                $arguments['repository_id'] = $params['repository_id'];
                                                unset($params['repository_id']);
                                                if (array_key_exists('environment_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: environment_name');
                                                }
                                                $arguments['environment_name'] = $params['environment_name'];
                                                unset($params['environment_name']);
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                $operation = new Operation\Actions\DeleteEnvironmentSecret($arguments['repository_id'], $arguments['environment_name'], $arguments['secret_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'variables') {
                                        if ($pathChunks[6] == '{name}') {
                                            if ($call == 'DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}') {
                                                $arguments = array();
                                                if (array_key_exists('repository_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                }
                                                $arguments['repository_id'] = $params['repository_id'];
                                                unset($params['repository_id']);
                                                if (array_key_exists('name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: name');
                                                }
                                                $arguments['name'] = $params['name'];
                                                unset($params['name']);
                                                if (array_key_exists('environment_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: environment_name');
                                                }
                                                $arguments['environment_name'] = $params['environment_name'];
                                                unset($params['environment_name']);
                                                $operation = new Operation\Actions\DeleteEnvironmentVariable($arguments['repository_id'], $arguments['name'], $arguments['environment_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'teams') {
                        if ($pathChunks[2] == '{team_id}') {
                            if ($pathChunks[3] == 'discussions') {
                                if ($pathChunks[4] == '{discussion_number}') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($pathChunks[6] == '{comment_number}') {
                                            if ($call == 'DELETE /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}') {
                                                $arguments = array();
                                                if (array_key_exists('team_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                                }
                                                $arguments['team_id'] = $params['team_id'];
                                                unset($params['team_id']);
                                                if (array_key_exists('discussion_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                                }
                                                $arguments['discussion_number'] = $params['discussion_number'];
                                                unset($params['discussion_number']);
                                                if (array_key_exists('comment_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: comment_number');
                                                }
                                                $arguments['comment_number'] = $params['comment_number'];
                                                unset($params['comment_number']);
                                                $operation = new Operation\Teams\DeleteDiscussionCommentLegacy($arguments['team_id'], $arguments['discussion_number'], $arguments['comment_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'codespaces') {
                            if ($pathChunks[3] == 'secrets') {
                                if ($pathChunks[4] == '{secret_name}') {
                                    if ($pathChunks[5] == 'repositories') {
                                        if ($pathChunks[6] == '{repository_id}') {
                                            if ($call == 'DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}') {
                                                $arguments = array();
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                if (array_key_exists('repository_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                }
                                                $arguments['repository_id'] = $params['repository_id'];
                                                unset($params['repository_id']);
                                                if (\array_key_exists(Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀Secrets🌀CbSecretNameRcb🌀Repositories🌀CbRepositoryIdRcb();
                                                }
                                                $operation = new Operation\Codespaces\RemoveRepositoryForSecretForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class], $arguments['secret_name'], $arguments['repository_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        } elseif ($pathChunks[2] == 'migrations') {
                            if ($pathChunks[3] == '{migration_id}') {
                                if ($pathChunks[4] == 'repos') {
                                    if ($pathChunks[5] == '{repo_name}') {
                                        if ($pathChunks[6] == 'lock') {
                                            if ($call == 'DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock') {
                                                $arguments = array();
                                                if (array_key_exists('migration_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: migration_id');
                                                }
                                                $arguments['migration_id'] = $params['migration_id'];
                                                unset($params['migration_id']);
                                                if (array_key_exists('repo_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo_name');
                                                }
                                                $arguments['repo_name'] = $params['repo_name'];
                                                unset($params['repo_name']);
                                                if (\array_key_exists(Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Repos\CbRepoNameRcb\Lock::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Repos\CbRepoNameRcb\Lock::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Migrations🌀CbMigrationIdRcb🌀Repos🌀CbRepoNameRcb🌀Lock();
                                                }
                                                $operation = new Operation\Migrations\UnlockRepoForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Repos\CbRepoNameRcb\Lock::class], $arguments['migration_id'], $arguments['repo_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        } elseif ($pathChunks[2] == 'packages') {
                            if ($pathChunks[3] == '{package_type}') {
                                if ($pathChunks[4] == '{package_name}') {
                                    if ($pathChunks[5] == 'versions') {
                                        if ($pathChunks[6] == '{package_version_id}') {
                                            if ($call == 'DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}') {
                                                $arguments = array();
                                                if (array_key_exists('package_type', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                                }
                                                $arguments['package_type'] = $params['package_type'];
                                                unset($params['package_type']);
                                                if (array_key_exists('package_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                                }
                                                $arguments['package_name'] = $params['package_name'];
                                                unset($params['package_name']);
                                                if (array_key_exists('package_version_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: package_version_id');
                                                }
                                                $arguments['package_version_id'] = $params['package_version_id'];
                                                unset($params['package_version_id']);
                                                if (\array_key_exists(Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions🌀CbPackageVersionIdRcb();
                                                }
                                                $operation = new Operation\Packages\DeletePackageVersionForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class], $arguments['package_type'], $arguments['package_name'], $arguments['package_version_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 6) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'actions') {
                                if ($pathChunks[4] == 'required_workflows') {
                                    if ($pathChunks[5] == '{required_workflow_id}') {
                                        if ($call == 'DELETE /orgs/{org}/actions/required_workflows/{required_workflow_id}') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('required_workflow_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: required_workflow_id');
                                            }
                                            $arguments['required_workflow_id'] = $params['required_workflow_id'];
                                            unset($params['required_workflow_id']);
                                            $operation = new Operation\Actions\DeleteRequiredWorkflow($arguments['org'], $arguments['required_workflow_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'runners') {
                                    if ($pathChunks[5] == '{runner_id}') {
                                        if ($call == 'DELETE /orgs/{org}/actions/runners/{runner_id}') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('runner_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: runner_id');
                                            }
                                            $arguments['runner_id'] = $params['runner_id'];
                                            unset($params['runner_id']);
                                            $operation = new Operation\Actions\DeleteSelfHostedRunnerFromOrg($arguments['org'], $arguments['runner_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == '{secret_name}') {
                                        if ($call == 'DELETE /orgs/{org}/actions/secrets/{secret_name}') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('secret_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                            }
                                            $arguments['secret_name'] = $params['secret_name'];
                                            unset($params['secret_name']);
                                            $operation = new Operation\Actions\DeleteOrgSecret($arguments['org'], $arguments['secret_name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'variables') {
                                    if ($pathChunks[5] == '{name}') {
                                        if ($call == 'DELETE /orgs/{org}/actions/variables/{name}') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: name');
                                            }
                                            $arguments['name'] = $params['name'];
                                            unset($params['name']);
                                            $operation = new Operation\Actions\DeleteOrgVariable($arguments['org'], $arguments['name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'codespaces') {
                                if ($pathChunks[4] == 'billing') {
                                    if ($pathChunks[5] == 'selected_users') {
                                        if ($call == 'DELETE /orgs/{org}/codespaces/billing/selected_users') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Billing\SelectedUsers::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Billing\SelectedUsers::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Billing🌀SelectedUsers();
                                            }
                                            $operation = new Operation\Codespaces\DeleteCodespacesBillingUsers($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Billing\SelectedUsers::class], $arguments['org']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == '{secret_name}') {
                                        if ($call == 'DELETE /orgs/{org}/codespaces/secrets/{secret_name}') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('secret_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                            }
                                            $arguments['secret_name'] = $params['secret_name'];
                                            unset($params['secret_name']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Secrets🌀CbSecretNameRcb();
                                            }
                                            $operation = new Operation\Codespaces\DeleteOrgSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb::class], $arguments['org'], $arguments['secret_name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'dependabot') {
                                if ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == '{secret_name}') {
                                        if ($call == 'DELETE /orgs/{org}/dependabot/secrets/{secret_name}') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('secret_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                            }
                                            $arguments['secret_name'] = $params['secret_name'];
                                            unset($params['secret_name']);
                                            $operation = new Operation\Dependabot\DeleteOrgSecret($arguments['org'], $arguments['secret_name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'migrations') {
                                if ($pathChunks[4] == '{migration_id}') {
                                    if ($pathChunks[5] == 'archive') {
                                        if ($call == 'DELETE /orgs/{org}/migrations/{migration_id}/archive') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('migration_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: migration_id');
                                            }
                                            $arguments['migration_id'] = $params['migration_id'];
                                            unset($params['migration_id']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Archive::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Archive::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Migrations🌀CbMigrationIdRcb🌀Archive();
                                            }
                                            $operation = new Operation\Migrations\DeleteArchiveForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Archive::class], $arguments['org'], $arguments['migration_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'packages') {
                                if ($pathChunks[4] == '{package_type}') {
                                    if ($pathChunks[5] == '{package_name}') {
                                        if ($call == 'DELETE /orgs/{org}/packages/{package_type}/{package_name}') {
                                            $arguments = array();
                                            if (array_key_exists('package_type', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                            }
                                            $arguments['package_type'] = $params['package_type'];
                                            unset($params['package_type']);
                                            if (array_key_exists('package_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                            }
                                            $arguments['package_name'] = $params['package_name'];
                                            unset($params['package_name']);
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb();
                                            }
                                            $operation = new Operation\Packages\DeletePackageForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class], $arguments['package_type'], $arguments['package_name'], $arguments['org']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'security-managers') {
                                if ($pathChunks[4] == 'teams') {
                                    if ($pathChunks[5] == '{team_slug}') {
                                        if ($call == 'DELETE /orgs/{org}/security-managers/teams/{team_slug}') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('team_slug', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                            }
                                            $arguments['team_slug'] = $params['team_slug'];
                                            unset($params['team_slug']);
                                            $operation = new Operation\Orgs\RemoveSecurityManagerTeam($arguments['org'], $arguments['team_slug']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'caches') {
                                        if ($call == 'DELETE /repos/{owner}/{repo}/actions/caches') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('key', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: key');
                                            }
                                            $arguments['key'] = $params['key'];
                                            unset($params['key']);
                                            if (array_key_exists('ref', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: ref');
                                            }
                                            $arguments['ref'] = $params['ref'];
                                            unset($params['ref']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Caches::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Caches::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Caches();
                                            }
                                            $operation = new Operation\Actions\DeleteActionsCacheByKey($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Caches::class], $arguments['owner'], $arguments['repo'], $arguments['key'], $arguments['ref']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ActionsCacheList {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'autolinks') {
                                    if ($pathChunks[5] == '{autolink_id}') {
                                        if ($call == 'DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('autolink_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: autolink_id');
                                            }
                                            $arguments['autolink_id'] = $params['autolink_id'];
                                            unset($params['autolink_id']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks\CbAutolinkIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks\CbAutolinkIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Autolinks🌀CbAutolinkIdRcb();
                                            }
                                            $operation = new Operation\Repos\DeleteAutolink($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks\CbAutolinkIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['autolink_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'collaborators') {
                                    if ($pathChunks[5] == '{username}') {
                                        if ($call == 'DELETE /repos/{owner}/{repo}/collaborators/{username}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('username', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: username');
                                            }
                                            $arguments['username'] = $params['username'];
                                            unset($params['username']);
                                            $operation = new Operation\Repos\RemoveCollaborator($arguments['owner'], $arguments['repo'], $arguments['username']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'comments') {
                                    if ($pathChunks[5] == '{comment_id}') {
                                        if ($call == 'DELETE /repos/{owner}/{repo}/comments/{comment_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('comment_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                            }
                                            $arguments['comment_id'] = $params['comment_id'];
                                            unset($params['comment_id']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Comments🌀CbCommentIdRcb();
                                            }
                                            $operation = new Operation\Repos\DeleteCommitComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['comment_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'contents') {
                                    if ($pathChunks[5] == '{path}') {
                                        if ($call == 'DELETE /repos/{owner}/{repo}/contents/{path}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('path', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: path');
                                            }
                                            $arguments['path'] = $params['path'];
                                            unset($params['path']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contents\CbPathRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contents\CbPathRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Contents🌀CbPathRcb();
                                            }
                                            $operation = new Operation\Repos\DeleteFile($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contents\CbPathRcb::class], $arguments['owner'], $arguments['repo'], $arguments['path']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\FileCommit {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'deployments') {
                                    if ($pathChunks[5] == '{deployment_id}') {
                                        if ($call == 'DELETE /repos/{owner}/{repo}/deployments/{deployment_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('deployment_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: deployment_id');
                                            }
                                            $arguments['deployment_id'] = $params['deployment_id'];
                                            unset($params['deployment_id']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Deployments🌀CbDeploymentIdRcb();
                                            }
                                            $operation = new Operation\Repos\DeleteDeployment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['deployment_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'environments') {
                                    if ($pathChunks[5] == '{environment_name}') {
                                        if ($call == 'DELETE /repos/{owner}/{repo}/environments/{environment_name}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('environment_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: environment_name');
                                            }
                                            $arguments['environment_name'] = $params['environment_name'];
                                            unset($params['environment_name']);
                                            $operation = new Operation\Repos\DeleteAnEnvironment($arguments['owner'], $arguments['repo'], $arguments['environment_name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'hooks') {
                                    if ($pathChunks[5] == '{hook_id}') {
                                        if ($call == 'DELETE /repos/{owner}/{repo}/hooks/{hook_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('hook_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: hook_id');
                                            }
                                            $arguments['hook_id'] = $params['hook_id'];
                                            unset($params['hook_id']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb();
                                            }
                                            $operation = new Operation\Repos\DeleteWebhook($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['hook_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'invitations') {
                                    if ($pathChunks[5] == '{invitation_id}') {
                                        if ($call == 'DELETE /repos/{owner}/{repo}/invitations/{invitation_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('invitation_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: invitation_id');
                                            }
                                            $arguments['invitation_id'] = $params['invitation_id'];
                                            unset($params['invitation_id']);
                                            $operation = new Operation\Repos\DeleteInvitation($arguments['owner'], $arguments['repo'], $arguments['invitation_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'keys') {
                                    if ($pathChunks[5] == '{key_id}') {
                                        if ($call == 'DELETE /repos/{owner}/{repo}/keys/{key_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('key_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: key_id');
                                            }
                                            $arguments['key_id'] = $params['key_id'];
                                            unset($params['key_id']);
                                            $operation = new Operation\Repos\DeleteDeployKey($arguments['owner'], $arguments['repo'], $arguments['key_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'labels') {
                                    if ($pathChunks[5] == '{name}') {
                                        if ($call == 'DELETE /repos/{owner}/{repo}/labels/{name}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: name');
                                            }
                                            $arguments['name'] = $params['name'];
                                            unset($params['name']);
                                            $operation = new Operation\Issues\DeleteLabel($arguments['owner'], $arguments['repo'], $arguments['name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'milestones') {
                                    if ($pathChunks[5] == '{milestone_number}') {
                                        if ($call == 'DELETE /repos/{owner}/{repo}/milestones/{milestone_number}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('milestone_number', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: milestone_number');
                                            }
                                            $arguments['milestone_number'] = $params['milestone_number'];
                                            unset($params['milestone_number']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Milestones🌀CbMilestoneNumberRcb();
                                            }
                                            $operation = new Operation\Issues\DeleteMilestone($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb::class], $arguments['owner'], $arguments['repo'], $arguments['milestone_number']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'releases') {
                                    if ($pathChunks[5] == '{release_id}') {
                                        if ($call == 'DELETE /repos/{owner}/{repo}/releases/{release_id}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('release_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: release_id');
                                            }
                                            $arguments['release_id'] = $params['release_id'];
                                            unset($params['release_id']);
                                            $operation = new Operation\Repos\DeleteRelease($arguments['owner'], $arguments['repo'], $arguments['release_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'teams') {
                        if ($pathChunks[2] == '{team_id}') {
                            if ($pathChunks[3] == 'repos') {
                                if ($pathChunks[4] == '{owner}') {
                                    if ($pathChunks[5] == '{repo}') {
                                        if ($call == 'DELETE /teams/{team_id}/repos/{owner}/{repo}') {
                                            $arguments = array();
                                            if (array_key_exists('team_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                            }
                                            $arguments['team_id'] = $params['team_id'];
                                            unset($params['team_id']);
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            $operation = new Operation\Teams\RemoveRepoLegacy($arguments['team_id'], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'installations') {
                            if ($pathChunks[3] == '{installation_id}') {
                                if ($pathChunks[4] == 'repositories') {
                                    if ($pathChunks[5] == '{repository_id}') {
                                        if ($call == 'DELETE /user/installations/{installation_id}/repositories/{repository_id}') {
                                            $arguments = array();
                                            if (array_key_exists('installation_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: installation_id');
                                            }
                                            $arguments['installation_id'] = $params['installation_id'];
                                            unset($params['installation_id']);
                                            if (array_key_exists('repository_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                            }
                                            $arguments['repository_id'] = $params['repository_id'];
                                            unset($params['repository_id']);
                                            if (\array_key_exists(Hydrator\Operation\User\Installations\CbInstallationIdRcb\Repositories\CbRepositoryIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\User\Installations\CbInstallationIdRcb\Repositories\CbRepositoryIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Installations🌀CbInstallationIdRcb🌀Repositories🌀CbRepositoryIdRcb();
                                            }
                                            $operation = new Operation\Apps\RemoveRepoFromInstallationForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Installations\CbInstallationIdRcb\Repositories\CbRepositoryIdRcb::class], $arguments['installation_id'], $arguments['repository_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'users') {
                        if ($pathChunks[2] == '{username}') {
                            if ($pathChunks[3] == 'packages') {
                                if ($pathChunks[4] == '{package_type}') {
                                    if ($pathChunks[5] == '{package_name}') {
                                        if ($call == 'DELETE /users/{username}/packages/{package_type}/{package_name}') {
                                            $arguments = array();
                                            if (array_key_exists('package_type', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                            }
                                            $arguments['package_type'] = $params['package_type'];
                                            unset($params['package_type']);
                                            if (array_key_exists('package_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                            }
                                            $arguments['package_name'] = $params['package_name'];
                                            unset($params['package_name']);
                                            if (array_key_exists('username', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: username');
                                            }
                                            $arguments['username'] = $params['username'];
                                            unset($params['username']);
                                            if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb();
                                            }
                                            $operation = new Operation\Packages\DeletePackageForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class], $arguments['package_type'], $arguments['package_name'], $arguments['username']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 8) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'actions') {
                                if ($pathChunks[4] == 'required_workflows') {
                                    if ($pathChunks[5] == '{required_workflow_id}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($pathChunks[7] == '{repository_id}') {
                                                if ($call == 'DELETE /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('required_workflow_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: required_workflow_id');
                                                    }
                                                    $arguments['required_workflow_id'] = $params['required_workflow_id'];
                                                    unset($params['required_workflow_id']);
                                                    if (array_key_exists('repository_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                    }
                                                    $arguments['repository_id'] = $params['repository_id'];
                                                    unset($params['repository_id']);
                                                    $operation = new Operation\Actions\RemoveSelectedRepoFromRequiredWorkflow($arguments['org'], $arguments['required_workflow_id'], $arguments['repository_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'runners') {
                                    if ($pathChunks[5] == '{runner_id}') {
                                        if ($pathChunks[6] == 'labels') {
                                            if ($pathChunks[7] == '{name}') {
                                                if ($call == 'DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('runner_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: runner_id');
                                                    }
                                                    $arguments['runner_id'] = $params['runner_id'];
                                                    unset($params['runner_id']);
                                                    if (array_key_exists('name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: name');
                                                    }
                                                    $arguments['name'] = $params['name'];
                                                    unset($params['name']);
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels\CbNameRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels\CbNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels🌀CbNameRcb();
                                                    }
                                                    $operation = new Operation\Actions\RemoveCustomLabelFromSelfHostedRunnerForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels\CbNameRcb::class], $arguments['org'], $arguments['runner_id'], $arguments['name']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200 {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == '{secret_name}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($pathChunks[7] == '{repository_id}') {
                                                if ($call == 'DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('secret_name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                    }
                                                    $arguments['secret_name'] = $params['secret_name'];
                                                    unset($params['secret_name']);
                                                    if (array_key_exists('repository_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                    }
                                                    $arguments['repository_id'] = $params['repository_id'];
                                                    unset($params['repository_id']);
                                                    $operation = new Operation\Actions\RemoveSelectedRepoFromOrgSecret($arguments['org'], $arguments['secret_name'], $arguments['repository_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'variables') {
                                    if ($pathChunks[5] == '{name}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($pathChunks[7] == '{repository_id}') {
                                                if ($call == 'DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: name');
                                                    }
                                                    $arguments['name'] = $params['name'];
                                                    unset($params['name']);
                                                    if (array_key_exists('repository_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                    }
                                                    $arguments['repository_id'] = $params['repository_id'];
                                                    unset($params['repository_id']);
                                                    $operation = new Operation\Actions\RemoveSelectedRepoFromOrgVariable($arguments['org'], $arguments['name'], $arguments['repository_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'codespaces') {
                                if ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == '{secret_name}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($pathChunks[7] == '{repository_id}') {
                                                if ($call == 'DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('secret_name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                    }
                                                    $arguments['secret_name'] = $params['secret_name'];
                                                    unset($params['secret_name']);
                                                    if (array_key_exists('repository_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                    }
                                                    $arguments['repository_id'] = $params['repository_id'];
                                                    unset($params['repository_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Secrets🌀CbSecretNameRcb🌀Repositories🌀CbRepositoryIdRcb();
                                                    }
                                                    $operation = new Operation\Codespaces\RemoveSelectedRepoFromOrgSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class], $arguments['org'], $arguments['secret_name'], $arguments['repository_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'dependabot') {
                                if ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == '{secret_name}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($pathChunks[7] == '{repository_id}') {
                                                if ($call == 'DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('secret_name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                    }
                                                    $arguments['secret_name'] = $params['secret_name'];
                                                    unset($params['secret_name']);
                                                    if (array_key_exists('repository_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                    }
                                                    $arguments['repository_id'] = $params['repository_id'];
                                                    unset($params['repository_id']);
                                                    $operation = new Operation\Dependabot\RemoveSelectedRepoFromOrgSecret($arguments['org'], $arguments['secret_name'], $arguments['repository_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'migrations') {
                                if ($pathChunks[4] == '{migration_id}') {
                                    if ($pathChunks[5] == 'repos') {
                                        if ($pathChunks[6] == '{repo_name}') {
                                            if ($pathChunks[7] == 'lock') {
                                                if ($call == 'DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('migration_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: migration_id');
                                                    }
                                                    $arguments['migration_id'] = $params['migration_id'];
                                                    unset($params['migration_id']);
                                                    if (array_key_exists('repo_name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo_name');
                                                    }
                                                    $arguments['repo_name'] = $params['repo_name'];
                                                    unset($params['repo_name']);
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Repos\CbRepoNameRcb\Lock::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Repos\CbRepoNameRcb\Lock::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Migrations🌀CbMigrationIdRcb🌀Repos🌀CbRepoNameRcb🌀Lock();
                                                    }
                                                    $operation = new Operation\Migrations\UnlockRepoForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Repos\CbRepoNameRcb\Lock::class], $arguments['org'], $arguments['migration_id'], $arguments['repo_name']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'packages') {
                                if ($pathChunks[4] == '{package_type}') {
                                    if ($pathChunks[5] == '{package_name}') {
                                        if ($pathChunks[6] == 'versions') {
                                            if ($pathChunks[7] == '{package_version_id}') {
                                                if ($call == 'DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('package_type', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                                    }
                                                    $arguments['package_type'] = $params['package_type'];
                                                    unset($params['package_type']);
                                                    if (array_key_exists('package_name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                                    }
                                                    $arguments['package_name'] = $params['package_name'];
                                                    unset($params['package_name']);
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('package_version_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: package_version_id');
                                                    }
                                                    $arguments['package_version_id'] = $params['package_version_id'];
                                                    unset($params['package_version_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions🌀CbPackageVersionIdRcb();
                                                    }
                                                    $operation = new Operation\Packages\DeletePackageVersionForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class], $arguments['package_type'], $arguments['package_name'], $arguments['org'], $arguments['package_version_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'teams') {
                                if ($pathChunks[4] == '{team_slug}') {
                                    if ($pathChunks[5] == 'repos') {
                                        if ($pathChunks[6] == '{owner}') {
                                            if ($pathChunks[7] == '{repo}') {
                                                if ($call == 'DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('team_slug', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                    }
                                                    $arguments['team_slug'] = $params['team_slug'];
                                                    unset($params['team_slug']);
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    $operation = new Operation\Teams\RemoveRepoInOrg($arguments['org'], $arguments['team_slug'], $arguments['owner'], $arguments['repo']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'runners') {
                                        if ($pathChunks[6] == '{runner_id}') {
                                            if ($pathChunks[7] == 'labels') {
                                                if ($call == 'DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('runner_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: runner_id');
                                                    }
                                                    $arguments['runner_id'] = $params['runner_id'];
                                                    unset($params['runner_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                    }
                                                    $operation = new Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $arguments['owner'], $arguments['repo'], $arguments['runner_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForRepo\Response\Applicationjson\H200 {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'runs') {
                                        if ($pathChunks[6] == '{run_id}') {
                                            if ($pathChunks[7] == 'logs') {
                                                if ($call == 'DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('run_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: run_id');
                                                    }
                                                    $arguments['run_id'] = $params['run_id'];
                                                    unset($params['run_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Logs::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Logs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Logs();
                                                    }
                                                    $operation = new Operation\Actions\DeleteWorkflowRunLogs($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Logs::class], $arguments['owner'], $arguments['repo'], $arguments['run_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'branches') {
                                    if ($pathChunks[5] == '{branch}') {
                                        if ($pathChunks[6] == 'protection') {
                                            if ($pathChunks[7] == 'enforce_admins') {
                                                if ($call == 'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('branch', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                    }
                                                    $arguments['branch'] = $params['branch'];
                                                    unset($params['branch']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\EnforceAdmins::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\EnforceAdmins::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀EnforceAdmins();
                                                    }
                                                    $operation = new Operation\Repos\DeleteAdminBranchProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\EnforceAdmins::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'required_pull_request_reviews') {
                                                if ($call == 'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('branch', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                    }
                                                    $arguments['branch'] = $params['branch'];
                                                    unset($params['branch']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredPullRequestReviews::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredPullRequestReviews::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredPullRequestReviews();
                                                    }
                                                    $operation = new Operation\Repos\DeletePullRequestReviewProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredPullRequestReviews::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'required_signatures') {
                                                if ($call == 'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('branch', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                    }
                                                    $arguments['branch'] = $params['branch'];
                                                    unset($params['branch']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredSignatures::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredSignatures::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredSignatures();
                                                    }
                                                    $operation = new Operation\Repos\DeleteCommitSignatureProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredSignatures::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'required_status_checks') {
                                                if ($call == 'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('branch', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                    }
                                                    $arguments['branch'] = $params['branch'];
                                                    unset($params['branch']);
                                                    $operation = new Operation\Repos\RemoveStatusCheckProtection($arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'restrictions') {
                                                if ($call == 'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('branch', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                    }
                                                    $arguments['branch'] = $params['branch'];
                                                    unset($params['branch']);
                                                    $operation = new Operation\Repos\DeleteAccessRestrictions($arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'comments') {
                                    if ($pathChunks[5] == '{comment_id}') {
                                        if ($pathChunks[6] == 'reactions') {
                                            if ($pathChunks[7] == '{reaction_id}') {
                                                if ($call == 'DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('comment_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                                    }
                                                    $arguments['comment_id'] = $params['comment_id'];
                                                    unset($params['comment_id']);
                                                    if (array_key_exists('reaction_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: reaction_id');
                                                    }
                                                    $arguments['reaction_id'] = $params['reaction_id'];
                                                    unset($params['reaction_id']);
                                                    $operation = new Operation\Reactions\DeleteForCommitComment($arguments['owner'], $arguments['repo'], $arguments['comment_id'], $arguments['reaction_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'environments') {
                                    if ($pathChunks[5] == '{environment_name}') {
                                        if ($pathChunks[6] == 'deployment-branch-policies') {
                                            if ($pathChunks[7] == '{branch_policy_id}') {
                                                if ($call == 'DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('environment_name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: environment_name');
                                                    }
                                                    $arguments['environment_name'] = $params['environment_name'];
                                                    unset($params['environment_name']);
                                                    if (array_key_exists('branch_policy_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: branch_policy_id');
                                                    }
                                                    $arguments['branch_policy_id'] = $params['branch_policy_id'];
                                                    unset($params['branch_policy_id']);
                                                    $operation = new Operation\Repos\DeleteDeploymentBranchPolicy($arguments['owner'], $arguments['repo'], $arguments['environment_name'], $arguments['branch_policy_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'issues') {
                                    if ($pathChunks[5] == '{issue_number}') {
                                        if ($pathChunks[6] == 'labels') {
                                            if ($pathChunks[7] == '{name}') {
                                                if ($call == 'DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('issue_number', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: issue_number');
                                                    }
                                                    $arguments['issue_number'] = $params['issue_number'];
                                                    unset($params['issue_number']);
                                                    if (array_key_exists('name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: name');
                                                    }
                                                    $arguments['name'] = $params['name'];
                                                    unset($params['name']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels\CbNameRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels\CbNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Labels🌀CbNameRcb();
                                                    }
                                                    $operation = new Operation\Issues\RemoveLabel($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels\CbNameRcb::class], $arguments['owner'], $arguments['repo'], $arguments['issue_number'], $arguments['name']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable|\ApiClients\Client\Github\Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        } elseif ($pathChunks[6] == 'reactions') {
                                            if ($pathChunks[7] == '{reaction_id}') {
                                                if ($call == 'DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('issue_number', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: issue_number');
                                                    }
                                                    $arguments['issue_number'] = $params['issue_number'];
                                                    unset($params['issue_number']);
                                                    if (array_key_exists('reaction_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: reaction_id');
                                                    }
                                                    $arguments['reaction_id'] = $params['reaction_id'];
                                                    unset($params['reaction_id']);
                                                    $operation = new Operation\Reactions\DeleteForIssue($arguments['owner'], $arguments['repo'], $arguments['issue_number'], $arguments['reaction_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'pulls') {
                                    if ($pathChunks[5] == '{pull_number}') {
                                        if ($pathChunks[6] == 'reviews') {
                                            if ($pathChunks[7] == '{review_id}') {
                                                if ($call == 'DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('pull_number', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                    }
                                                    $arguments['pull_number'] = $params['pull_number'];
                                                    unset($params['pull_number']);
                                                    if (array_key_exists('review_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: review_id');
                                                    }
                                                    $arguments['review_id'] = $params['review_id'];
                                                    unset($params['review_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Reviews🌀CbReviewIdRcb();
                                                    }
                                                    $operation = new Operation\Pulls\DeletePendingReview($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number'], $arguments['review_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PullRequestReview {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'releases') {
                                    if ($pathChunks[5] == '{release_id}') {
                                        if ($pathChunks[6] == 'reactions') {
                                            if ($pathChunks[7] == '{reaction_id}') {
                                                if ($call == 'DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('release_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: release_id');
                                                    }
                                                    $arguments['release_id'] = $params['release_id'];
                                                    unset($params['release_id']);
                                                    if (array_key_exists('reaction_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: reaction_id');
                                                    }
                                                    $arguments['reaction_id'] = $params['reaction_id'];
                                                    unset($params['reaction_id']);
                                                    $operation = new Operation\Reactions\DeleteForRelease($arguments['owner'], $arguments['repo'], $arguments['release_id'], $arguments['reaction_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'users') {
                        if ($pathChunks[2] == '{username}') {
                            if ($pathChunks[3] == 'packages') {
                                if ($pathChunks[4] == '{package_type}') {
                                    if ($pathChunks[5] == '{package_name}') {
                                        if ($pathChunks[6] == 'versions') {
                                            if ($pathChunks[7] == '{package_version_id}') {
                                                if ($call == 'DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('package_type', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: package_type');
                                                    }
                                                    $arguments['package_type'] = $params['package_type'];
                                                    unset($params['package_type']);
                                                    if (array_key_exists('package_name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: package_name');
                                                    }
                                                    $arguments['package_name'] = $params['package_name'];
                                                    unset($params['package_name']);
                                                    if (array_key_exists('username', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                                    }
                                                    $arguments['username'] = $params['username'];
                                                    unset($params['username']);
                                                    if (array_key_exists('package_version_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: package_version_id');
                                                    }
                                                    $arguments['package_version_id'] = $params['package_version_id'];
                                                    unset($params['package_version_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions🌀CbPackageVersionIdRcb();
                                                    }
                                                    $operation = new Operation\Packages\DeletePackageVersionForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class], $arguments['package_type'], $arguments['package_name'], $arguments['username'], $arguments['package_version_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 9) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'teams') {
                                if ($pathChunks[4] == '{team_slug}') {
                                    if ($pathChunks[5] == 'discussions') {
                                        if ($pathChunks[6] == '{discussion_number}') {
                                            if ($pathChunks[7] == 'comments') {
                                                if ($pathChunks[8] == '{comment_number}') {
                                                    if ($call == 'DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}') {
                                                        $arguments = array();
                                                        if (array_key_exists('org', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                                        }
                                                        $arguments['org'] = $params['org'];
                                                        unset($params['org']);
                                                        if (array_key_exists('team_slug', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                        }
                                                        $arguments['team_slug'] = $params['team_slug'];
                                                        unset($params['team_slug']);
                                                        if (array_key_exists('discussion_number', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                                        }
                                                        $arguments['discussion_number'] = $params['discussion_number'];
                                                        unset($params['discussion_number']);
                                                        if (array_key_exists('comment_number', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: comment_number');
                                                        }
                                                        $arguments['comment_number'] = $params['comment_number'];
                                                        unset($params['comment_number']);
                                                        $operation = new Operation\Teams\DeleteDiscussionCommentInOrg($arguments['org'], $arguments['team_slug'], $arguments['discussion_number'], $arguments['comment_number']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            } elseif ($pathChunks[7] == 'reactions') {
                                                if ($pathChunks[8] == '{reaction_id}') {
                                                    if ($call == 'DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}') {
                                                        $arguments = array();
                                                        if (array_key_exists('org', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                                        }
                                                        $arguments['org'] = $params['org'];
                                                        unset($params['org']);
                                                        if (array_key_exists('team_slug', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                        }
                                                        $arguments['team_slug'] = $params['team_slug'];
                                                        unset($params['team_slug']);
                                                        if (array_key_exists('discussion_number', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                                        }
                                                        $arguments['discussion_number'] = $params['discussion_number'];
                                                        unset($params['discussion_number']);
                                                        if (array_key_exists('reaction_id', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: reaction_id');
                                                        }
                                                        $arguments['reaction_id'] = $params['reaction_id'];
                                                        unset($params['reaction_id']);
                                                        $operation = new Operation\Reactions\DeleteForTeamDiscussion($arguments['org'], $arguments['team_slug'], $arguments['discussion_number'], $arguments['reaction_id']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'runners') {
                                        if ($pathChunks[6] == '{runner_id}') {
                                            if ($pathChunks[7] == 'labels') {
                                                if ($pathChunks[8] == '{name}') {
                                                    if ($call == 'DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('runner_id', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: runner_id');
                                                        }
                                                        $arguments['runner_id'] = $params['runner_id'];
                                                        unset($params['runner_id']);
                                                        if (array_key_exists('name', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: name');
                                                        }
                                                        $arguments['name'] = $params['name'];
                                                        unset($params['name']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels\CbNameRcb::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels\CbNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels🌀CbNameRcb();
                                                        }
                                                        $operation = new Operation\Actions\RemoveCustomLabelFromSelfHostedRunnerForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels\CbNameRcb::class], $arguments['owner'], $arguments['repo'], $arguments['runner_id'], $arguments['name']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200 {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'branches') {
                                    if ($pathChunks[5] == '{branch}') {
                                        if ($pathChunks[6] == 'protection') {
                                            if ($pathChunks[7] == 'required_status_checks') {
                                                if ($pathChunks[8] == 'contexts') {
                                                    if ($call == 'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('branch', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                        }
                                                        $arguments['branch'] = $params['branch'];
                                                        unset($params['branch']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredStatusChecks🌀Contexts();
                                                        }
                                                        $operation = new Operation\Repos\RemoveStatusCheckContexts($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            } elseif ($pathChunks[7] == 'restrictions') {
                                                if ($pathChunks[8] == 'apps') {
                                                    if ($call == 'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('branch', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                        }
                                                        $arguments['branch'] = $params['branch'];
                                                        unset($params['branch']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Apps();
                                                        }
                                                        $operation = new Operation\Repos\RemoveAppAccessRestrictions($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                } elseif ($pathChunks[8] == 'teams') {
                                                    if ($call == 'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('branch', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                        }
                                                        $arguments['branch'] = $params['branch'];
                                                        unset($params['branch']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Teams();
                                                        }
                                                        $operation = new Operation\Repos\RemoveTeamAccessRestrictions($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                } elseif ($pathChunks[8] == 'users') {
                                                    if ($call == 'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('branch', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                        }
                                                        $arguments['branch'] = $params['branch'];
                                                        unset($params['branch']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Users();
                                                        }
                                                        $operation = new Operation\Repos\RemoveUserAccessRestrictions($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'issues') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($pathChunks[6] == '{comment_id}') {
                                            if ($pathChunks[7] == 'reactions') {
                                                if ($pathChunks[8] == '{reaction_id}') {
                                                    if ($call == 'DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('comment_id', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                                        }
                                                        $arguments['comment_id'] = $params['comment_id'];
                                                        unset($params['comment_id']);
                                                        if (array_key_exists('reaction_id', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: reaction_id');
                                                        }
                                                        $arguments['reaction_id'] = $params['reaction_id'];
                                                        unset($params['reaction_id']);
                                                        $operation = new Operation\Reactions\DeleteForIssueComment($arguments['owner'], $arguments['repo'], $arguments['comment_id'], $arguments['reaction_id']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'pulls') {
                                    if ($pathChunks[5] == 'comments') {
                                        if ($pathChunks[6] == '{comment_id}') {
                                            if ($pathChunks[7] == 'reactions') {
                                                if ($pathChunks[8] == '{reaction_id}') {
                                                    if ($call == 'DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('comment_id', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: comment_id');
                                                        }
                                                        $arguments['comment_id'] = $params['comment_id'];
                                                        unset($params['comment_id']);
                                                        if (array_key_exists('reaction_id', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: reaction_id');
                                                        }
                                                        $arguments['reaction_id'] = $params['reaction_id'];
                                                        unset($params['reaction_id']);
                                                        $operation = new Operation\Reactions\DeleteForPullRequestComment($arguments['owner'], $arguments['repo'], $arguments['comment_id'], $arguments['reaction_id']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 11) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'teams') {
                                if ($pathChunks[4] == '{team_slug}') {
                                    if ($pathChunks[5] == 'discussions') {
                                        if ($pathChunks[6] == '{discussion_number}') {
                                            if ($pathChunks[7] == 'comments') {
                                                if ($pathChunks[8] == '{comment_number}') {
                                                    if ($pathChunks[9] == 'reactions') {
                                                        if ($pathChunks[10] == '{reaction_id}') {
                                                            if ($call == 'DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}') {
                                                                $arguments = array();
                                                                if (array_key_exists('org', $params) === false) {
                                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                                }
                                                                $arguments['org'] = $params['org'];
                                                                unset($params['org']);
                                                                if (array_key_exists('team_slug', $params) === false) {
                                                                    throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                                }
                                                                $arguments['team_slug'] = $params['team_slug'];
                                                                unset($params['team_slug']);
                                                                if (array_key_exists('discussion_number', $params) === false) {
                                                                    throw new \InvalidArgumentException('Missing mandatory field: discussion_number');
                                                                }
                                                                $arguments['discussion_number'] = $params['discussion_number'];
                                                                unset($params['discussion_number']);
                                                                if (array_key_exists('comment_number', $params) === false) {
                                                                    throw new \InvalidArgumentException('Missing mandatory field: comment_number');
                                                                }
                                                                $arguments['comment_number'] = $params['comment_number'];
                                                                unset($params['comment_number']);
                                                                if (array_key_exists('reaction_id', $params) === false) {
                                                                    throw new \InvalidArgumentException('Missing mandatory field: reaction_id');
                                                                }
                                                                $arguments['reaction_id'] = $params['reaction_id'];
                                                                unset($params['reaction_id']);
                                                                $operation = new Operation\Reactions\DeleteForTeamDiscussionComment($arguments['org'], $arguments['team_slug'], $arguments['discussion_number'], $arguments['comment_number'], $arguments['reaction_id']);
                                                                $request = $operation->createRequest($params);
                                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                                    return $operation->createResponse($response);
                                                                });
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } elseif ($method === 'PUT') {
            if ($pathChunksCount === 5) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'app') {
                        if ($pathChunks[2] == 'installations') {
                            if ($pathChunks[3] == '{installation_id}') {
                                if ($pathChunks[4] == 'suspended') {
                                    if ($call == 'PUT /app/installations/{installation_id}/suspended') {
                                        $arguments = array();
                                        if (array_key_exists('installation_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: installation_id');
                                        }
                                        $arguments['installation_id'] = $params['installation_id'];
                                        unset($params['installation_id']);
                                        if (\array_key_exists(Hydrator\Operation\App\Installations\CbInstallationIdRcb\Suspended::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb\Suspended::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Installations🌀CbInstallationIdRcb🌀Suspended();
                                        }
                                        $operation = new Operation\Apps\SuspendInstallation($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb\Suspended::class], $arguments['installation_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'notifications') {
                        if ($pathChunks[2] == 'threads') {
                            if ($pathChunks[3] == '{thread_id}') {
                                if ($pathChunks[4] == 'subscription') {
                                    if ($call == 'PUT /notifications/threads/{thread_id}/subscription') {
                                        $arguments = array();
                                        if (array_key_exists('thread_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: thread_id');
                                        }
                                        $arguments['thread_id'] = $params['thread_id'];
                                        unset($params['thread_id']);
                                        if (\array_key_exists(Hydrator\Operation\Notifications\Threads\CbThreadIdRcb\Subscription::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb\Subscription::class] = $this->hydrators->getObjectMapperOperation🌀Notifications🌀Threads🌀CbThreadIdRcb🌀Subscription();
                                        }
                                        $operation = new Operation\Activity\SetThreadSubscription($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb\Subscription::class], $arguments['thread_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ThreadSubscription {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'actions') {
                                if ($pathChunks[4] == 'permissions') {
                                    if ($call == 'PUT /orgs/{org}/actions/permissions') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        $operation = new Operation\Actions\SetGithubActionsPermissionsOrganization($this->requestSchemaValidator, $arguments['org']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'blocks') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'PUT /orgs/{org}/blocks/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Blocks\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Blocks\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Blocks🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Orgs\BlockUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Blocks\CbUsernameRcb::class], $arguments['org'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'codespaces') {
                                if ($pathChunks[4] == 'billing') {
                                    if ($call == 'PUT /orgs/{org}/codespaces/billing') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Billing::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Billing::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Billing();
                                        }
                                        $operation = new Operation\Codespaces\SetCodespacesBilling($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Billing::class], $arguments['org']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'memberships') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'PUT /orgs/{org}/memberships/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Memberships\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Memberships\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Memberships🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Orgs\SetMembershipForUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Memberships\CbUsernameRcb::class], $arguments['org'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\OrgMembership {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'outside_collaborators') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'PUT /orgs/{org}/outside_collaborators/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\OutsideCollaborators\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\OutsideCollaborators\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀OutsideCollaborators🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Orgs\ConvertMemberToOutsideCollaborator($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\OutsideCollaborators\CbUsernameRcb::class], $arguments['org'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Orgs\ConvertMemberToOutsideCollaborator\Response\Applicationjson\H202 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'public_members') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'PUT /orgs/{org}/public_members/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('org', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: org');
                                        }
                                        $arguments['org'] = $params['org'];
                                        unset($params['org']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\PublicMembers\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\PublicMembers\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀PublicMembers🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Orgs\SetPublicMembershipForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\PublicMembers\CbUsernameRcb::class], $arguments['org'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'projects') {
                        if ($pathChunks[2] == '{project_id}') {
                            if ($pathChunks[3] == 'collaborators') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'PUT /projects/{project_id}/collaborators/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('project_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: project_id');
                                        }
                                        $arguments['project_id'] = $params['project_id'];
                                        unset($params['project_id']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        if (\array_key_exists(Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀CbProjectIdRcb🌀Collaborators🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Projects\AddCollaborator($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators\CbUsernameRcb::class], $arguments['project_id'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'automated-security-fixes') {
                                    if ($call == 'PUT /repos/{owner}/{repo}/automated-security-fixes') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        $operation = new Operation\Repos\EnableAutomatedSecurityFixes($arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'import') {
                                    if ($call == 'PUT /repos/{owner}/{repo}/import') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Import();
                                        }
                                        $operation = new Operation\Migrations\StartImport($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Import {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'interaction-limits') {
                                    if ($call == 'PUT /repos/{owner}/{repo}/interaction-limits') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\InteractionLimits::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\InteractionLimits::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀InteractionLimits();
                                        }
                                        $operation = new Operation\Interactions\SetRestrictionsForRepo($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\InteractionLimits::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\InteractionLimitResponse {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'lfs') {
                                    if ($call == 'PUT /repos/{owner}/{repo}/lfs') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Lfs::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Lfs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Lfs();
                                        }
                                        $operation = new Operation\Repos\EnableLfsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Lfs::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Repos\EnableLfsForRepo\Response\Applicationjson\H202 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'notifications') {
                                    if ($call == 'PUT /repos/{owner}/{repo}/notifications') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Notifications::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Notifications::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Notifications();
                                        }
                                        $operation = new Operation\Activity\MarkRepoNotificationsAsRead($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Notifications::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Activity\MarkRepoNotificationsAsRead\Response\Applicationjson\H202 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'pages') {
                                    if ($call == 'PUT /repos/{owner}/{repo}/pages') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages();
                                        }
                                        $operation = new Operation\Repos\UpdateInformationAboutPagesSite($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'subscription') {
                                    if ($call == 'PUT /repos/{owner}/{repo}/subscription') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Subscription::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Subscription::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Subscription();
                                        }
                                        $operation = new Operation\Activity\SetRepoSubscription($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Subscription::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\RepositorySubscription {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'topics') {
                                    if ($call == 'PUT /repos/{owner}/{repo}/topics') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Topics::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Topics::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Topics();
                                        }
                                        $operation = new Operation\Repos\ReplaceAllTopics($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Topics::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Topic {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif ($pathChunks[4] == 'vulnerability-alerts') {
                                    if ($call == 'PUT /repos/{owner}/{repo}/vulnerability-alerts') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        $operation = new Operation\Repos\EnableVulnerabilityAlerts($arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'teams') {
                        if ($pathChunks[2] == '{team_id}') {
                            if ($pathChunks[3] == 'members') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'PUT /teams/{team_id}/members/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('team_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                        }
                                        $arguments['team_id'] = $params['team_id'];
                                        unset($params['team_id']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Members\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Members\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Members🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Teams\AddMemberLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Members\CbUsernameRcb::class], $arguments['team_id'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'memberships') {
                                if ($pathChunks[4] == '{username}') {
                                    if ($call == 'PUT /teams/{team_id}/memberships/{username}') {
                                        $arguments = array();
                                        if (array_key_exists('team_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                        }
                                        $arguments['team_id'] = $params['team_id'];
                                        unset($params['team_id']);
                                        if (array_key_exists('username', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: username');
                                        }
                                        $arguments['username'] = $params['username'];
                                        unset($params['username']);
                                        if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Memberships\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Memberships\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Memberships🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Teams\AddOrUpdateMembershipForUserLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Memberships\CbUsernameRcb::class], $arguments['team_id'], $arguments['username']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamMembership {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif ($pathChunks[3] == 'projects') {
                                if ($pathChunks[4] == '{project_id}') {
                                    if ($call == 'PUT /teams/{team_id}/projects/{project_id}') {
                                        $arguments = array();
                                        if (array_key_exists('team_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                        }
                                        $arguments['team_id'] = $params['team_id'];
                                        unset($params['team_id']);
                                        if (array_key_exists('project_id', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: project_id');
                                        }
                                        $arguments['project_id'] = $params['project_id'];
                                        unset($params['project_id']);
                                        if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Projects\CbProjectIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Projects\CbProjectIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Projects🌀CbProjectIdRcb();
                                        }
                                        $operation = new Operation\Teams\AddOrUpdateProjectPermissionsLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Projects\CbProjectIdRcb::class], $arguments['team_id'], $arguments['project_id']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'codespaces') {
                            if ($pathChunks[3] == 'secrets') {
                                if ($pathChunks[4] == '{secret_name}') {
                                    if ($call == 'PUT /user/codespaces/secrets/{secret_name}') {
                                        $arguments = array();
                                        if (array_key_exists('secret_name', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                        }
                                        $arguments['secret_name'] = $params['secret_name'];
                                        unset($params['secret_name']);
                                        if (\array_key_exists(Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀Secrets🌀CbSecretNameRcb();
                                        }
                                        $operation = new Operation\Codespaces\CreateOrUpdateSecretForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb::class], $arguments['secret_name']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif ($pathChunks[2] == 'starred') {
                            if ($pathChunks[3] == '{owner}') {
                                if ($pathChunks[4] == '{repo}') {
                                    if ($call == 'PUT /user/starred/{owner}/{repo}') {
                                        $arguments = array();
                                        if (array_key_exists('owner', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                        }
                                        $arguments['owner'] = $params['owner'];
                                        unset($params['owner']);
                                        if (array_key_exists('repo', $params) === false) {
                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                        }
                                        $arguments['repo'] = $params['repo'];
                                        unset($params['repo']);
                                        if (\array_key_exists(Hydrator\Operation\User\Starred\CbOwnerRcb\CbRepoRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Starred\CbOwnerRcb\CbRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Starred🌀CbOwnerRcb🌀CbRepoRcb();
                                        }
                                        $operation = new Operation\Activity\StarRepoForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Starred\CbOwnerRcb\CbRepoRcb::class], $arguments['owner'], $arguments['repo']);
                                        $request = $operation->createRequest($params);
                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 4) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'gists') {
                        if ($pathChunks[2] == '{gist_id}') {
                            if ($pathChunks[3] == 'star') {
                                if ($call == 'PUT /gists/{gist_id}/star') {
                                    $arguments = array();
                                    if (array_key_exists('gist_id', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: gist_id');
                                    }
                                    $arguments['gist_id'] = $params['gist_id'];
                                    unset($params['gist_id']);
                                    if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Star::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Star::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Star();
                                    }
                                    $operation = new Operation\Gists\Star($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Star::class], $arguments['gist_id']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'interaction-limits') {
                                if ($call == 'PUT /orgs/{org}/interaction-limits') {
                                    $arguments = array();
                                    if (array_key_exists('org', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                    }
                                    $arguments['org'] = $params['org'];
                                    unset($params['org']);
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\InteractionLimits::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\InteractionLimits::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀InteractionLimits();
                                    }
                                    $operation = new Operation\Interactions\SetRestrictionsForOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\InteractionLimits::class], $arguments['org']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\InteractionLimitResponse {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'blocks') {
                            if ($pathChunks[3] == '{username}') {
                                if ($call == 'PUT /user/blocks/{username}') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (\array_key_exists(Hydrator\Operation\User\Blocks\CbUsernameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Blocks\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Blocks🌀CbUsernameRcb();
                                    }
                                    $operation = new Operation\Users\Block($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Blocks\CbUsernameRcb::class], $arguments['username']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif ($pathChunks[2] == 'following') {
                            if ($pathChunks[3] == '{username}') {
                                if ($call == 'PUT /user/following/{username}') {
                                    $arguments = array();
                                    if (array_key_exists('username', $params) === false) {
                                        throw new \InvalidArgumentException('Missing mandatory field: username');
                                    }
                                    $arguments['username'] = $params['username'];
                                    unset($params['username']);
                                    if (\array_key_exists(Hydrator\Operation\User\Following\CbUsernameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Following\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Following🌀CbUsernameRcb();
                                    }
                                    $operation = new Operation\Users\Follow($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Following\CbUsernameRcb::class], $arguments['username']);
                                    $request = $operation->createRequest($params);
                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 2) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'notifications') {
                        if ($call == 'PUT /notifications') {
                            $arguments = array();
                            if (\array_key_exists(Hydrator\Operation\Notifications::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Notifications::class] = $this->hydrators->getObjectMapperOperation🌀Notifications();
                            }
                            $operation = new Operation\Activity\MarkNotificationsAsRead($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Notifications::class]);
                            $request = $operation->createRequest($params);
                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Activity\MarkNotificationsAsRead\Response\Applicationjson\H202 {
                                return $operation->createResponse($response);
                            });
                        }
                    }
                }
            } elseif ($pathChunksCount === 7) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'actions') {
                                if ($pathChunks[4] == 'oidc') {
                                    if ($pathChunks[5] == 'customization') {
                                        if ($pathChunks[6] == 'sub') {
                                            if ($call == 'PUT /orgs/{org}/actions/oidc/customization/sub') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Oidc\Customization\Sub::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Oidc\Customization\Sub::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Oidc🌀Customization🌀Sub();
                                                }
                                                $operation = new Operation\Oidc\UpdateOidcCustomSubTemplateForOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Oidc\Customization\Sub::class], $arguments['org']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'permissions') {
                                    if ($pathChunks[5] == 'repositories') {
                                        if ($pathChunks[6] == '{repository_id}') {
                                            if ($call == 'PUT /orgs/{org}/actions/permissions/repositories/{repository_id}') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('repository_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                }
                                                $arguments['repository_id'] = $params['repository_id'];
                                                unset($params['repository_id']);
                                                $operation = new Operation\Actions\EnableSelectedRepositoryGithubActionsOrganization($arguments['org'], $arguments['repository_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'required_workflows') {
                                    if ($pathChunks[5] == '{required_workflow_id}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($call == 'PUT /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('required_workflow_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: required_workflow_id');
                                                }
                                                $arguments['required_workflow_id'] = $params['required_workflow_id'];
                                                unset($params['required_workflow_id']);
                                                $operation = new Operation\Actions\SetSelectedReposToRequiredWorkflow($this->requestSchemaValidator, $arguments['org'], $arguments['required_workflow_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'runners') {
                                    if ($pathChunks[5] == '{runner_id}') {
                                        if ($pathChunks[6] == 'labels') {
                                            if ($call == 'PUT /orgs/{org}/actions/runners/{runner_id}/labels') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('runner_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: runner_id');
                                                }
                                                $arguments['runner_id'] = $params['runner_id'];
                                                unset($params['runner_id']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                }
                                                $operation = new Operation\Actions\SetCustomLabelsForSelfHostedRunnerForOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $arguments['org'], $arguments['runner_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == '{secret_name}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($call == 'PUT /orgs/{org}/actions/secrets/{secret_name}/repositories') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                $operation = new Operation\Actions\SetSelectedReposForOrgSecret($this->requestSchemaValidator, $arguments['org'], $arguments['secret_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'variables') {
                                    if ($pathChunks[5] == '{name}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($call == 'PUT /orgs/{org}/actions/variables/{name}/repositories') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: name');
                                                }
                                                $arguments['name'] = $params['name'];
                                                unset($params['name']);
                                                $operation = new Operation\Actions\SetSelectedReposForOrgVariable($this->requestSchemaValidator, $arguments['org'], $arguments['name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'codespaces') {
                                if ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == '{secret_name}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($call == 'PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Secrets🌀CbSecretNameRcb🌀Repositories();
                                                }
                                                $operation = new Operation\Codespaces\SetSelectedReposForOrgSecret($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories::class], $arguments['org'], $arguments['secret_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'dependabot') {
                                if ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == '{secret_name}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($call == 'PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                $operation = new Operation\Dependabot\SetSelectedReposForOrgSecret($this->requestSchemaValidator, $arguments['org'], $arguments['secret_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'teams') {
                                if ($pathChunks[4] == '{team_slug}') {
                                    if ($pathChunks[5] == 'memberships') {
                                        if ($pathChunks[6] == '{username}') {
                                            if ($call == 'PUT /orgs/{org}/teams/{team_slug}/memberships/{username}') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('team_slug', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                }
                                                $arguments['team_slug'] = $params['team_slug'];
                                                unset($params['team_slug']);
                                                if (array_key_exists('username', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: username');
                                                }
                                                $arguments['username'] = $params['username'];
                                                unset($params['username']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Memberships\CbUsernameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Memberships\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Memberships🌀CbUsernameRcb();
                                                }
                                                $operation = new Operation\Teams\AddOrUpdateMembershipForUserInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Memberships\CbUsernameRcb::class], $arguments['org'], $arguments['team_slug'], $arguments['username']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\TeamMembership {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'projects') {
                                        if ($pathChunks[6] == '{project_id}') {
                                            if ($call == 'PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}') {
                                                $arguments = array();
                                                if (array_key_exists('org', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: org');
                                                }
                                                $arguments['org'] = $params['org'];
                                                unset($params['org']);
                                                if (array_key_exists('team_slug', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                }
                                                $arguments['team_slug'] = $params['team_slug'];
                                                unset($params['team_slug']);
                                                if (array_key_exists('project_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: project_id');
                                                }
                                                $arguments['project_id'] = $params['project_id'];
                                                unset($params['project_id']);
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Projects\CbProjectIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Projects\CbProjectIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Projects🌀CbProjectIdRcb();
                                                }
                                                $operation = new Operation\Teams\AddOrUpdateProjectPermissionsInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Projects\CbProjectIdRcb::class], $arguments['org'], $arguments['team_slug'], $arguments['project_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'permissions') {
                                        if ($pathChunks[6] == 'access') {
                                            if ($call == 'PUT /repos/{owner}/{repo}/actions/permissions/access') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                $operation = new Operation\Actions\SetWorkflowAccessToRepository($this->requestSchemaValidator, $arguments['owner'], $arguments['repo']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'selected-actions') {
                                            if ($call == 'PUT /repos/{owner}/{repo}/actions/permissions/selected-actions') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                $operation = new Operation\Actions\SetAllowedActionsRepository($this->requestSchemaValidator, $arguments['owner'], $arguments['repo']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'workflow') {
                                            if ($call == 'PUT /repos/{owner}/{repo}/actions/permissions/workflow') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                $operation = new Operation\Actions\SetGithubActionsDefaultWorkflowPermissionsRepository($this->requestSchemaValidator, $arguments['owner'], $arguments['repo']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'secrets') {
                                        if ($pathChunks[6] == '{secret_name}') {
                                            if ($call == 'PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Secrets🌀CbSecretNameRcb();
                                                }
                                                $operation = new Operation\Actions\CreateOrUpdateRepoSecret($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets\CbSecretNameRcb::class], $arguments['owner'], $arguments['repo'], $arguments['secret_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'branches') {
                                    if ($pathChunks[5] == '{branch}') {
                                        if ($pathChunks[6] == 'protection') {
                                            if ($call == 'PUT /repos/{owner}/{repo}/branches/{branch}/protection') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('branch', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                }
                                                $arguments['branch'] = $params['branch'];
                                                unset($params['branch']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection();
                                                }
                                                $operation = new Operation\Repos\UpdateBranchProtection($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\ProtectedBranch {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'codespaces') {
                                    if ($pathChunks[5] == 'secrets') {
                                        if ($pathChunks[6] == '{secret_name}') {
                                            if ($call == 'PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codespaces🌀Secrets🌀CbSecretNameRcb();
                                                }
                                                $operation = new Operation\Codespaces\CreateOrUpdateRepoSecret($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets\CbSecretNameRcb::class], $arguments['owner'], $arguments['repo'], $arguments['secret_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'dependabot') {
                                    if ($pathChunks[5] == 'secrets') {
                                        if ($pathChunks[6] == '{secret_name}') {
                                            if ($call == 'PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Dependabot🌀Secrets🌀CbSecretNameRcb();
                                                }
                                                $operation = new Operation\Dependabot\CreateOrUpdateRepoSecret($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets\CbSecretNameRcb::class], $arguments['owner'], $arguments['repo'], $arguments['secret_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'issues') {
                                    if ($pathChunks[5] == '{issue_number}') {
                                        if ($pathChunks[6] == 'labels') {
                                            if ($call == 'PUT /repos/{owner}/{repo}/issues/{issue_number}/labels') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('issue_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: issue_number');
                                                }
                                                $arguments['issue_number'] = $params['issue_number'];
                                                unset($params['issue_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Labels();
                                                }
                                                $operation = new Operation\Issues\SetLabels($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class], $arguments['owner'], $arguments['repo'], $arguments['issue_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable|\ApiClients\Client\Github\Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'lock') {
                                            if ($call == 'PUT /repos/{owner}/{repo}/issues/{issue_number}/lock') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('issue_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: issue_number');
                                                }
                                                $arguments['issue_number'] = $params['issue_number'];
                                                unset($params['issue_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Lock::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Lock::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Lock();
                                                }
                                                $operation = new Operation\Issues\Lock($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Lock::class], $arguments['owner'], $arguments['repo'], $arguments['issue_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'pulls') {
                                    if ($pathChunks[5] == '{pull_number}') {
                                        if ($pathChunks[6] == 'merge') {
                                            if ($call == 'PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('pull_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                }
                                                $arguments['pull_number'] = $params['pull_number'];
                                                unset($params['pull_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Merge::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Merge::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Merge();
                                                }
                                                $operation = new Operation\Pulls\Merge($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Merge::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PullRequestMergeResult {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif ($pathChunks[6] == 'update-branch') {
                                            if ($call == 'PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch') {
                                                $arguments = array();
                                                if (array_key_exists('owner', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                }
                                                $arguments['owner'] = $params['owner'];
                                                unset($params['owner']);
                                                if (array_key_exists('repo', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                }
                                                $arguments['repo'] = $params['repo'];
                                                unset($params['repo']);
                                                if (array_key_exists('pull_number', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                }
                                                $arguments['pull_number'] = $params['pull_number'];
                                                unset($params['pull_number']);
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\UpdateDashBranch::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\UpdateDashBranch::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀UpdateDashBranch();
                                                }
                                                $operation = new Operation\Pulls\UpdateBranch($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\UpdateDashBranch::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Pulls\UpdateBranch\Response\Applicationjson\H202 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repositories') {
                        if ($pathChunks[2] == '{repository_id}') {
                            if ($pathChunks[3] == 'environments') {
                                if ($pathChunks[4] == '{environment_name}') {
                                    if ($pathChunks[5] == 'secrets') {
                                        if ($pathChunks[6] == '{secret_name}') {
                                            if ($call == 'PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}') {
                                                $arguments = array();
                                                if (array_key_exists('repository_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                }
                                                $arguments['repository_id'] = $params['repository_id'];
                                                unset($params['repository_id']);
                                                if (array_key_exists('environment_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: environment_name');
                                                }
                                                $arguments['environment_name'] = $params['environment_name'];
                                                unset($params['environment_name']);
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                if (\array_key_exists(Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repositories🌀CbRepositoryIdRcb🌀Environments🌀CbEnvironmentNameRcb🌀Secrets🌀CbSecretNameRcb();
                                                }
                                                $operation = new Operation\Actions\CreateOrUpdateEnvironmentSecret($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets\CbSecretNameRcb::class], $arguments['repository_id'], $arguments['environment_name'], $arguments['secret_name']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'codespaces') {
                            if ($pathChunks[3] == 'secrets') {
                                if ($pathChunks[4] == '{secret_name}') {
                                    if ($pathChunks[5] == 'repositories') {
                                        if ($pathChunks[6] == '{repository_id}') {
                                            if ($call == 'PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}') {
                                                $arguments = array();
                                                if (array_key_exists('secret_name', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                }
                                                $arguments['secret_name'] = $params['secret_name'];
                                                unset($params['secret_name']);
                                                if (array_key_exists('repository_id', $params) === false) {
                                                    throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                }
                                                $arguments['repository_id'] = $params['repository_id'];
                                                unset($params['repository_id']);
                                                if (\array_key_exists(Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀Secrets🌀CbSecretNameRcb🌀Repositories🌀CbRepositoryIdRcb();
                                                }
                                                $operation = new Operation\Codespaces\AddRepositoryForSecretForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class], $arguments['secret_name'], $arguments['repository_id']);
                                                $request = $operation->createRequest($params);
                                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 6) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'actions') {
                                if ($pathChunks[4] == 'permissions') {
                                    if ($pathChunks[5] == 'repositories') {
                                        if ($call == 'PUT /orgs/{org}/actions/permissions/repositories') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            $operation = new Operation\Actions\SetSelectedRepositoriesEnabledGithubActionsOrganization($this->requestSchemaValidator, $arguments['org']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'selected-actions') {
                                        if ($call == 'PUT /orgs/{org}/actions/permissions/selected-actions') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            $operation = new Operation\Actions\SetAllowedActionsOrganization($this->requestSchemaValidator, $arguments['org']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif ($pathChunks[5] == 'workflow') {
                                        if ($call == 'PUT /orgs/{org}/actions/permissions/workflow') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            $operation = new Operation\Actions\SetGithubActionsDefaultWorkflowPermissionsOrganization($this->requestSchemaValidator, $arguments['org']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == '{secret_name}') {
                                        if ($call == 'PUT /orgs/{org}/actions/secrets/{secret_name}') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('secret_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                            }
                                            $arguments['secret_name'] = $params['secret_name'];
                                            unset($params['secret_name']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Secrets🌀CbSecretNameRcb();
                                            }
                                            $operation = new Operation\Actions\CreateOrUpdateOrgSecret($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\CbSecretNameRcb::class], $arguments['org'], $arguments['secret_name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'codespaces') {
                                if ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == '{secret_name}') {
                                        if ($call == 'PUT /orgs/{org}/codespaces/secrets/{secret_name}') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('secret_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                            }
                                            $arguments['secret_name'] = $params['secret_name'];
                                            unset($params['secret_name']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Secrets🌀CbSecretNameRcb();
                                            }
                                            $operation = new Operation\Codespaces\CreateOrUpdateOrgSecret($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb::class], $arguments['org'], $arguments['secret_name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'dependabot') {
                                if ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == '{secret_name}') {
                                        if ($call == 'PUT /orgs/{org}/dependabot/secrets/{secret_name}') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('secret_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                            }
                                            $arguments['secret_name'] = $params['secret_name'];
                                            unset($params['secret_name']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Dependabot🌀Secrets🌀CbSecretNameRcb();
                                            }
                                            $operation = new Operation\Dependabot\CreateOrUpdateOrgSecret($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\CbSecretNameRcb::class], $arguments['org'], $arguments['secret_name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'security-managers') {
                                if ($pathChunks[4] == 'teams') {
                                    if ($pathChunks[5] == '{team_slug}') {
                                        if ($call == 'PUT /orgs/{org}/security-managers/teams/{team_slug}') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('team_slug', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                            }
                                            $arguments['team_slug'] = $params['team_slug'];
                                            unset($params['team_slug']);
                                            $operation = new Operation\Orgs\AddSecurityManagerTeam($arguments['org'], $arguments['team_slug']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'permissions') {
                                        if ($call == 'PUT /repos/{owner}/{repo}/actions/permissions') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            $operation = new Operation\Actions\SetGithubActionsPermissionsRepository($this->requestSchemaValidator, $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'collaborators') {
                                    if ($pathChunks[5] == '{username}') {
                                        if ($call == 'PUT /repos/{owner}/{repo}/collaborators/{username}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('username', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: username');
                                            }
                                            $arguments['username'] = $params['username'];
                                            unset($params['username']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Collaborators\CbUsernameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Collaborators\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Collaborators🌀CbUsernameRcb();
                                            }
                                            $operation = new Operation\Repos\AddCollaborator($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Collaborators\CbUsernameRcb::class], $arguments['owner'], $arguments['repo'], $arguments['username']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\RepositoryInvitation {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'contents') {
                                    if ($pathChunks[5] == '{path}') {
                                        if ($call == 'PUT /repos/{owner}/{repo}/contents/{path}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('path', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: path');
                                            }
                                            $arguments['path'] = $params['path'];
                                            unset($params['path']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contents\CbPathRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contents\CbPathRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Contents🌀CbPathRcb();
                                            }
                                            $operation = new Operation\Repos\CreateOrUpdateFileContents($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contents\CbPathRcb::class], $arguments['owner'], $arguments['repo'], $arguments['path']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\FileCommit {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'environments') {
                                    if ($pathChunks[5] == '{environment_name}') {
                                        if ($call == 'PUT /repos/{owner}/{repo}/environments/{environment_name}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('environment_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: environment_name');
                                            }
                                            $arguments['environment_name'] = $params['environment_name'];
                                            unset($params['environment_name']);
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Environments🌀CbEnvironmentNameRcb();
                                            }
                                            $operation = new Operation\Repos\CreateOrUpdateEnvironment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb::class], $arguments['owner'], $arguments['repo'], $arguments['environment_name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Environment {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'teams') {
                        if ($pathChunks[2] == '{team_id}') {
                            if ($pathChunks[3] == 'repos') {
                                if ($pathChunks[4] == '{owner}') {
                                    if ($pathChunks[5] == '{repo}') {
                                        if ($call == 'PUT /teams/{team_id}/repos/{owner}/{repo}') {
                                            $arguments = array();
                                            if (array_key_exists('team_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: team_id');
                                            }
                                            $arguments['team_id'] = $params['team_id'];
                                            unset($params['team_id']);
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Repos\CbOwnerRcb\CbRepoRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Repos\CbOwnerRcb\CbRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Repos🌀CbOwnerRcb🌀CbRepoRcb();
                                            }
                                            $operation = new Operation\Teams\AddOrUpdateRepoPermissionsLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Repos\CbOwnerRcb\CbRepoRcb::class], $arguments['team_id'], $arguments['owner'], $arguments['repo']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'codespaces') {
                            if ($pathChunks[3] == 'secrets') {
                                if ($pathChunks[4] == '{secret_name}') {
                                    if ($pathChunks[5] == 'repositories') {
                                        if ($call == 'PUT /user/codespaces/secrets/{secret_name}/repositories') {
                                            $arguments = array();
                                            if (array_key_exists('secret_name', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                            }
                                            $arguments['secret_name'] = $params['secret_name'];
                                            unset($params['secret_name']);
                                            if (\array_key_exists(Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀Secrets🌀CbSecretNameRcb🌀Repositories();
                                            }
                                            $operation = new Operation\Codespaces\SetRepositoriesForSecretForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories::class], $arguments['secret_name']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        } elseif ($pathChunks[2] == 'installations') {
                            if ($pathChunks[3] == '{installation_id}') {
                                if ($pathChunks[4] == 'repositories') {
                                    if ($pathChunks[5] == '{repository_id}') {
                                        if ($call == 'PUT /user/installations/{installation_id}/repositories/{repository_id}') {
                                            $arguments = array();
                                            if (array_key_exists('installation_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: installation_id');
                                            }
                                            $arguments['installation_id'] = $params['installation_id'];
                                            unset($params['installation_id']);
                                            if (array_key_exists('repository_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                            }
                                            $arguments['repository_id'] = $params['repository_id'];
                                            unset($params['repository_id']);
                                            if (\array_key_exists(Hydrator\Operation\User\Installations\CbInstallationIdRcb\Repositories\CbRepositoryIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\User\Installations\CbInstallationIdRcb\Repositories\CbRepositoryIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Installations🌀CbInstallationIdRcb🌀Repositories🌀CbRepositoryIdRcb();
                                            }
                                            $operation = new Operation\Apps\AddRepoToInstallationForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Installations\CbInstallationIdRcb\Repositories\CbRepositoryIdRcb::class], $arguments['installation_id'], $arguments['repository_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 8) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'actions') {
                                if ($pathChunks[4] == 'required_workflows') {
                                    if ($pathChunks[5] == '{required_workflow_id}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($pathChunks[7] == '{repository_id}') {
                                                if ($call == 'PUT /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('required_workflow_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: required_workflow_id');
                                                    }
                                                    $arguments['required_workflow_id'] = $params['required_workflow_id'];
                                                    unset($params['required_workflow_id']);
                                                    if (array_key_exists('repository_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                    }
                                                    $arguments['repository_id'] = $params['repository_id'];
                                                    unset($params['repository_id']);
                                                    $operation = new Operation\Actions\AddSelectedRepoToRequiredWorkflow($arguments['org'], $arguments['required_workflow_id'], $arguments['repository_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == '{secret_name}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($pathChunks[7] == '{repository_id}') {
                                                if ($call == 'PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('secret_name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                    }
                                                    $arguments['secret_name'] = $params['secret_name'];
                                                    unset($params['secret_name']);
                                                    if (array_key_exists('repository_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                    }
                                                    $arguments['repository_id'] = $params['repository_id'];
                                                    unset($params['repository_id']);
                                                    $operation = new Operation\Actions\AddSelectedRepoToOrgSecret($arguments['org'], $arguments['secret_name'], $arguments['repository_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'variables') {
                                    if ($pathChunks[5] == '{name}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($pathChunks[7] == '{repository_id}') {
                                                if ($call == 'PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: name');
                                                    }
                                                    $arguments['name'] = $params['name'];
                                                    unset($params['name']);
                                                    if (array_key_exists('repository_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                    }
                                                    $arguments['repository_id'] = $params['repository_id'];
                                                    unset($params['repository_id']);
                                                    $operation = new Operation\Actions\AddSelectedRepoToOrgVariable($arguments['org'], $arguments['name'], $arguments['repository_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'codespaces') {
                                if ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == '{secret_name}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($pathChunks[7] == '{repository_id}') {
                                                if ($call == 'PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('secret_name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                    }
                                                    $arguments['secret_name'] = $params['secret_name'];
                                                    unset($params['secret_name']);
                                                    if (array_key_exists('repository_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                    }
                                                    $arguments['repository_id'] = $params['repository_id'];
                                                    unset($params['repository_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Secrets🌀CbSecretNameRcb🌀Repositories🌀CbRepositoryIdRcb();
                                                    }
                                                    $operation = new Operation\Codespaces\AddSelectedRepoToOrgSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class], $arguments['org'], $arguments['secret_name'], $arguments['repository_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'dependabot') {
                                if ($pathChunks[4] == 'secrets') {
                                    if ($pathChunks[5] == '{secret_name}') {
                                        if ($pathChunks[6] == 'repositories') {
                                            if ($pathChunks[7] == '{repository_id}') {
                                                if ($call == 'PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('secret_name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: secret_name');
                                                    }
                                                    $arguments['secret_name'] = $params['secret_name'];
                                                    unset($params['secret_name']);
                                                    if (array_key_exists('repository_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repository_id');
                                                    }
                                                    $arguments['repository_id'] = $params['repository_id'];
                                                    unset($params['repository_id']);
                                                    $operation = new Operation\Dependabot\AddSelectedRepoToOrgSecret($arguments['org'], $arguments['secret_name'], $arguments['repository_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif ($pathChunks[3] == 'teams') {
                                if ($pathChunks[4] == '{team_slug}') {
                                    if ($pathChunks[5] == 'repos') {
                                        if ($pathChunks[6] == '{owner}') {
                                            if ($pathChunks[7] == '{repo}') {
                                                if ($call == 'PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}') {
                                                    $arguments = array();
                                                    if (array_key_exists('org', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: org');
                                                    }
                                                    $arguments['org'] = $params['org'];
                                                    unset($params['org']);
                                                    if (array_key_exists('team_slug', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: team_slug');
                                                    }
                                                    $arguments['team_slug'] = $params['team_slug'];
                                                    unset($params['team_slug']);
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    $operation = new Operation\Teams\AddOrUpdateRepoPermissionsInOrg($this->requestSchemaValidator, $arguments['org'], $arguments['team_slug'], $arguments['owner'], $arguments['repo']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'oidc') {
                                        if ($pathChunks[6] == 'customization') {
                                            if ($pathChunks[7] == 'sub') {
                                                if ($call == 'PUT /repos/{owner}/{repo}/actions/oidc/customization/sub') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Oidc\Customization\Sub::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Oidc\Customization\Sub::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Oidc🌀Customization🌀Sub();
                                                    }
                                                    $operation = new Operation\Actions\SetCustomOidcSubClaimForRepo($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Oidc\Customization\Sub::class], $arguments['owner'], $arguments['repo']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\EmptyObject {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'runners') {
                                        if ($pathChunks[6] == '{runner_id}') {
                                            if ($pathChunks[7] == 'labels') {
                                                if ($call == 'PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('runner_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: runner_id');
                                                    }
                                                    $arguments['runner_id'] = $params['runner_id'];
                                                    unset($params['runner_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                    }
                                                    $operation = new Operation\Actions\SetCustomLabelsForSelfHostedRunnerForRepo($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $arguments['owner'], $arguments['repo'], $arguments['runner_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\Operation\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\Applicationjson\H200 {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'workflows') {
                                        if ($pathChunks[6] == '{workflow_id}') {
                                            if ($pathChunks[7] == 'disable') {
                                                if ($call == 'PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('workflow_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: workflow_id');
                                                    }
                                                    $arguments['workflow_id'] = $params['workflow_id'];
                                                    unset($params['workflow_id']);
                                                    $operation = new Operation\Actions\DisableWorkflow($arguments['owner'], $arguments['repo'], $arguments['workflow_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif ($pathChunks[7] == 'enable') {
                                                if ($call == 'PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('workflow_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: workflow_id');
                                                    }
                                                    $arguments['workflow_id'] = $params['workflow_id'];
                                                    unset($params['workflow_id']);
                                                    $operation = new Operation\Actions\EnableWorkflow($arguments['owner'], $arguments['repo'], $arguments['workflow_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'environments') {
                                    if ($pathChunks[5] == '{environment_name}') {
                                        if ($pathChunks[6] == 'deployment-branch-policies') {
                                            if ($pathChunks[7] == '{branch_policy_id}') {
                                                if ($call == 'PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('environment_name', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: environment_name');
                                                    }
                                                    $arguments['environment_name'] = $params['environment_name'];
                                                    unset($params['environment_name']);
                                                    if (array_key_exists('branch_policy_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: branch_policy_id');
                                                    }
                                                    $arguments['branch_policy_id'] = $params['branch_policy_id'];
                                                    unset($params['branch_policy_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies\CbBranchPolicyIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies\CbBranchPolicyIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Environments🌀CbEnvironmentNameRcb🌀DeploymentDashBranchDashPolicies🌀CbBranchPolicyIdRcb();
                                                    }
                                                    $operation = new Operation\Repos\UpdateDeploymentBranchPolicy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies\CbBranchPolicyIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['environment_name'], $arguments['branch_policy_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\DeploymentBranchPolicy {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'pulls') {
                                    if ($pathChunks[5] == '{pull_number}') {
                                        if ($pathChunks[6] == 'reviews') {
                                            if ($pathChunks[7] == '{review_id}') {
                                                if ($call == 'PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('pull_number', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                    }
                                                    $arguments['pull_number'] = $params['pull_number'];
                                                    unset($params['pull_number']);
                                                    if (array_key_exists('review_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: review_id');
                                                    }
                                                    $arguments['review_id'] = $params['review_id'];
                                                    unset($params['review_id']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Reviews🌀CbReviewIdRcb();
                                                    }
                                                    $operation = new Operation\Pulls\UpdateReview($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number'], $arguments['review_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PullRequestReview {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 9) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'branches') {
                                    if ($pathChunks[5] == '{branch}') {
                                        if ($pathChunks[6] == 'protection') {
                                            if ($pathChunks[7] == 'required_status_checks') {
                                                if ($pathChunks[8] == 'contexts') {
                                                    if ($call == 'PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('branch', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                        }
                                                        $arguments['branch'] = $params['branch'];
                                                        unset($params['branch']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredStatusChecks🌀Contexts();
                                                        }
                                                        $operation = new Operation\Repos\SetStatusCheckContexts($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            } elseif ($pathChunks[7] == 'restrictions') {
                                                if ($pathChunks[8] == 'apps') {
                                                    if ($call == 'PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('branch', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                        }
                                                        $arguments['branch'] = $params['branch'];
                                                        unset($params['branch']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Apps();
                                                        }
                                                        $operation = new Operation\Repos\SetAppAccessRestrictions($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                } elseif ($pathChunks[8] == 'teams') {
                                                    if ($call == 'PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('branch', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                        }
                                                        $arguments['branch'] = $params['branch'];
                                                        unset($params['branch']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Teams();
                                                        }
                                                        $operation = new Operation\Repos\SetTeamAccessRestrictions($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                } elseif ($pathChunks[8] == 'users') {
                                                    if ($call == 'PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('branch', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: branch');
                                                        }
                                                        $arguments['branch'] = $params['branch'];
                                                        unset($params['branch']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Users();
                                                        }
                                                        $operation = new Operation\Repos\SetUserAccessRestrictions($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class], $arguments['owner'], $arguments['repo'], $arguments['branch']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'pulls') {
                                    if ($pathChunks[5] == '{pull_number}') {
                                        if ($pathChunks[6] == 'reviews') {
                                            if ($pathChunks[7] == '{review_id}') {
                                                if ($pathChunks[8] == 'dismissals') {
                                                    if ($call == 'PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals') {
                                                        $arguments = array();
                                                        if (array_key_exists('owner', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                        }
                                                        $arguments['owner'] = $params['owner'];
                                                        unset($params['owner']);
                                                        if (array_key_exists('repo', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                        }
                                                        $arguments['repo'] = $params['repo'];
                                                        unset($params['repo']);
                                                        if (array_key_exists('pull_number', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: pull_number');
                                                        }
                                                        $arguments['pull_number'] = $params['pull_number'];
                                                        unset($params['pull_number']);
                                                        if (array_key_exists('review_id', $params) === false) {
                                                            throw new \InvalidArgumentException('Missing mandatory field: review_id');
                                                        }
                                                        $arguments['review_id'] = $params['review_id'];
                                                        unset($params['review_id']);
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb\Dismissals::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb\Dismissals::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Reviews🌀CbReviewIdRcb🌀Dismissals();
                                                        }
                                                        $operation = new Operation\Pulls\DismissReview($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb\Dismissals::class], $arguments['owner'], $arguments['repo'], $arguments['pull_number'], $arguments['review_id']);
                                                        $request = $operation->createRequest($params);
                                                        return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\PullRequestReview {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 3) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'user') {
                        if ($pathChunks[2] == 'interaction-limits') {
                            if ($call == 'PUT /user/interaction-limits') {
                                $arguments = array();
                                if (\array_key_exists(Hydrator\Operation\User\InteractionLimits::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\InteractionLimits::class] = $this->hydrators->getObjectMapperOperation🌀User🌀InteractionLimits();
                                }
                                $operation = new Operation\Interactions\SetRestrictionsForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\InteractionLimits::class]);
                                $request = $operation->createRequest($params);
                                return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \ApiClients\Client\Github\Schema\InteractionLimitResponse {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    }
                }
            }
        } elseif ($method === 'STREAM') {
            if ($pathChunksCount === 6) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'orgs') {
                        if ($pathChunks[2] == '{org}') {
                            if ($pathChunks[3] == 'migrations') {
                                if ($pathChunks[4] == '{migration_id}') {
                                    if ($pathChunks[5] == 'archive') {
                                        if ($call == 'STREAM /orgs/{org}/migrations/{migration_id}/archive') {
                                            $arguments = array();
                                            if (array_key_exists('org', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: org');
                                            }
                                            $arguments['org'] = $params['org'];
                                            unset($params['org']);
                                            if (array_key_exists('migration_id', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: migration_id');
                                            }
                                            $arguments['migration_id'] = $params['migration_id'];
                                            unset($params['migration_id']);
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Archive::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Archive::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Migrations🌀CbMigrationIdRcb🌀Archive();
                                            }
                                            $operation = new Operation\Migrations\DownloadArchiveForOrgStreaming($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Archive::class], $this->browser, $arguments['org'], $arguments['migration_id']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : mixed {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'tarball') {
                                    if ($pathChunks[5] == '{ref}') {
                                        if ($call == 'STREAM /repos/{owner}/{repo}/tarball/{ref}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('ref', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: ref');
                                            }
                                            $arguments['ref'] = $params['ref'];
                                            unset($params['ref']);
                                            $operation = new Operation\Repos\DownloadTarballArchiveStreaming($this->browser, $arguments['owner'], $arguments['repo'], $arguments['ref']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif ($pathChunks[4] == 'zipball') {
                                    if ($pathChunks[5] == '{ref}') {
                                        if ($call == 'STREAM /repos/{owner}/{repo}/zipball/{ref}') {
                                            $arguments = array();
                                            if (array_key_exists('owner', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                            }
                                            $arguments['owner'] = $params['owner'];
                                            unset($params['owner']);
                                            if (array_key_exists('repo', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                            }
                                            $arguments['repo'] = $params['repo'];
                                            unset($params['repo']);
                                            if (array_key_exists('ref', $params) === false) {
                                                throw new \InvalidArgumentException('Missing mandatory field: ref');
                                            }
                                            $arguments['ref'] = $params['ref'];
                                            unset($params['ref']);
                                            $operation = new Operation\Repos\DownloadZipballArchiveStreaming($this->browser, $arguments['owner'], $arguments['repo'], $arguments['ref']);
                                            $request = $operation->createRequest($params);
                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 8) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'artifacts') {
                                        if ($pathChunks[6] == '{artifact_id}') {
                                            if ($pathChunks[7] == '{archive_format}') {
                                                if ($call == 'STREAM /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('artifact_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: artifact_id');
                                                    }
                                                    $arguments['artifact_id'] = $params['artifact_id'];
                                                    unset($params['artifact_id']);
                                                    if (array_key_exists('archive_format', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: archive_format');
                                                    }
                                                    $arguments['archive_format'] = $params['archive_format'];
                                                    unset($params['archive_format']);
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts\CbArtifactIdRcb\CbArchiveFormatRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts\CbArtifactIdRcb\CbArchiveFormatRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Artifacts🌀CbArtifactIdRcb🌀CbArchiveFormatRcb();
                                                    }
                                                    $operation = new Operation\Actions\DownloadArtifactStreaming($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts\CbArtifactIdRcb\CbArchiveFormatRcb::class], $this->browser, $arguments['owner'], $arguments['repo'], $arguments['artifact_id'], $arguments['archive_format']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'jobs') {
                                        if ($pathChunks[6] == '{job_id}') {
                                            if ($pathChunks[7] == 'logs') {
                                                if ($call == 'STREAM /repos/{owner}/{repo}/actions/jobs/{job_id}/logs') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('job_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: job_id');
                                                    }
                                                    $arguments['job_id'] = $params['job_id'];
                                                    unset($params['job_id']);
                                                    $operation = new Operation\Actions\DownloadJobLogsForWorkflowRunStreaming($this->browser, $arguments['owner'], $arguments['repo'], $arguments['job_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif ($pathChunks[5] == 'runs') {
                                        if ($pathChunks[6] == '{run_id}') {
                                            if ($pathChunks[7] == 'logs') {
                                                if ($call == 'STREAM /repos/{owner}/{repo}/actions/runs/{run_id}/logs') {
                                                    $arguments = array();
                                                    if (array_key_exists('owner', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                    }
                                                    $arguments['owner'] = $params['owner'];
                                                    unset($params['owner']);
                                                    if (array_key_exists('repo', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                    }
                                                    $arguments['repo'] = $params['repo'];
                                                    unset($params['repo']);
                                                    if (array_key_exists('run_id', $params) === false) {
                                                        throw new \InvalidArgumentException('Missing mandatory field: run_id');
                                                    }
                                                    $arguments['run_id'] = $params['run_id'];
                                                    unset($params['run_id']);
                                                    $operation = new Operation\Actions\DownloadWorkflowRunLogsStreaming($this->browser, $arguments['owner'], $arguments['repo'], $arguments['run_id']);
                                                    $request = $operation->createRequest($params);
                                                    return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } elseif ($pathChunksCount === 10) {
                if ($pathChunks[0] == '') {
                    if ($pathChunks[1] == 'repos') {
                        if ($pathChunks[2] == '{owner}') {
                            if ($pathChunks[3] == '{repo}') {
                                if ($pathChunks[4] == 'actions') {
                                    if ($pathChunks[5] == 'runs') {
                                        if ($pathChunks[6] == '{run_id}') {
                                            if ($pathChunks[7] == 'attempts') {
                                                if ($pathChunks[8] == '{attempt_number}') {
                                                    if ($pathChunks[9] == 'logs') {
                                                        if ($call == 'STREAM /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs') {
                                                            $arguments = array();
                                                            if (array_key_exists('owner', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: owner');
                                                            }
                                                            $arguments['owner'] = $params['owner'];
                                                            unset($params['owner']);
                                                            if (array_key_exists('repo', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: repo');
                                                            }
                                                            $arguments['repo'] = $params['repo'];
                                                            unset($params['repo']);
                                                            if (array_key_exists('run_id', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: run_id');
                                                            }
                                                            $arguments['run_id'] = $params['run_id'];
                                                            unset($params['run_id']);
                                                            if (array_key_exists('attempt_number', $params) === false) {
                                                                throw new \InvalidArgumentException('Missing mandatory field: attempt_number');
                                                            }
                                                            $arguments['attempt_number'] = $params['attempt_number'];
                                                            unset($params['attempt_number']);
                                                            $operation = new Operation\Actions\DownloadWorkflowRunAttemptLogsStreaming($this->browser, $arguments['owner'], $arguments['repo'], $arguments['run_id'], $arguments['attempt_number']);
                                                            $request = $operation->createRequest($params);
                                                            return $this->browser->request($request->getMethod(), (string) $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), (string) $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Rx\Observable {
                                                                return $operation->createResponse($response);
                                                            });
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        throw new \InvalidArgumentException();
    }
    public function webHooks() : \ApiClients\Contracts\OpenAPI\WebHooksInterface
    {
        return $this->webHooks;
    }
}
