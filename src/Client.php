<?php

declare(strict_types=1);

namespace ApiClients\Client\GitHub;

use ApiClients\Client\GitHub\Schema\ActionsBillingUsage;
use ApiClients\Client\GitHub\Schema\ActionsCacheList;
use ApiClients\Client\GitHub\Schema\ActionsCacheUsageByRepository;
use ApiClients\Client\GitHub\Schema\ActionsCacheUsageOrgEnterprise;
use ApiClients\Client\GitHub\Schema\ActionsGetDefaultWorkflowPermissions;
use ApiClients\Client\GitHub\Schema\ActionsOrganizationPermissions;
use ApiClients\Client\GitHub\Schema\ActionsPublicKey;
use ApiClients\Client\GitHub\Schema\ActionsRepositoryPermissions;
use ApiClients\Client\GitHub\Schema\ActionsSecret;
use ApiClients\Client\GitHub\Schema\ActionsVariable;
use ApiClients\Client\GitHub\Schema\ActionsWorkflowAccessToRepository;
use ApiClients\Client\GitHub\Schema\ApiOverview;
use ApiClients\Client\GitHub\Schema\Artifact;
use ApiClients\Client\GitHub\Schema\AuthenticationToken;
use ApiClients\Client\GitHub\Schema\Authorization;
use ApiClients\Client\GitHub\Schema\Autolink;
use ApiClients\Client\GitHub\Schema\BaseGist;
use ApiClients\Client\GitHub\Schema\BasicError;
use ApiClients\Client\GitHub\Schema\Blob;
use ApiClients\Client\GitHub\Schema\BranchProtection;
use ApiClients\Client\GitHub\Schema\BranchRestrictionPolicy;
use ApiClients\Client\GitHub\Schema\BranchWithProtection;
use ApiClients\Client\GitHub\Schema\CheckAutomatedSecurityFixes;
use ApiClients\Client\GitHub\Schema\CheckRun;
use ApiClients\Client\GitHub\Schema\CheckSuite;
use ApiClients\Client\GitHub\Schema\CheckSuitePreference;
use ApiClients\Client\GitHub\Schema\Classroom;
use ApiClients\Client\GitHub\Schema\ClassroomAssignment;
use ApiClients\Client\GitHub\Schema\CloneTraffic;
use ApiClients\Client\GitHub\Schema\CodeOfConduct;
use ApiClients\Client\GitHub\Schema\CodeownersErrors;
use ApiClients\Client\GitHub\Schema\CodeScanningAlert;
use ApiClients\Client\GitHub\Schema\CodeScanningAnalysis;
use ApiClients\Client\GitHub\Schema\CodeScanningAnalysisDeletion;
use ApiClients\Client\GitHub\Schema\CodeScanningCodeqlDatabase;
use ApiClients\Client\GitHub\Schema\CodeScanningDefaultSetup;
use ApiClients\Client\GitHub\Schema\CodeScanningDefaultSetupUpdateResponse;
use ApiClients\Client\GitHub\Schema\CodeScanningSarifsReceipt;
use ApiClients\Client\GitHub\Schema\CodeScanningSarifsStatus;
use ApiClients\Client\GitHub\Schema\Codespace;
use ApiClients\Client\GitHub\Schema\CodespaceExportDetails;
use ApiClients\Client\GitHub\Schema\CodespacesOrgSecret;
use ApiClients\Client\GitHub\Schema\CodespacesPublicKey;
use ApiClients\Client\GitHub\Schema\CodespacesSecret;
use ApiClients\Client\GitHub\Schema\CodespacesUserPublicKey;
use ApiClients\Client\GitHub\Schema\CodespaceWithFullRepository;
use ApiClients\Client\GitHub\Schema\CombinedBillingUsage;
use ApiClients\Client\GitHub\Schema\CombinedCommitStatus;
use ApiClients\Client\GitHub\Schema\Commit;
use ApiClients\Client\GitHub\Schema\CommitComment;
use ApiClients\Client\GitHub\Schema\CommitComparison;
use ApiClients\Client\GitHub\Schema\CommunityProfile;
use ApiClients\Client\GitHub\Schema\ContentDirectory;
use ApiClients\Client\GitHub\Schema\ContentFile;
use ApiClients\Client\GitHub\Schema\ContentSubmodule;
use ApiClients\Client\GitHub\Schema\ContentSymlink;
use ApiClients\Client\GitHub\Schema\CopilotOrganizationDetails;
use ApiClients\Client\GitHub\Schema\CopilotSeatDetails;
use ApiClients\Client\GitHub\Schema\DependabotAlert;
use ApiClients\Client\GitHub\Schema\DependabotPublicKey;
use ApiClients\Client\GitHub\Schema\DependabotSecret;
use ApiClients\Client\GitHub\Schema\DependencyGraphSpdxSbom;
use ApiClients\Client\GitHub\Schema\DeployKey;
use ApiClients\Client\GitHub\Schema\Deployment;
use ApiClients\Client\GitHub\Schema\DeploymentBranchPolicy;
use ApiClients\Client\GitHub\Schema\DeploymentProtectionRule;
use ApiClients\Client\GitHub\Schema\DeploymentStatus;
use ApiClients\Client\GitHub\Schema\EmptyObject;
use ApiClients\Client\GitHub\Schema\Environment;
use ApiClients\Client\GitHub\Schema\Feed;
use ApiClients\Client\GitHub\Schema\FileCommit;
use ApiClients\Client\GitHub\Schema\FullRepository;
use ApiClients\Client\GitHub\Schema\GistComment;
use ApiClients\Client\GitHub\Schema\GistSimple;
use ApiClients\Client\GitHub\Schema\GitCommit;
use ApiClients\Client\GitHub\Schema\GitignoreTemplate;
use ApiClients\Client\GitHub\Schema\GitRef;
use ApiClients\Client\GitHub\Schema\GitTag;
use ApiClients\Client\GitHub\Schema\GitTree;
use ApiClients\Client\GitHub\Schema\GlobalAdvisory;
use ApiClients\Client\GitHub\Schema\GpgKey;
use ApiClients\Client\GitHub\Schema\Hook;
use ApiClients\Client\GitHub\Schema\HookDelivery;
use ApiClients\Client\GitHub\Schema\Hovercard;
use ApiClients\Client\GitHub\Schema\Import;
use ApiClients\Client\GitHub\Schema\Installation;
use ApiClients\Client\GitHub\Schema\InstallationToken;
use ApiClients\Client\GitHub\Schema\Integration;
use ApiClients\Client\GitHub\Schema\InteractionLimitResponse;
use ApiClients\Client\GitHub\Schema\Issue;
use ApiClients\Client\GitHub\Schema\IssueComment;
use ApiClients\Client\GitHub\Schema\IssueEvent;
use ApiClients\Client\GitHub\Schema\Job;
use ApiClients\Client\GitHub\Schema\Key;
use ApiClients\Client\GitHub\Schema\Label;
use ApiClients\Client\GitHub\Schema\Language;
use ApiClients\Client\GitHub\Schema\License;
use ApiClients\Client\GitHub\Schema\LicenseContent;
use ApiClients\Client\GitHub\Schema\MarketplacePurchase;
use ApiClients\Client\GitHub\Schema\MergedUpstream;
use ApiClients\Client\GitHub\Schema\Migration;
use ApiClients\Client\GitHub\Schema\Milestone;
use ApiClients\Client\GitHub\Schema\MinimalRepository;
use ApiClients\Client\GitHub\Schema\OidcCustomSub;
use ApiClients\Client\GitHub\Schema\OidcCustomSubRepo;
use ApiClients\Client\GitHub\Schema\Operations\Actions\GenerateRunnerJitconfigForOrg\Response\ApplicationJson\Created;
use ApiClients\Client\GitHub\Schema\Operations\Activity\MarkNotificationsAsRead\Response\ApplicationJson\Accepted;
use ApiClients\Client\GitHub\Schema\Operations\Apps\ListReposAccessibleToInstallation\Response\ApplicationJson\Ok;
use ApiClients\Client\GitHub\Schema\Operations\Apps\RedeliverWebhookDelivery\Response\ApplicationJson\Accepted\Application\Json;
use ApiClients\Client\GitHub\Schema\Operations\Interactions\GetRestrictionsForOrg\Response\ApplicationJson\Ok\Application\Json\One;
use ApiClients\Client\GitHub\Schema\OrganizationActionsSecret;
use ApiClients\Client\GitHub\Schema\OrganizationActionsVariable;
use ApiClients\Client\GitHub\Schema\OrganizationDependabotSecret;
use ApiClients\Client\GitHub\Schema\OrganizationFull;
use ApiClients\Client\GitHub\Schema\OrganizationInvitation;
use ApiClients\Client\GitHub\Schema\OrgHook;
use ApiClients\Client\GitHub\Schema\OrgMembership;
use ApiClients\Client\GitHub\Schema\Package;
use ApiClients\Client\GitHub\Schema\PackagesBillingUsage;
use ApiClients\Client\GitHub\Schema\PackageVersion;
use ApiClients\Client\GitHub\Schema\Page;
use ApiClients\Client\GitHub\Schema\PageBuild;
use ApiClients\Client\GitHub\Schema\PageBuildStatus;
use ApiClients\Client\GitHub\Schema\PageDeployment;
use ApiClients\Client\GitHub\Schema\PagesHealthCheck;
use ApiClients\Client\GitHub\Schema\ParticipationStats;
use ApiClients\Client\GitHub\Schema\PorterAuthor;
use ApiClients\Client\GitHub\Schema\PrivateUser;
use ApiClients\Client\GitHub\Schema\Project;
use ApiClients\Client\GitHub\Schema\ProjectCard;
use ApiClients\Client\GitHub\Schema\ProjectCollaboratorPermission;
use ApiClients\Client\GitHub\Schema\ProjectColumn;
use ApiClients\Client\GitHub\Schema\ProtectedBranch;
use ApiClients\Client\GitHub\Schema\ProtectedBranchAdminEnforced;
use ApiClients\Client\GitHub\Schema\ProtectedBranchPullRequestReview;
use ApiClients\Client\GitHub\Schema\PublicUser;
use ApiClients\Client\GitHub\Schema\PullRequest;
use ApiClients\Client\GitHub\Schema\PullRequestMergeResult;
use ApiClients\Client\GitHub\Schema\PullRequestReview;
use ApiClients\Client\GitHub\Schema\PullRequestReviewComment;
use ApiClients\Client\GitHub\Schema\PullRequestReviewRequest;
use ApiClients\Client\GitHub\Schema\PullRequestSimple;
use ApiClients\Client\GitHub\Schema\RateLimitOverview;
use ApiClients\Client\GitHub\Schema\Reaction;
use ApiClients\Client\GitHub\Schema\Release;
use ApiClients\Client\GitHub\Schema\ReleaseAsset;
use ApiClients\Client\GitHub\Schema\ReleaseNotesContent;
use ApiClients\Client\GitHub\Schema\RepoCodespacesSecret;
use ApiClients\Client\GitHub\Schema\Repository;
use ApiClients\Client\GitHub\Schema\RepositoryAdvisory;
use ApiClients\Client\GitHub\Schema\RepositoryCollaboratorPermission;
use ApiClients\Client\GitHub\Schema\RepositoryInvitation;
use ApiClients\Client\GitHub\Schema\RepositoryRuleset;
use ApiClients\Client\GitHub\Schema\RepositorySubscription;
use ApiClients\Client\GitHub\Schema\Root;
use ApiClients\Client\GitHub\Schema\Runner;
use ApiClients\Client\GitHub\Schema\SecretScanningAlert;
use ApiClients\Client\GitHub\Schema\SelectedActions;
use ApiClients\Client\GitHub\Schema\ShortBlob;
use ApiClients\Client\GitHub\Schema\SimpleUser;
use ApiClients\Client\GitHub\Schema\SshSigningKey;
use ApiClients\Client\GitHub\Schema\Stargazer;
use ApiClients\Client\GitHub\Schema\StarredRepository;
use ApiClients\Client\GitHub\Schema\Status;
use ApiClients\Client\GitHub\Schema\StatusCheckPolicy;
use ApiClients\Client\GitHub\Schema\TagProtection;
use ApiClients\Client\GitHub\Schema\TeamDiscussion;
use ApiClients\Client\GitHub\Schema\TeamDiscussionComment;
use ApiClients\Client\GitHub\Schema\TeamFull;
use ApiClients\Client\GitHub\Schema\TeamMembership;
use ApiClients\Client\GitHub\Schema\TeamProject;
use ApiClients\Client\GitHub\Schema\TeamRepository;
use ApiClients\Client\GitHub\Schema\Thread;
use ApiClients\Client\GitHub\Schema\ThreadSubscription;
use ApiClients\Client\GitHub\Schema\Topic;
use ApiClients\Client\GitHub\Schema\ViewTraffic;
use ApiClients\Client\GitHub\Schema\WebhookConfig;
use ApiClients\Client\GitHub\Schema\Workflow;
use ApiClients\Client\GitHub\Schema\WorkflowRun;
use ApiClients\Client\GitHub\Schema\WorkflowRunUsage;
use ApiClients\Client\GitHub\Schema\WorkflowUsage;
use ApiClients\Contracts\HTTP\Headers\AuthenticationInterface;
use ApiClients\Contracts\OpenAPI\WebHooksInterface;
use InvalidArgumentException;
use League\OpenAPIValidation\Schema\SchemaValidator;
use Psr\Http\Message\ResponseInterface;
use React\Http\Browser;

use function array_key_exists;
use function count;
use function explode;

final class Client implements ClientInterface
{
    private array $router = [];
    private readonly OperationsInterface $operations;
    private readonly WebHooks $webHooks;
    private readonly Internal\Routers $routers;

    public function __construct(AuthenticationInterface $authentication, Browser $browser)
    {
        $browser                 = $browser->withBase('https://api.github.com')->withFollowRedirects(false);
        $requestSchemaValidator  = new SchemaValidator(SchemaValidator::VALIDATE_AS_REQUEST);
        $responseSchemaValidator = new SchemaValidator(SchemaValidator::VALIDATE_AS_RESPONSE);
        $hydrators               = new Internal\Hydrators();
        $this->operations        = new Operations(new Internal\Operators(browser: $browser, authentication: $authentication, requestSchemaValidator: $requestSchemaValidator, responseSchemaValidator: $responseSchemaValidator, hydrators: $hydrators));
        $this->webHooks          = new WebHooks(requestSchemaValidator: $requestSchemaValidator, hydrator: $hydrators);
        $this->routers           = new Internal\Routers(browser: $browser, authentication: $authentication, requestSchemaValidator: $requestSchemaValidator, responseSchemaValidator: $responseSchemaValidator, hydrators: $hydrators);
    }

    // phpcs:disable
    /**
     * @return ($call is Operation\Meta\Root::OPERATION_MATCH ?  : ($call is Operation\SecurityAdvisories\ListGlobalAdvisories::OPERATION_MATCH ? Observable<Schema\GlobalAdvisory> : ($call is Operation\SecurityAdvisories\GetGlobalAdvisory::OPERATION_MATCH ?  : ($call is Operation\Apps\GetAuthenticated::OPERATION_MATCH ?  : ($call is Operation\Apps\CreateFromManifest::OPERATION_MATCH ?  : ($call is Operation\Apps\GetWebhookConfigForApp::OPERATION_MATCH ?  : ($call is Operation\Apps\UpdateWebhookConfigForApp::OPERATION_MATCH ?  : ($call is Operation\Apps\ListWebhookDeliveries::OPERATION_MATCH ? Observable<Schema\HookDeliveryItem> : ($call is Operation\Apps\GetWebhookDelivery::OPERATION_MATCH ?  : ($call is Operation\Apps\RedeliverWebhookDelivery::OPERATION_MATCH ?  : ($call is Operation\Apps\ListInstallationRequestsForAuthenticatedApp::OPERATION_MATCH ? Observable<Schema\IntegrationInstallationRequest>|array{code:int} : ($call is Operation\Apps\ListInstallationRequestsForAuthenticatedAppListing::OPERATION_MATCH ? Observable<Schema\IntegrationInstallationRequest>|array{code:int} : ($call is Operation\Apps\ListInstallations::OPERATION_MATCH ? Observable<Schema\Installation> : ($call is Operation\Apps\ListInstallationsListing::OPERATION_MATCH ? Observable<Schema\Installation> : ($call is Operation\Apps\GetInstallation::OPERATION_MATCH ?  : ($call is Operation\Apps\DeleteInstallation::OPERATION_MATCH ? array{code:int} : ($call is Operation\Apps\CreateInstallationAccessToken::OPERATION_MATCH ?  : ($call is Operation\Apps\SuspendInstallation::OPERATION_MATCH ? array{code:int} : ($call is Operation\Apps\UnsuspendInstallation::OPERATION_MATCH ? array{code:int} : ($call is Operation\Apps\DeleteAuthorization::OPERATION_MATCH ? array{code:int} : ($call is Operation\Apps\CheckToken::OPERATION_MATCH ?  : ($call is Operation\Apps\DeleteToken::OPERATION_MATCH ? array{code:int} : ($call is Operation\Apps\ResetToken::OPERATION_MATCH ?  : ($call is Operation\Apps\ScopeToken::OPERATION_MATCH ?  : ($call is Operation\Apps\GetBySlug::OPERATION_MATCH ?  : ($call is Operation\Classroom\GetAnAssignment::OPERATION_MATCH ?  : ($call is Operation\Classroom\ListAcceptedAssigmentsForAnAssignment::OPERATION_MATCH ? Observable<Schema\ClassroomAcceptedAssignment> : ($call is Operation\Classroom\ListAcceptedAssigmentsForAnAssignmentListing::OPERATION_MATCH ? Observable<Schema\ClassroomAcceptedAssignment> : ($call is Operation\Classroom\GetAssignmentGrades::OPERATION_MATCH ? Observable<Schema\ClassroomAssignmentGrade> : ($call is Operation\Classroom\ListClassrooms::OPERATION_MATCH ? Observable<Schema\SimpleClassroom> : ($call is Operation\Classroom\ListClassroomsListing::OPERATION_MATCH ? Observable<Schema\SimpleClassroom> : ($call is Operation\Classroom\GetAClassroom::OPERATION_MATCH ?  : ($call is Operation\Classroom\ListAssignmentsForAClassroom::OPERATION_MATCH ? Observable<Schema\SimpleClassroomAssignment> : ($call is Operation\Classroom\ListAssignmentsForAClassroomListing::OPERATION_MATCH ? Observable<Schema\SimpleClassroomAssignment> : ($call is Operation\CodesOfConduct\GetAllCodesOfConduct::OPERATION_MATCH ? Observable<Schema\CodeOfConduct>|array{code:int} : ($call is Operation\CodesOfConduct\GetConductCode::OPERATION_MATCH ? Schema\CodeOfConduct|array{code:int} : ($call is Operation\Emojis\Get::OPERATION_MATCH ? Schema\Operations\Emojis\Get\Response\ApplicationJson\Ok\Application\Json|array{code:int} : ($call is Operation\Dependabot\ListAlertsForEnterprise::OPERATION_MATCH ? Observable<Schema\DependabotAlertWithRepository>|array{code:int} : ($call is Operation\SecretScanning\ListAlertsForEnterprise::OPERATION_MATCH ? Observable<Schema\OrganizationSecretScanningAlert> : ($call is Operation\Activity\ListPublicEvents::OPERATION_MATCH ? Observable<Schema\Event>|array{code:int} : ($call is Operation\Activity\ListPublicEventsListing::OPERATION_MATCH ? Observable<Schema\Event>|array{code:int} : ($call is Operation\Activity\GetFeeds::OPERATION_MATCH ?  : ($call is Operation\Gists\List_::OPERATION_MATCH ? Observable<Schema\BaseGist>|array{code:int} : ($call is Operation\Gists\ListListing::OPERATION_MATCH ? Observable<Schema\BaseGist>|array{code:int} : ($call is Operation\Gists\Create::OPERATION_MATCH ? Schema\GistSimple|array{code:int} : ($call is Operation\Gists\ListPublic::OPERATION_MATCH ? Observable<Schema\BaseGist>|array{code:int} : ($call is Operation\Gists\ListPublicListing::OPERATION_MATCH ? Observable<Schema\BaseGist>|array{code:int} : ($call is Operation\Gists\ListStarred::OPERATION_MATCH ? Observable<Schema\BaseGist>|array{code:int} : ($call is Operation\Gists\ListStarredListing::OPERATION_MATCH ? Observable<Schema\BaseGist>|array{code:int} : ($call is Operation\Gists\Get::OPERATION_MATCH ? Schema\GistSimple|array{code:int} : ($call is Operation\Gists\Delete::OPERATION_MATCH ? array{code:int} : ($call is Operation\Gists\Update::OPERATION_MATCH ?  : ($call is Operation\Gists\ListComments::OPERATION_MATCH ? Observable<Schema\GistComment>|array{code:int} : ($call is Operation\Gists\ListCommentsListing::OPERATION_MATCH ? Observable<Schema\GistComment>|array{code:int} : ($call is Operation\Gists\CreateComment::OPERATION_MATCH ? Schema\GistComment|array{code:int} : ($call is Operation\Gists\GetComment::OPERATION_MATCH ? Schema\GistComment|array{code:int} : ($call is Operation\Gists\DeleteComment::OPERATION_MATCH ? array{code:int} : ($call is Operation\Gists\UpdateComment::OPERATION_MATCH ?  : ($call is Operation\Gists\ListCommits::OPERATION_MATCH ? Observable<Schema\GistCommit>|array{code:int} : ($call is Operation\Gists\ListCommitsListing::OPERATION_MATCH ? Observable<Schema\GistCommit>|array{code:int} : ($call is Operation\Gists\ListForks::OPERATION_MATCH ? Observable<Schema\GistSimple>|array{code:int} : ($call is Operation\Gists\ListForksListing::OPERATION_MATCH ? Observable<Schema\GistSimple>|array{code:int} : ($call is Operation\Gists\Fork::OPERATION_MATCH ? Schema\BaseGist|array{code:int} : ($call is Operation\Gists\CheckIsStarred::OPERATION_MATCH ? array{code:int} : ($call is Operation\Gists\Star::OPERATION_MATCH ? array{code:int} : ($call is Operation\Gists\Unstar::OPERATION_MATCH ? array{code:int} : ($call is Operation\Gists\GetRevision::OPERATION_MATCH ?  : ($call is Operation\Gitignore\GetAllTemplates::OPERATION_MATCH ? Observable<string>|array{code:int} : ($call is Operation\Gitignore\GetTemplate::OPERATION_MATCH ? Schema\GitignoreTemplate|array{code:int} : ($call is Operation\Apps\ListReposAccessibleToInstallation::OPERATION_MATCH ? Schema\Operations\Apps\ListReposAccessibleToInstallation\Response\ApplicationJson\Ok|array{code:int} : ($call is Operation\Apps\RevokeInstallationAccessToken::OPERATION_MATCH ? array{code:int} : ($call is Operation\Issues\List_::OPERATION_MATCH ? Observable<Schema\Issue>|array{code:int} : ($call is Operation\Issues\ListListing::OPERATION_MATCH ? Observable<Schema\Issue>|array{code:int} : ($call is Operation\Licenses\GetAllCommonlyUsed::OPERATION_MATCH ? Observable<Schema\LicenseSimple>|array{code:int} : ($call is Operation\Licenses\GetAllCommonlyUsedListing::OPERATION_MATCH ? Observable<Schema\LicenseSimple>|array{code:int} : ($call is Operation\Licenses\Get::OPERATION_MATCH ? Schema\License|array{code:int} : ($call is Operation\Markdown\Render::OPERATION_MATCH ? string|array{code:int} : ($call is Operation\Markdown\RenderRaw::OPERATION_MATCH ? string|array{code:int} : ($call is Operation\Apps\GetSubscriptionPlanForAccount::OPERATION_MATCH ?  : ($call is Operation\Apps\ListPlans::OPERATION_MATCH ? Observable<Schema\MarketplaceListingPlan> : ($call is Operation\Apps\ListPlansListing::OPERATION_MATCH ? Observable<Schema\MarketplaceListingPlan> : ($call is Operation\Apps\ListAccountsForPlan::OPERATION_MATCH ? Observable<Schema\MarketplacePurchase> : ($call is Operation\Apps\ListAccountsForPlanListing::OPERATION_MATCH ? Observable<Schema\MarketplacePurchase> : ($call is Operation\Apps\GetSubscriptionPlanForAccountStubbed::OPERATION_MATCH ? Schema\MarketplacePurchase|array{code:int} : ($call is Operation\Apps\ListPlansStubbed::OPERATION_MATCH ? Observable<Schema\MarketplaceListingPlan> : ($call is Operation\Apps\ListPlansStubbedListing::OPERATION_MATCH ? Observable<Schema\MarketplaceListingPlan> : ($call is Operation\Apps\ListAccountsForPlanStubbed::OPERATION_MATCH ? Observable<Schema\MarketplacePurchase> : ($call is Operation\Apps\ListAccountsForPlanStubbedListing::OPERATION_MATCH ? Observable<Schema\MarketplacePurchase> : ($call is Operation\Meta\Get::OPERATION_MATCH ? Schema\ApiOverview|array{code:int} : ($call is Operation\Activity\ListPublicEventsForRepoNetwork::OPERATION_MATCH ? Observable<Schema\Event>|Schema\BasicError|array{code:int} : ($call is Operation\Activity\ListPublicEventsForRepoNetworkListing::OPERATION_MATCH ? Observable<Schema\Event>|Schema\BasicError|array{code:int} : ($call is Operation\Activity\ListNotificationsForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\Thread>|array{code:int} : ($call is Operation\Activity\ListNotificationsForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\Thread>|array{code:int} : ($call is Operation\Activity\MarkNotificationsAsRead::OPERATION_MATCH ? Schema\Operations\Activity\MarkNotificationsAsRead\Response\ApplicationJson\Accepted|array{code:int} : ($call is Operation\Activity\GetThread::OPERATION_MATCH ? Schema\Thread|array{code:int} : ($call is Operation\Activity\MarkThreadAsRead::OPERATION_MATCH ? array{code:int} : ($call is Operation\Activity\GetThreadSubscriptionForAuthenticatedUser::OPERATION_MATCH ? Schema\ThreadSubscription|array{code:int} : ($call is Operation\Activity\SetThreadSubscription::OPERATION_MATCH ? Schema\ThreadSubscription|array{code:int} : ($call is Operation\Activity\DeleteThreadSubscription::OPERATION_MATCH ? array{code:int} : ($call is Operation\Meta\GetOctocat::OPERATION_MATCH ?  : ($call is Operation\Orgs\List_::OPERATION_MATCH ? Observable<Schema\OrganizationSimple>|array{code:int} : ($call is Operation\Orgs\Get::OPERATION_MATCH ?  : ($call is Operation\Orgs\Delete::OPERATION_MATCH ?  : ($call is Operation\Orgs\Update::OPERATION_MATCH ?  : ($call is Operation\Actions\GetActionsCacheUsageForOrg::OPERATION_MATCH ?  : ($call is Operation\Actions\GetActionsCacheUsageByRepoForOrg::OPERATION_MATCH ?  : ($call is Operation\Oidc\GetOidcCustomSubTemplateForOrg::OPERATION_MATCH ?  : ($call is Operation\Oidc\UpdateOidcCustomSubTemplateForOrg::OPERATION_MATCH ?  : ($call is Operation\Actions\GetGithubActionsPermissionsOrganization::OPERATION_MATCH ?  : ($call is Operation\Actions\SetGithubActionsPermissionsOrganization::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization::OPERATION_MATCH ?  : ($call is Operation\Actions\SetSelectedRepositoriesEnabledGithubActionsOrganization::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\EnableSelectedRepositoryGithubActionsOrganization::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\DisableSelectedRepositoryGithubActionsOrganization::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\GetAllowedActionsOrganization::OPERATION_MATCH ?  : ($call is Operation\Actions\SetAllowedActionsOrganization::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\GetGithubActionsDefaultWorkflowPermissionsOrganization::OPERATION_MATCH ?  : ($call is Operation\Actions\SetGithubActionsDefaultWorkflowPermissionsOrganization::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\ListSelfHostedRunnersForOrg::OPERATION_MATCH ?  : ($call is Operation\Actions\ListRunnerApplicationsForOrg::OPERATION_MATCH ? Observable<Schema\RunnerApplication> : ($call is Operation\Actions\GenerateRunnerJitconfigForOrg::OPERATION_MATCH ?  : ($call is Operation\Actions\CreateRegistrationTokenForOrg::OPERATION_MATCH ?  : ($call is Operation\Actions\CreateRemoveTokenForOrg::OPERATION_MATCH ?  : ($call is Operation\Actions\GetSelfHostedRunnerForOrg::OPERATION_MATCH ?  : ($call is Operation\Actions\DeleteSelfHostedRunnerFromOrg::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\ListLabelsForSelfHostedRunnerForOrg::OPERATION_MATCH ?  : ($call is Operation\Actions\SetCustomLabelsForSelfHostedRunnerForOrg::OPERATION_MATCH ?  : ($call is Operation\Actions\AddCustomLabelsToSelfHostedRunnerForOrg::OPERATION_MATCH ?  : ($call is Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForOrg::OPERATION_MATCH ?  : ($call is Operation\Actions\RemoveCustomLabelFromSelfHostedRunnerForOrg::OPERATION_MATCH ?  : ($call is Operation\Actions\ListOrgSecrets::OPERATION_MATCH ?  : ($call is Operation\Actions\GetOrgPublicKey::OPERATION_MATCH ?  : ($call is Operation\Actions\GetOrgSecret::OPERATION_MATCH ?  : ($call is Operation\Actions\CreateOrUpdateOrgSecret::OPERATION_MATCH ? Schema\EmptyObject|array{code:int} : ($call is Operation\Actions\DeleteOrgSecret::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\ListSelectedReposForOrgSecret::OPERATION_MATCH ?  : ($call is Operation\Actions\SetSelectedReposForOrgSecret::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\AddSelectedRepoToOrgSecret::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\RemoveSelectedRepoFromOrgSecret::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\ListOrgVariables::OPERATION_MATCH ?  : ($call is Operation\Actions\CreateOrgVariable::OPERATION_MATCH ?  : ($call is Operation\Actions\GetOrgVariable::OPERATION_MATCH ?  : ($call is Operation\Actions\DeleteOrgVariable::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\UpdateOrgVariable::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\ListSelectedReposForOrgVariable::OPERATION_MATCH ? Schema\Operations\Actions\ListSelectedReposForOrgVariable\Response\ApplicationJson\Ok\Application\Json|array{code:int} : ($call is Operation\Actions\SetSelectedReposForOrgVariable::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\AddSelectedRepoToOrgVariable::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\RemoveSelectedRepoFromOrgVariable::OPERATION_MATCH ? array{code:int} : ($call is Operation\Orgs\ListBlockedUsers::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Orgs\ListBlockedUsersListing::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Orgs\CheckBlockedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Orgs\BlockUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Orgs\UnblockUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\CodeScanning\ListAlertsForOrg::OPERATION_MATCH ? Observable<Schema\CodeScanningOrganizationAlertItems> : ($call is Operation\CodeScanning\ListAlertsForOrgListing::OPERATION_MATCH ? Observable<Schema\CodeScanningOrganizationAlertItems> : ($call is Operation\Codespaces\ListInOrganization::OPERATION_MATCH ? Schema\Operations\Codespaces\ListInOrganization\Response\ApplicationJson\Ok|array{code:int} : ($call is Operation\Codespaces\SetCodespacesAccess::OPERATION_MATCH ? array{code:int} : ($call is Operation\Codespaces\SetCodespacesAccessUsers::OPERATION_MATCH ? array{code:int} : ($call is Operation\Codespaces\DeleteCodespacesAccessUsers::OPERATION_MATCH ? array{code:int} : ($call is Operation\Codespaces\ListOrgSecrets::OPERATION_MATCH ?  : ($call is Operation\Codespaces\GetOrgPublicKey::OPERATION_MATCH ?  : ($call is Operation\Codespaces\GetOrgSecret::OPERATION_MATCH ?  : ($call is Operation\Codespaces\CreateOrUpdateOrgSecret::OPERATION_MATCH ? Schema\EmptyObject|array{code:int} : ($call is Operation\Codespaces\DeleteOrgSecret::OPERATION_MATCH ? array{code:int} : ($call is Operation\Codespaces\ListSelectedReposForOrgSecret::OPERATION_MATCH ?  : ($call is Operation\Codespaces\SetSelectedReposForOrgSecret::OPERATION_MATCH ? array{code:int} : ($call is Operation\Codespaces\AddSelectedRepoToOrgSecret::OPERATION_MATCH ? array{code:int} : ($call is Operation\Codespaces\RemoveSelectedRepoFromOrgSecret::OPERATION_MATCH ? array{code:int} : ($call is Operation\Copilot\GetCopilotOrganizationDetails::OPERATION_MATCH ?  : ($call is Operation\Copilot\ListCopilotSeats::OPERATION_MATCH ?  : ($call is Operation\Copilot\AddCopilotForBusinessSeatsForTeams::OPERATION_MATCH ? Schema\Operations\Copilot\AddCopilotForBusinessSeatsForTeams\Response\ApplicationJson\Created|array{code:int} : ($call is Operation\Copilot\CancelCopilotSeatAssignmentForTeams::OPERATION_MATCH ? Schema\Operations\Copilot\CancelCopilotSeatAssignmentForTeams\Response\ApplicationJson\Ok|array{code:int} : ($call is Operation\Copilot\AddCopilotForBusinessSeatsForUsers::OPERATION_MATCH ? Schema\Operations\Copilot\AddCopilotForBusinessSeatsForUsers\Response\ApplicationJson\Created\Application\Json|array{code:int} : ($call is Operation\Copilot\CancelCopilotSeatAssignmentForUsers::OPERATION_MATCH ? Schema\Operations\Copilot\CancelCopilotSeatAssignmentForUsers\Response\ApplicationJson\Ok\Application\Json|array{code:int} : ($call is Operation\Dependabot\ListAlertsForOrg::OPERATION_MATCH ? Observable<Schema\DependabotAlertWithRepository>|array{code:int} : ($call is Operation\Dependabot\ListOrgSecrets::OPERATION_MATCH ?  : ($call is Operation\Dependabot\GetOrgPublicKey::OPERATION_MATCH ?  : ($call is Operation\Dependabot\GetOrgSecret::OPERATION_MATCH ?  : ($call is Operation\Dependabot\CreateOrUpdateOrgSecret::OPERATION_MATCH ? Schema\EmptyObject|array{code:int} : ($call is Operation\Dependabot\DeleteOrgSecret::OPERATION_MATCH ? array{code:int} : ($call is Operation\Dependabot\ListSelectedReposForOrgSecret::OPERATION_MATCH ?  : ($call is Operation\Dependabot\SetSelectedReposForOrgSecret::OPERATION_MATCH ? array{code:int} : ($call is Operation\Dependabot\AddSelectedRepoToOrgSecret::OPERATION_MATCH ? array{code:int} : ($call is Operation\Dependabot\RemoveSelectedRepoFromOrgSecret::OPERATION_MATCH ? array{code:int} : ($call is Operation\Packages\ListDockerMigrationConflictingPackagesForOrganization::OPERATION_MATCH ? Observable<Schema\Package> : ($call is Operation\Activity\ListPublicOrgEvents::OPERATION_MATCH ? Observable<Schema\Event> : ($call is Operation\Activity\ListPublicOrgEventsListing::OPERATION_MATCH ? Observable<Schema\Event> : ($call is Operation\Orgs\ListFailedInvitations::OPERATION_MATCH ? Observable<Schema\OrganizationInvitation> : ($call is Operation\Orgs\ListFailedInvitationsListing::OPERATION_MATCH ? Observable<Schema\OrganizationInvitation> : ($call is Operation\Orgs\ListWebhooks::OPERATION_MATCH ? Observable<Schema\OrgHook> : ($call is Operation\Orgs\ListWebhooksListing::OPERATION_MATCH ? Observable<Schema\OrgHook> : ($call is Operation\Orgs\CreateWebhook::OPERATION_MATCH ?  : ($call is Operation\Orgs\GetWebhook::OPERATION_MATCH ? Schema\OrgHook : ($call is Operation\Orgs\DeleteWebhook::OPERATION_MATCH ? array{code:int} : ($call is Operation\Orgs\UpdateWebhook::OPERATION_MATCH ? Schema\OrgHook : ($call is Operation\Orgs\GetWebhookConfigForOrg::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Operation\Orgs\UpdateWebhookConfigForOrg::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Operation\Orgs\ListWebhookDeliveries::OPERATION_MATCH ? iterable<Schema\HookDeliveryItem> : ($call is Operation\Orgs\GetWebhookDelivery::OPERATION_MATCH ? Schema\HookDelivery : ($call is Operation\Orgs\RedeliverWebhookDelivery::OPERATION_MATCH ? Schema\Operations\Orgs\RedeliverWebhookDelivery\Response\ApplicationJson\Accepted\Application\Json : ($call is Operation\Orgs\PingWebhook::OPERATION_MATCH ? array{code:int} : ($call is Operation\Apps\GetOrgInstallation::OPERATION_MATCH ?  : ($call is Operation\Orgs\ListAppInstallations::OPERATION_MATCH ?  : ($call is Operation\Interactions\GetRestrictionsForOrg::OPERATION_MATCH ?  : ($call is Operation\Interactions\SetRestrictionsForOrg::OPERATION_MATCH ?  : ($call is Operation\Interactions\RemoveRestrictionsForOrg::OPERATION_MATCH ? array{code:int} : ($call is Operation\Orgs\ListPendingInvitations::OPERATION_MATCH ? Observable<Schema\OrganizationInvitation> : ($call is Operation\Orgs\ListPendingInvitationsListing::OPERATION_MATCH ? Observable<Schema\OrganizationInvitation> : ($call is Operation\Orgs\CreateInvitation::OPERATION_MATCH ?  : ($call is Operation\Orgs\CancelInvitation::OPERATION_MATCH ? array{code:int} : ($call is Operation\Orgs\ListInvitationTeams::OPERATION_MATCH ? Observable<Schema\Team> : ($call is Operation\Orgs\ListInvitationTeamsListing::OPERATION_MATCH ? Observable<Schema\Team> : ($call is Operation\Issues\ListForOrg::OPERATION_MATCH ? Observable<Schema\Issue> : ($call is Operation\Issues\ListForOrgListing::OPERATION_MATCH ? Observable<Schema\Issue> : ($call is Operation\Orgs\ListMembers::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Orgs\ListMembersListing::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Orgs\CheckMembershipForUser::OPERATION_MATCH ? array{code:int}|array{code:int,location:string} : ($call is Operation\Orgs\RemoveMember::OPERATION_MATCH ? array{code:int} : ($call is Operation\Codespaces\GetCodespacesForUserInOrg::OPERATION_MATCH ? Schema\Operations\Codespaces\GetCodespacesForUserInOrg\Response\ApplicationJson\Ok\Application\Json|array{code:int} : ($call is Operation\Codespaces\DeleteFromOrganization::OPERATION_MATCH ? Schema\Operations\Codespaces\DeleteFromOrganization\Response\ApplicationJson\Accepted\Application\Json|array{code:int} : ($call is Operation\Codespaces\StopInOrganization::OPERATION_MATCH ? Schema\Codespace|array{code:int} : ($call is Operation\Copilot\GetCopilotSeatAssignmentDetailsForUser::OPERATION_MATCH ? Schema\CopilotSeatDetails|array{code:int} : ($call is Operation\Orgs\GetMembershipForUser::OPERATION_MATCH ?  : ($call is Operation\Orgs\SetMembershipForUser::OPERATION_MATCH ?  : ($call is Operation\Orgs\RemoveMembershipForUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Migrations\ListForOrg::OPERATION_MATCH ? Observable<Schema\Migration> : ($call is Operation\Migrations\ListForOrgListing::OPERATION_MATCH ? Observable<Schema\Migration> : ($call is Operation\Migrations\StartForOrg::OPERATION_MATCH ?  : ($call is Operation\Migrations\GetStatusForOrg::OPERATION_MATCH ?  : ($call is Operation\Migrations\DownloadArchiveForOrg::OPERATION_MATCH ? array{code:int} : ($call is Operation\Migrations\DownloadArchiveForOrgStreaming::OPERATION_MATCH ? Observable<string> : ($call is Operation\Migrations\DeleteArchiveForOrg::OPERATION_MATCH ? array{code:int} : ($call is Operation\Migrations\UnlockRepoForOrg::OPERATION_MATCH ? array{code:int} : ($call is Operation\Migrations\ListReposForOrg::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Migrations\ListReposForOrgListing::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Orgs\ListOutsideCollaborators::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Orgs\ListOutsideCollaboratorsListing::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Orgs\ConvertMemberToOutsideCollaborator::OPERATION_MATCH ? Schema\Operations\Orgs\ConvertMemberToOutsideCollaborator\Response\ApplicationJson\Accepted\Application\Json|array{code:int} : ($call is Operation\Orgs\RemoveOutsideCollaborator::OPERATION_MATCH ? array{code:int} : ($call is Operation\Packages\ListPackagesForOrganization::OPERATION_MATCH ? Observable<Schema\Package>|array{code:int} : ($call is Operation\Packages\ListPackagesForOrganizationListing::OPERATION_MATCH ? Observable<Schema\Package>|array{code:int} : ($call is Operation\Packages\GetPackageForOrganization::OPERATION_MATCH ?  : ($call is Operation\Packages\DeletePackageForOrg::OPERATION_MATCH ? array{code:int} : ($call is Operation\Packages\RestorePackageForOrg::OPERATION_MATCH ? array{code:int} : ($call is Operation\Packages\GetAllPackageVersionsForPackageOwnedByOrg::OPERATION_MATCH ? Observable<Schema\PackageVersion> : ($call is Operation\Packages\GetAllPackageVersionsForPackageOwnedByOrgListing::OPERATION_MATCH ? Observable<Schema\PackageVersion> : ($call is Operation\Packages\GetPackageVersionForOrganization::OPERATION_MATCH ?  : ($call is Operation\Packages\DeletePackageVersionForOrg::OPERATION_MATCH ? array{code:int} : ($call is Operation\Packages\RestorePackageVersionForOrg::OPERATION_MATCH ? array{code:int} : ($call is Operation\Orgs\ListPatGrantRequests::OPERATION_MATCH ? Observable<Schema\OrganizationProgrammaticAccessGrantRequest> : ($call is Operation\Orgs\ListPatGrantRequestsListing::OPERATION_MATCH ? Observable<Schema\OrganizationProgrammaticAccessGrantRequest> : ($call is Operation\Orgs\ReviewPatGrantRequestsInBulk::OPERATION_MATCH ?  : ($call is Operation\Orgs\ReviewPatGrantRequest::OPERATION_MATCH ? array{code:int} : ($call is Operation\Orgs\ListPatGrantRequestRepositories::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Orgs\ListPatGrantRequestRepositoriesListing::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Orgs\ListPatGrants::OPERATION_MATCH ? Observable<Schema\OrganizationProgrammaticAccessGrant> : ($call is Operation\Orgs\ListPatGrantsListing::OPERATION_MATCH ? Observable<Schema\OrganizationProgrammaticAccessGrant> : ($call is Operation\Orgs\UpdatePatAccesses::OPERATION_MATCH ?  : ($call is Operation\Orgs\UpdatePatAccess::OPERATION_MATCH ? array{code:int} : ($call is Operation\Orgs\ListPatGrantRepositories::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Orgs\ListPatGrantRepositoriesListing::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Projects\ListForOrg::OPERATION_MATCH ? Observable<Schema\Project> : ($call is Operation\Projects\ListForOrgListing::OPERATION_MATCH ? Observable<Schema\Project> : ($call is Operation\Projects\CreateForOrg::OPERATION_MATCH ?  : ($call is Operation\Orgs\ListPublicMembers::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Orgs\ListPublicMembersListing::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Orgs\CheckPublicMembershipForUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Orgs\SetPublicMembershipForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Orgs\RemovePublicMembershipForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\ListForOrg::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Repos\ListForOrgListing::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Repos\CreateInOrg::OPERATION_MATCH ?  : ($call is Operation\Repos\GetOrgRulesets::OPERATION_MATCH ? Observable<Schema\RepositoryRuleset> : ($call is Operation\Repos\GetOrgRulesetsListing::OPERATION_MATCH ? Observable<Schema\RepositoryRuleset> : ($call is Operation\Repos\CreateOrgRuleset::OPERATION_MATCH ?  : ($call is Operation\Repos\GetOrgRuleset::OPERATION_MATCH ?  : ($call is Operation\Repos\UpdateOrgRuleset::OPERATION_MATCH ?  : ($call is Operation\Repos\DeleteOrgRuleset::OPERATION_MATCH ? array{code:int} : ($call is Operation\SecretScanning\ListAlertsForOrg::OPERATION_MATCH ? Observable<Schema\OrganizationSecretScanningAlert> : ($call is Operation\SecretScanning\ListAlertsForOrgListing::OPERATION_MATCH ? Observable<Schema\OrganizationSecretScanningAlert> : ($call is Operation\SecurityAdvisories\ListOrgRepositoryAdvisories::OPERATION_MATCH ? Observable<Schema\RepositoryAdvisory> : ($call is Operation\Orgs\ListSecurityManagerTeams::OPERATION_MATCH ? Observable<Schema\TeamSimple> : ($call is Operation\Orgs\AddSecurityManagerTeam::OPERATION_MATCH ? array{code:int} : ($call is Operation\Orgs\RemoveSecurityManagerTeam::OPERATION_MATCH ? array{code:int} : ($call is Operation\Billing\GetGithubActionsBillingOrg::OPERATION_MATCH ?  : ($call is Operation\Billing\GetGithubPackagesBillingOrg::OPERATION_MATCH ?  : ($call is Operation\Billing\GetSharedStorageBillingOrg::OPERATION_MATCH ?  : ($call is Operation\Teams\List_::OPERATION_MATCH ? Observable<Schema\Team> : ($call is Operation\Teams\ListListing::OPERATION_MATCH ? Observable<Schema\Team> : ($call is Operation\Teams\Create::OPERATION_MATCH ?  : ($call is Operation\Teams\GetByName::OPERATION_MATCH ?  : ($call is Operation\Teams\DeleteInOrg::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\UpdateInOrg::OPERATION_MATCH ?  : ($call is Operation\Teams\ListDiscussionsInOrg::OPERATION_MATCH ? Observable<Schema\TeamDiscussion> : ($call is Operation\Teams\ListDiscussionsInOrgListing::OPERATION_MATCH ? Observable<Schema\TeamDiscussion> : ($call is Operation\Teams\CreateDiscussionInOrg::OPERATION_MATCH ?  : ($call is Operation\Teams\GetDiscussionInOrg::OPERATION_MATCH ?  : ($call is Operation\Teams\DeleteDiscussionInOrg::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\UpdateDiscussionInOrg::OPERATION_MATCH ?  : ($call is Operation\Teams\ListDiscussionCommentsInOrg::OPERATION_MATCH ? Observable<Schema\TeamDiscussionComment> : ($call is Operation\Teams\ListDiscussionCommentsInOrgListing::OPERATION_MATCH ? Observable<Schema\TeamDiscussionComment> : ($call is Operation\Teams\CreateDiscussionCommentInOrg::OPERATION_MATCH ?  : ($call is Operation\Teams\GetDiscussionCommentInOrg::OPERATION_MATCH ?  : ($call is Operation\Teams\DeleteDiscussionCommentInOrg::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\UpdateDiscussionCommentInOrg::OPERATION_MATCH ?  : ($call is Operation\Reactions\ListForTeamDiscussionCommentInOrg::OPERATION_MATCH ? Observable<Schema\Reaction> : ($call is Operation\Reactions\ListForTeamDiscussionCommentInOrgListing::OPERATION_MATCH ? Observable<Schema\Reaction> : ($call is Operation\Reactions\CreateForTeamDiscussionCommentInOrg::OPERATION_MATCH ?  : ($call is Operation\Reactions\DeleteForTeamDiscussionComment::OPERATION_MATCH ? array{code:int} : ($call is Operation\Reactions\ListForTeamDiscussionInOrg::OPERATION_MATCH ? Observable<Schema\Reaction> : ($call is Operation\Reactions\ListForTeamDiscussionInOrgListing::OPERATION_MATCH ? Observable<Schema\Reaction> : ($call is Operation\Reactions\CreateForTeamDiscussionInOrg::OPERATION_MATCH ?  : ($call is Operation\Reactions\DeleteForTeamDiscussion::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\ListPendingInvitationsInOrg::OPERATION_MATCH ? Observable<Schema\OrganizationInvitation> : ($call is Operation\Teams\ListPendingInvitationsInOrgListing::OPERATION_MATCH ? Observable<Schema\OrganizationInvitation> : ($call is Operation\Teams\ListMembersInOrg::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Teams\ListMembersInOrgListing::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Teams\GetMembershipForUserInOrg::OPERATION_MATCH ? Schema\TeamMembership|array{code:int} : ($call is Operation\Teams\AddOrUpdateMembershipForUserInOrg::OPERATION_MATCH ? Schema\TeamMembership|array{code:int} : ($call is Operation\Teams\RemoveMembershipForUserInOrg::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\ListProjectsInOrg::OPERATION_MATCH ? Observable<Schema\TeamProject> : ($call is Operation\Teams\ListProjectsInOrgListing::OPERATION_MATCH ? Observable<Schema\TeamProject> : ($call is Operation\Teams\CheckPermissionsForProjectInOrg::OPERATION_MATCH ? Schema\TeamProject|array{code:int} : ($call is Operation\Teams\AddOrUpdateProjectPermissionsInOrg::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\RemoveProjectInOrg::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\ListReposInOrg::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Teams\ListReposInOrgListing::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Teams\CheckPermissionsForRepoInOrg::OPERATION_MATCH ? Schema\TeamRepository|array{code:int} : ($call is Operation\Teams\AddOrUpdateRepoPermissionsInOrg::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\RemoveRepoInOrg::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\ListChildInOrg::OPERATION_MATCH ? Observable<Schema\Team> : ($call is Operation\Teams\ListChildInOrgListing::OPERATION_MATCH ? Observable<Schema\Team> : ($call is Operation\Orgs\EnableOrDisableSecurityProductOnAllOrgRepos::OPERATION_MATCH ? array{code:int} : ($call is Operation\Projects\GetCard::OPERATION_MATCH ? Schema\ProjectCard|array{code:int} : ($call is Operation\Projects\DeleteCard::OPERATION_MATCH ? array{code:int} : ($call is Operation\Projects\UpdateCard::OPERATION_MATCH ? Schema\ProjectCard|array{code:int} : ($call is Operation\Projects\MoveCard::OPERATION_MATCH ? Schema\Operations\Projects\MoveCard\Response\ApplicationJson\Created\Application\Json|array{code:int} : ($call is Operation\Projects\GetColumn::OPERATION_MATCH ? Schema\ProjectColumn|array{code:int} : ($call is Operation\Projects\DeleteColumn::OPERATION_MATCH ? array{code:int} : ($call is Operation\Projects\UpdateColumn::OPERATION_MATCH ? Schema\ProjectColumn|array{code:int} : ($call is Operation\Projects\ListCards::OPERATION_MATCH ? Observable<Schema\ProjectCard>|array{code:int} : ($call is Operation\Projects\ListCardsListing::OPERATION_MATCH ? Observable<Schema\ProjectCard>|array{code:int} : ($call is Operation\Projects\CreateCard::OPERATION_MATCH ? Schema\ProjectCard|array{code:int} : ($call is Operation\Projects\MoveColumn::OPERATION_MATCH ? Schema\Operations\Projects\MoveColumn\Response\ApplicationJson\Created\Application\Json|array{code:int} : ($call is Operation\Projects\Get::OPERATION_MATCH ? Schema\Project|array{code:int} : ($call is Operation\Projects\Delete::OPERATION_MATCH ? array{code:int} : ($call is Operation\Projects\Update::OPERATION_MATCH ? Schema\Project|array{code:int} : ($call is Operation\Projects\ListCollaborators::OPERATION_MATCH ? Observable<Schema\SimpleUser>|array{code:int} : ($call is Operation\Projects\ListCollaboratorsListing::OPERATION_MATCH ? Observable<Schema\SimpleUser>|array{code:int} : ($call is Operation\Projects\AddCollaborator::OPERATION_MATCH ? array{code:int} : ($call is Operation\Projects\RemoveCollaborator::OPERATION_MATCH ? array{code:int} : ($call is Operation\Projects\GetPermissionForUser::OPERATION_MATCH ? Schema\ProjectCollaboratorPermission|array{code:int} : ($call is Operation\Projects\ListColumns::OPERATION_MATCH ? Observable<Schema\ProjectColumn>|array{code:int} : ($call is Operation\Projects\ListColumnsListing::OPERATION_MATCH ? Observable<Schema\ProjectColumn>|array{code:int} : ($call is Operation\Projects\CreateColumn::OPERATION_MATCH ? Schema\ProjectColumn|array{code:int} : ($call is Operation\RateLimit\Get::OPERATION_MATCH ? Schema\RateLimitOverview|array{code:int} : ($call is Operation\Repos\Get::OPERATION_MATCH ?  : ($call is Operation\Repos\Delete::OPERATION_MATCH ? Schema\BasicError|array{code:int} : ($call is Operation\Repos\Update::OPERATION_MATCH ?  : ($call is Operation\Actions\ListArtifactsForRepo::OPERATION_MATCH ?  : ($call is Operation\Actions\GetArtifact::OPERATION_MATCH ?  : ($call is Operation\Actions\DeleteArtifact::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\DownloadArtifact::OPERATION_MATCH ? array{code:int,location:string} : ($call is Operation\Actions\DownloadArtifactStreaming::OPERATION_MATCH ? Observable<string> : ($call is Operation\Actions\GetActionsCacheUsage::OPERATION_MATCH ?  : ($call is Operation\Actions\GetActionsCacheList::OPERATION_MATCH ?  : ($call is Operation\Actions\DeleteActionsCacheByKey::OPERATION_MATCH ?  : ($call is Operation\Actions\DeleteActionsCacheById::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\GetJobForWorkflowRun::OPERATION_MATCH ?  : ($call is Operation\Actions\DownloadJobLogsForWorkflowRun::OPERATION_MATCH ? array{code:int,location:string} : ($call is Operation\Actions\DownloadJobLogsForWorkflowRunStreaming::OPERATION_MATCH ? Observable<string> : ($call is Operation\Actions\ReRunJobForWorkflowRun::OPERATION_MATCH ?  : ($call is Operation\Actions\GetCustomOidcSubClaimForRepo::OPERATION_MATCH ?  : ($call is Operation\Actions\SetCustomOidcSubClaimForRepo::OPERATION_MATCH ?  : ($call is Operation\Actions\ListRepoOrganizationSecrets::OPERATION_MATCH ?  : ($call is Operation\Actions\ListRepoOrganizationVariables::OPERATION_MATCH ?  : ($call is Operation\Actions\GetGithubActionsPermissionsRepository::OPERATION_MATCH ?  : ($call is Operation\Actions\SetGithubActionsPermissionsRepository::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\GetWorkflowAccessToRepository::OPERATION_MATCH ?  : ($call is Operation\Actions\SetWorkflowAccessToRepository::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\GetAllowedActionsRepository::OPERATION_MATCH ?  : ($call is Operation\Actions\SetAllowedActionsRepository::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\GetGithubActionsDefaultWorkflowPermissionsRepository::OPERATION_MATCH ?  : ($call is Operation\Actions\SetGithubActionsDefaultWorkflowPermissionsRepository::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\ListSelfHostedRunnersForRepo::OPERATION_MATCH ?  : ($call is Operation\Actions\ListRunnerApplicationsForRepo::OPERATION_MATCH ? Observable<Schema\RunnerApplication> : ($call is Operation\Actions\GenerateRunnerJitconfigForRepo::OPERATION_MATCH ?  : ($call is Operation\Actions\CreateRegistrationTokenForRepo::OPERATION_MATCH ?  : ($call is Operation\Actions\CreateRemoveTokenForRepo::OPERATION_MATCH ?  : ($call is Operation\Actions\GetSelfHostedRunnerForRepo::OPERATION_MATCH ?  : ($call is Operation\Actions\DeleteSelfHostedRunnerFromRepo::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\ListLabelsForSelfHostedRunnerForRepo::OPERATION_MATCH ?  : ($call is Operation\Actions\SetCustomLabelsForSelfHostedRunnerForRepo::OPERATION_MATCH ?  : ($call is Operation\Actions\AddCustomLabelsToSelfHostedRunnerForRepo::OPERATION_MATCH ?  : ($call is Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForRepo::OPERATION_MATCH ?  : ($call is Operation\Actions\RemoveCustomLabelFromSelfHostedRunnerForRepo::OPERATION_MATCH ?  : ($call is Operation\Actions\ListWorkflowRunsForRepo::OPERATION_MATCH ?  : ($call is Operation\Actions\GetWorkflowRun::OPERATION_MATCH ?  : ($call is Operation\Actions\DeleteWorkflowRun::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\GetReviewsForRun::OPERATION_MATCH ? Observable<Schema\EnvironmentApprovals> : ($call is Operation\Actions\ApproveWorkflowRun::OPERATION_MATCH ?  : ($call is Operation\Actions\ListWorkflowRunArtifacts::OPERATION_MATCH ?  : ($call is Operation\Actions\GetWorkflowRunAttempt::OPERATION_MATCH ?  : ($call is Operation\Actions\ListJobsForWorkflowRunAttempt::OPERATION_MATCH ?  : ($call is Operation\Actions\DownloadWorkflowRunAttemptLogs::OPERATION_MATCH ? array{code:int,location:string} : ($call is Operation\Actions\DownloadWorkflowRunAttemptLogsStreaming::OPERATION_MATCH ? Observable<string> : ($call is Operation\Actions\CancelWorkflowRun::OPERATION_MATCH ?  : ($call is Operation\Actions\ReviewCustomGatesForRun::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\ForceCancelWorkflowRun::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\ListJobsForWorkflowRun::OPERATION_MATCH ?  : ($call is Operation\Actions\DownloadWorkflowRunLogs::OPERATION_MATCH ? array{code:int,location:string} : ($call is Operation\Actions\DownloadWorkflowRunLogsStreaming::OPERATION_MATCH ? Observable<string> : ($call is Operation\Actions\DeleteWorkflowRunLogs::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\GetPendingDeploymentsForRun::OPERATION_MATCH ? Observable<Schema\PendingDeployment> : ($call is Operation\Actions\ReviewPendingDeploymentsForRun::OPERATION_MATCH ? Observable<Schema\Deployment> : ($call is Operation\Actions\ReRunWorkflow::OPERATION_MATCH ?  : ($call is Operation\Actions\ReRunWorkflowFailedJobs::OPERATION_MATCH ?  : ($call is Operation\Actions\GetWorkflowRunUsage::OPERATION_MATCH ?  : ($call is Operation\Actions\ListRepoSecrets::OPERATION_MATCH ?  : ($call is Operation\Actions\GetRepoPublicKey::OPERATION_MATCH ?  : ($call is Operation\Actions\GetRepoSecret::OPERATION_MATCH ?  : ($call is Operation\Actions\CreateOrUpdateRepoSecret::OPERATION_MATCH ? Schema\EmptyObject|array{code:int} : ($call is Operation\Actions\DeleteRepoSecret::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\ListRepoVariables::OPERATION_MATCH ?  : ($call is Operation\Actions\CreateRepoVariable::OPERATION_MATCH ?  : ($call is Operation\Actions\GetRepoVariable::OPERATION_MATCH ?  : ($call is Operation\Actions\DeleteRepoVariable::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\UpdateRepoVariable::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\ListRepoWorkflows::OPERATION_MATCH ?  : ($call is Operation\Actions\GetWorkflow::OPERATION_MATCH ?  : ($call is Operation\Actions\DisableWorkflow::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\CreateWorkflowDispatch::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\EnableWorkflow::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\ListWorkflowRuns::OPERATION_MATCH ?  : ($call is Operation\Actions\GetWorkflowUsage::OPERATION_MATCH ?  : ($call is Operation\Repos\ListActivities::OPERATION_MATCH ? Observable<Schema\Activity> : ($call is Operation\Issues\ListAssignees::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Issues\ListAssigneesListing::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Issues\CheckUserCanBeAssigned::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\ListAutolinks::OPERATION_MATCH ? Observable<Schema\Autolink> : ($call is Operation\Repos\CreateAutolink::OPERATION_MATCH ?  : ($call is Operation\Repos\GetAutolink::OPERATION_MATCH ?  : ($call is Operation\Repos\DeleteAutolink::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\CheckAutomatedSecurityFixes::OPERATION_MATCH ? Schema\CheckAutomatedSecurityFixes|array{code:int} : ($call is Operation\Repos\EnableAutomatedSecurityFixes::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\DisableAutomatedSecurityFixes::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\ListBranches::OPERATION_MATCH ? Observable<Schema\ShortBranch> : ($call is Operation\Repos\ListBranchesListing::OPERATION_MATCH ? Observable<Schema\ShortBranch> : ($call is Operation\Repos\GetBranch::OPERATION_MATCH ?  : ($call is Operation\Repos\GetBranchProtection::OPERATION_MATCH ?  : ($call is Operation\Repos\UpdateBranchProtection::OPERATION_MATCH ?  : ($call is Operation\Repos\DeleteBranchProtection::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\GetAdminBranchProtection::OPERATION_MATCH ?  : ($call is Operation\Repos\SetAdminBranchProtection::OPERATION_MATCH ?  : ($call is Operation\Repos\DeleteAdminBranchProtection::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\GetPullRequestReviewProtection::OPERATION_MATCH ?  : ($call is Operation\Repos\DeletePullRequestReviewProtection::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\UpdatePullRequestReviewProtection::OPERATION_MATCH ?  : ($call is Operation\Repos\GetCommitSignatureProtection::OPERATION_MATCH ?  : ($call is Operation\Repos\CreateCommitSignatureProtection::OPERATION_MATCH ?  : ($call is Operation\Repos\DeleteCommitSignatureProtection::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\GetStatusChecksProtection::OPERATION_MATCH ?  : ($call is Operation\Repos\RemoveStatusCheckProtection::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\UpdateStatusCheckProtection::OPERATION_MATCH ?  : ($call is Operation\Repos\GetAllStatusCheckContexts::OPERATION_MATCH ? Observable<string> : ($call is Operation\Repos\SetStatusCheckContexts::OPERATION_MATCH ? Observable<string> : ($call is Operation\Repos\AddStatusCheckContexts::OPERATION_MATCH ? Observable<string> : ($call is Operation\Repos\RemoveStatusCheckContexts::OPERATION_MATCH ? Observable<string> : ($call is Operation\Repos\GetAccessRestrictions::OPERATION_MATCH ?  : ($call is Operation\Repos\DeleteAccessRestrictions::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\GetAppsWithAccessToProtectedBranch::OPERATION_MATCH ? Observable<Schema\Integration> : ($call is Operation\Repos\SetAppAccessRestrictions::OPERATION_MATCH ? Observable<Schema\Integration> : ($call is Operation\Repos\AddAppAccessRestrictions::OPERATION_MATCH ? Observable<Schema\Integration> : ($call is Operation\Repos\RemoveAppAccessRestrictions::OPERATION_MATCH ? Observable<Schema\Integration> : ($call is Operation\Repos\GetTeamsWithAccessToProtectedBranch::OPERATION_MATCH ? Observable<Schema\Team> : ($call is Operation\Repos\SetTeamAccessRestrictions::OPERATION_MATCH ? Observable<Schema\Team> : ($call is Operation\Repos\AddTeamAccessRestrictions::OPERATION_MATCH ? Observable<Schema\Team> : ($call is Operation\Repos\RemoveTeamAccessRestrictions::OPERATION_MATCH ? Observable<Schema\Team> : ($call is Operation\Repos\GetUsersWithAccessToProtectedBranch::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Repos\SetUserAccessRestrictions::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Repos\AddUserAccessRestrictions::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Repos\RemoveUserAccessRestrictions::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Repos\RenameBranch::OPERATION_MATCH ?  : ($call is Operation\Checks\Create::OPERATION_MATCH ?  : ($call is Operation\Checks\Get::OPERATION_MATCH ?  : ($call is Operation\Checks\Update::OPERATION_MATCH ?  : ($call is Operation\Checks\ListAnnotations::OPERATION_MATCH ? Observable<Schema\CheckAnnotation> : ($call is Operation\Checks\ListAnnotationsListing::OPERATION_MATCH ? Observable<Schema\CheckAnnotation> : ($call is Operation\Checks\RerequestRun::OPERATION_MATCH ?  : ($call is Operation\Checks\CreateSuite::OPERATION_MATCH ?  : ($call is Operation\Checks\SetSuitesPreferences::OPERATION_MATCH ?  : ($call is Operation\Checks\GetSuite::OPERATION_MATCH ?  : ($call is Operation\Checks\ListForSuite::OPERATION_MATCH ?  : ($call is Operation\Checks\RerequestSuite::OPERATION_MATCH ?  : ($call is Operation\CodeScanning\ListAlertsForRepo::OPERATION_MATCH ? Observable<Schema\CodeScanningAlertItems>|array{code:int} : ($call is Operation\CodeScanning\ListAlertsForRepoListing::OPERATION_MATCH ? Observable<Schema\CodeScanningAlertItems>|array{code:int} : ($call is Operation\CodeScanning\GetAlert::OPERATION_MATCH ? Schema\CodeScanningAlert|array{code:int} : ($call is Operation\CodeScanning\UpdateAlert::OPERATION_MATCH ?  : ($call is Operation\CodeScanning\ListAlertInstances::OPERATION_MATCH ? Observable<Schema\CodeScanningAlertInstance> : ($call is Operation\CodeScanning\ListAlertInstancesListing::OPERATION_MATCH ? Observable<Schema\CodeScanningAlertInstance> : ($call is Operation\CodeScanning\ListRecentAnalyses::OPERATION_MATCH ? Observable<Schema\CodeScanningAnalysis> : ($call is Operation\CodeScanning\ListRecentAnalysesListing::OPERATION_MATCH ? Observable<Schema\CodeScanningAnalysis> : ($call is Operation\CodeScanning\GetAnalysis::OPERATION_MATCH ?  : ($call is Operation\CodeScanning\DeleteAnalysis::OPERATION_MATCH ?  : ($call is Operation\CodeScanning\ListCodeqlDatabases::OPERATION_MATCH ? Observable<Schema\CodeScanningCodeqlDatabase> : ($call is Operation\CodeScanning\GetCodeqlDatabase::OPERATION_MATCH ? Schema\CodeScanningCodeqlDatabase|array{code:int} : ($call is Operation\CodeScanning\GetDefaultSetup::OPERATION_MATCH ?  : ($call is Operation\CodeScanning\UpdateDefaultSetup::OPERATION_MATCH ?  : ($call is Operation\CodeScanning\UploadSarif::OPERATION_MATCH ? Schema\CodeScanningSarifsReceipt|array{code:int} : ($call is Operation\CodeScanning\GetSarif::OPERATION_MATCH ? Schema\CodeScanningSarifsStatus|array{code:int} : ($call is Operation\Repos\CodeownersErrors::OPERATION_MATCH ? Schema\CodeownersErrors|array{code:int} : ($call is Operation\Codespaces\ListInRepositoryForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Codespaces\CreateWithRepoForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Codespaces\ListDevcontainersInRepositoryForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Codespaces\RepoMachinesForAuthenticatedUser::OPERATION_MATCH ? Schema\Operations\Codespaces\RepoMachinesForAuthenticatedUser\Response\ApplicationJson\Ok|array{code:int} : ($call is Operation\Codespaces\PreFlightWithRepoForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Codespaces\ListRepoSecrets::OPERATION_MATCH ?  : ($call is Operation\Codespaces\GetRepoPublicKey::OPERATION_MATCH ?  : ($call is Operation\Codespaces\GetRepoSecret::OPERATION_MATCH ?  : ($call is Operation\Codespaces\CreateOrUpdateRepoSecret::OPERATION_MATCH ? Schema\EmptyObject|array{code:int} : ($call is Operation\Codespaces\DeleteRepoSecret::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\ListCollaborators::OPERATION_MATCH ? Observable<Schema\Collaborator> : ($call is Operation\Repos\ListCollaboratorsListing::OPERATION_MATCH ? Observable<Schema\Collaborator> : ($call is Operation\Repos\CheckCollaborator::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\AddCollaborator::OPERATION_MATCH ? Schema\RepositoryInvitation|array{code:int} : ($call is Operation\Repos\RemoveCollaborator::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\GetCollaboratorPermissionLevel::OPERATION_MATCH ?  : ($call is Operation\Repos\ListCommitCommentsForRepo::OPERATION_MATCH ? Observable<Schema\CommitComment> : ($call is Operation\Repos\ListCommitCommentsForRepoListing::OPERATION_MATCH ? Observable<Schema\CommitComment> : ($call is Operation\Repos\GetCommitComment::OPERATION_MATCH ?  : ($call is Operation\Repos\DeleteCommitComment::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\UpdateCommitComment::OPERATION_MATCH ?  : ($call is Operation\Reactions\ListForCommitComment::OPERATION_MATCH ? Observable<Schema\Reaction> : ($call is Operation\Reactions\ListForCommitCommentListing::OPERATION_MATCH ? Observable<Schema\Reaction> : ($call is Operation\Reactions\CreateForCommitComment::OPERATION_MATCH ?  : ($call is Operation\Reactions\DeleteForCommitComment::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\ListCommits::OPERATION_MATCH ? Observable<Schema\Commit> : ($call is Operation\Repos\ListCommitsListing::OPERATION_MATCH ? Observable<Schema\Commit> : ($call is Operation\Repos\ListBranchesForHeadCommit::OPERATION_MATCH ? Observable<Schema\BranchShort> : ($call is Operation\Repos\ListCommentsForCommit::OPERATION_MATCH ? Observable<Schema\CommitComment> : ($call is Operation\Repos\ListCommentsForCommitListing::OPERATION_MATCH ? Observable<Schema\CommitComment> : ($call is Operation\Repos\CreateCommitComment::OPERATION_MATCH ?  : ($call is Operation\Repos\ListPullRequestsAssociatedWithCommit::OPERATION_MATCH ? Observable<Schema\PullRequestSimple> : ($call is Operation\Repos\ListPullRequestsAssociatedWithCommitListing::OPERATION_MATCH ? Observable<Schema\PullRequestSimple> : ($call is Operation\Repos\GetCommit::OPERATION_MATCH ?  : ($call is Operation\Checks\ListForRef::OPERATION_MATCH ?  : ($call is Operation\Checks\ListSuitesForRef::OPERATION_MATCH ?  : ($call is Operation\Repos\GetCombinedStatusForRef::OPERATION_MATCH ?  : ($call is Operation\Repos\ListCommitStatusesForRef::OPERATION_MATCH ? Observable<Schema\Status>|Schema\BasicError : ($call is Operation\Repos\ListCommitStatusesForRefListing::OPERATION_MATCH ? Observable<Schema\Status>|Schema\BasicError : ($call is Operation\Repos\GetCommunityProfileMetrics::OPERATION_MATCH ?  : ($call is Operation\Repos\CompareCommits::OPERATION_MATCH ?  : ($call is Operation\Repos\GetContent::OPERATION_MATCH ? Schema\ContentDirectory|Schema\ContentFile|Schema\ContentSymlink|Schema\ContentSubmodule|array{code:int} : ($call is Operation\Repos\CreateOrUpdateFileContents::OPERATION_MATCH ?  : ($call is Operation\Repos\DeleteFile::OPERATION_MATCH ?  : ($call is Operation\Repos\ListContributors::OPERATION_MATCH ? Observable<Schema\Contributor>|array{code:int} : ($call is Operation\Repos\ListContributorsListing::OPERATION_MATCH ? Observable<Schema\Contributor>|array{code:int} : ($call is Operation\Dependabot\ListAlertsForRepo::OPERATION_MATCH ? Observable<Schema\DependabotAlert>|array{code:int} : ($call is Operation\Dependabot\ListAlertsForRepoListing::OPERATION_MATCH ? Observable<Schema\DependabotAlert>|array{code:int} : ($call is Operation\Dependabot\GetAlert::OPERATION_MATCH ? Schema\DependabotAlert|array{code:int} : ($call is Operation\Dependabot\UpdateAlert::OPERATION_MATCH ?  : ($call is Operation\Dependabot\ListRepoSecrets::OPERATION_MATCH ?  : ($call is Operation\Dependabot\GetRepoPublicKey::OPERATION_MATCH ?  : ($call is Operation\Dependabot\GetRepoSecret::OPERATION_MATCH ?  : ($call is Operation\Dependabot\CreateOrUpdateRepoSecret::OPERATION_MATCH ? Schema\EmptyObject|array{code:int} : ($call is Operation\Dependabot\DeleteRepoSecret::OPERATION_MATCH ? array{code:int} : ($call is Operation\DependencyGraph\DiffRange::OPERATION_MATCH ? Observable<Schema\DependencyGraphDiff> : ($call is Operation\DependencyGraph\ExportSbom::OPERATION_MATCH ?  : ($call is Operation\DependencyGraph\CreateRepositorySnapshot::OPERATION_MATCH ?  : ($call is Operation\Repos\ListDeployments::OPERATION_MATCH ? Observable<Schema\Deployment> : ($call is Operation\Repos\ListDeploymentsListing::OPERATION_MATCH ? Observable<Schema\Deployment> : ($call is Operation\Repos\CreateDeployment::OPERATION_MATCH ? Schema\Deployment|Schema\Operations\Repos\CreateDeployment\Response\ApplicationJson\Accepted\Application\Json|array{code:int} : ($call is Operation\Repos\GetDeployment::OPERATION_MATCH ?  : ($call is Operation\Repos\DeleteDeployment::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\ListDeploymentStatuses::OPERATION_MATCH ? Observable<Schema\DeploymentStatus> : ($call is Operation\Repos\ListDeploymentStatusesListing::OPERATION_MATCH ? Observable<Schema\DeploymentStatus> : ($call is Operation\Repos\CreateDeploymentStatus::OPERATION_MATCH ?  : ($call is Operation\Repos\GetDeploymentStatus::OPERATION_MATCH ?  : ($call is Operation\Repos\CreateDispatchEvent::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\GetAllEnvironments::OPERATION_MATCH ?  : ($call is Operation\Repos\GetEnvironment::OPERATION_MATCH ?  : ($call is Operation\Repos\CreateOrUpdateEnvironment::OPERATION_MATCH ?  : ($call is Operation\Repos\DeleteAnEnvironment::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\ListDeploymentBranchPolicies::OPERATION_MATCH ?  : ($call is Operation\Repos\CreateDeploymentBranchPolicy::OPERATION_MATCH ? Schema\DeploymentBranchPolicy|array{code:int} : ($call is Operation\Repos\GetDeploymentBranchPolicy::OPERATION_MATCH ?  : ($call is Operation\Repos\UpdateDeploymentBranchPolicy::OPERATION_MATCH ?  : ($call is Operation\Repos\DeleteDeploymentBranchPolicy::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\GetAllDeploymentProtectionRules::OPERATION_MATCH ?  : ($call is Operation\Repos\CreateDeploymentProtectionRule::OPERATION_MATCH ?  : ($call is Operation\Repos\ListCustomDeploymentRuleIntegrations::OPERATION_MATCH ?  : ($call is Operation\Repos\GetCustomDeploymentProtectionRule::OPERATION_MATCH ?  : ($call is Operation\Repos\DisableDeploymentProtectionRule::OPERATION_MATCH ? array{code:int} : ($call is Operation\Activity\ListRepoEvents::OPERATION_MATCH ? Observable<Schema\Event> : ($call is Operation\Activity\ListRepoEventsListing::OPERATION_MATCH ? Observable<Schema\Event> : ($call is Operation\Repos\ListForks::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Repos\ListForksListing::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Repos\CreateFork::OPERATION_MATCH ?  : ($call is Operation\Git\CreateBlob::OPERATION_MATCH ?  : ($call is Operation\Git\GetBlob::OPERATION_MATCH ?  : ($call is Operation\Git\CreateCommit::OPERATION_MATCH ?  : ($call is Operation\Git\GetCommit::OPERATION_MATCH ?  : ($call is Operation\Git\ListMatchingRefs::OPERATION_MATCH ? Observable<Schema\GitRef> : ($call is Operation\Git\GetRef::OPERATION_MATCH ?  : ($call is Operation\Git\CreateRef::OPERATION_MATCH ?  : ($call is Operation\Git\DeleteRef::OPERATION_MATCH ? array{code:int} : ($call is Operation\Git\UpdateRef::OPERATION_MATCH ?  : ($call is Operation\Git\CreateTag::OPERATION_MATCH ?  : ($call is Operation\Git\GetTag::OPERATION_MATCH ?  : ($call is Operation\Git\CreateTree::OPERATION_MATCH ?  : ($call is Operation\Git\GetTree::OPERATION_MATCH ?  : ($call is Operation\Repos\ListWebhooks::OPERATION_MATCH ? Observable<Schema\Hook> : ($call is Operation\Repos\ListWebhooksListing::OPERATION_MATCH ? Observable<Schema\Hook> : ($call is Operation\Repos\CreateWebhook::OPERATION_MATCH ?  : ($call is Operation\Repos\GetWebhook::OPERATION_MATCH ? Schema\Hook : ($call is Operation\Repos\DeleteWebhook::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\UpdateWebhook::OPERATION_MATCH ? Schema\Hook : ($call is Operation\Repos\GetWebhookConfigForRepo::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Operation\Repos\UpdateWebhookConfigForRepo::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Operation\Repos\ListWebhookDeliveries::OPERATION_MATCH ? iterable<Schema\HookDeliveryItem> : ($call is Operation\Repos\GetWebhookDelivery::OPERATION_MATCH ? Schema\HookDelivery : ($call is Operation\Repos\RedeliverWebhookDelivery::OPERATION_MATCH ? Schema\Operations\Repos\RedeliverWebhookDelivery\Response\ApplicationJson\Accepted\Application\Json : ($call is Operation\Repos\PingWebhook::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\TestPushWebhook::OPERATION_MATCH ? array{code:int} : ($call is Operation\Migrations\GetImportStatus::OPERATION_MATCH ?  : ($call is Operation\Migrations\StartImport::OPERATION_MATCH ?  : ($call is Operation\Migrations\CancelImport::OPERATION_MATCH ? array{code:int} : ($call is Operation\Migrations\UpdateImport::OPERATION_MATCH ?  : ($call is Operation\Migrations\GetCommitAuthors::OPERATION_MATCH ? Observable<Schema\PorterAuthor> : ($call is Operation\Migrations\MapCommitAuthor::OPERATION_MATCH ?  : ($call is Operation\Migrations\GetLargeFiles::OPERATION_MATCH ? Observable<Schema\PorterLargeFile> : ($call is Operation\Migrations\SetLfsPreference::OPERATION_MATCH ?  : ($call is Operation\Apps\GetRepoInstallation::OPERATION_MATCH ?  : ($call is Operation\Interactions\GetRestrictionsForRepo::OPERATION_MATCH ?  : ($call is Operation\Interactions\SetRestrictionsForRepo::OPERATION_MATCH ? Schema\InteractionLimitResponse|array{code:int} : ($call is Operation\Interactions\RemoveRestrictionsForRepo::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\ListInvitations::OPERATION_MATCH ? Observable<Schema\RepositoryInvitation> : ($call is Operation\Repos\ListInvitationsListing::OPERATION_MATCH ? Observable<Schema\RepositoryInvitation> : ($call is Operation\Repos\DeleteInvitation::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\UpdateInvitation::OPERATION_MATCH ?  : ($call is Operation\Issues\ListForRepo::OPERATION_MATCH ? Observable<Schema\Issue>|Schema\BasicError : ($call is Operation\Issues\ListForRepoListing::OPERATION_MATCH ? Observable<Schema\Issue>|Schema\BasicError : ($call is Operation\Issues\Create::OPERATION_MATCH ?  : ($call is Operation\Issues\ListCommentsForRepo::OPERATION_MATCH ? Observable<Schema\IssueComment> : ($call is Operation\Issues\ListCommentsForRepoListing::OPERATION_MATCH ? Observable<Schema\IssueComment> : ($call is Operation\Issues\GetComment::OPERATION_MATCH ?  : ($call is Operation\Issues\DeleteComment::OPERATION_MATCH ? array{code:int} : ($call is Operation\Issues\UpdateComment::OPERATION_MATCH ?  : ($call is Operation\Reactions\ListForIssueComment::OPERATION_MATCH ? Observable<Schema\Reaction> : ($call is Operation\Reactions\ListForIssueCommentListing::OPERATION_MATCH ? Observable<Schema\Reaction> : ($call is Operation\Reactions\CreateForIssueComment::OPERATION_MATCH ?  : ($call is Operation\Reactions\DeleteForIssueComment::OPERATION_MATCH ? array{code:int} : ($call is Operation\Issues\ListEventsForRepo::OPERATION_MATCH ? Observable<Schema\IssueEvent> : ($call is Operation\Issues\ListEventsForRepoListing::OPERATION_MATCH ? Observable<Schema\IssueEvent> : ($call is Operation\Issues\GetEvent::OPERATION_MATCH ?  : ($call is Operation\Issues\Get::OPERATION_MATCH ? Schema\Issue|Schema\BasicError|array{code:int} : ($call is Operation\Issues\Update::OPERATION_MATCH ?  : ($call is Operation\Issues\AddAssignees::OPERATION_MATCH ?  : ($call is Operation\Issues\RemoveAssignees::OPERATION_MATCH ?  : ($call is Operation\Issues\CheckUserCanBeAssignedToIssue::OPERATION_MATCH ? array{code:int} : ($call is Operation\Issues\ListComments::OPERATION_MATCH ? Observable<Schema\IssueComment> : ($call is Operation\Issues\ListCommentsListing::OPERATION_MATCH ? Observable<Schema\IssueComment> : ($call is Operation\Issues\CreateComment::OPERATION_MATCH ?  : ($call is Operation\Issues\ListEvents::OPERATION_MATCH ? Observable<Schema\LabeledIssueEvent|Schema\UnlabeledIssueEvent|Schema\AssignedIssueEvent|Schema\UnassignedIssueEvent|Schema\MilestonedIssueEvent|Schema\DemilestonedIssueEvent|Schema\RenamedIssueEvent|Schema\ReviewRequestedIssueEvent|Schema\ReviewRequestRemovedIssueEvent|Schema\ReviewDismissedIssueEvent|Schema\LockedIssueEvent|Schema\AddedToProjectIssueEvent|Schema\MovedColumnInProjectIssueEvent|Schema\RemovedFromProjectIssueEvent|Schema\ConvertedNoteToIssueIssueEvent> : ($call is Operation\Issues\ListEventsListing::OPERATION_MATCH ? Observable<Schema\LabeledIssueEvent|Schema\UnlabeledIssueEvent|Schema\AssignedIssueEvent|Schema\UnassignedIssueEvent|Schema\MilestonedIssueEvent|Schema\DemilestonedIssueEvent|Schema\RenamedIssueEvent|Schema\ReviewRequestedIssueEvent|Schema\ReviewRequestRemovedIssueEvent|Schema\ReviewDismissedIssueEvent|Schema\LockedIssueEvent|Schema\AddedToProjectIssueEvent|Schema\MovedColumnInProjectIssueEvent|Schema\RemovedFromProjectIssueEvent|Schema\ConvertedNoteToIssueIssueEvent> : ($call is Operation\Issues\ListLabelsOnIssue::OPERATION_MATCH ? Observable<Schema\Label>|Schema\BasicError : ($call is Operation\Issues\ListLabelsOnIssueListing::OPERATION_MATCH ? Observable<Schema\Label>|Schema\BasicError : ($call is Operation\Issues\SetLabels::OPERATION_MATCH ? Observable<Schema\Label>|Schema\BasicError : ($call is Operation\Issues\AddLabels::OPERATION_MATCH ? Observable<Schema\Label>|Schema\BasicError : ($call is Operation\Issues\RemoveAllLabels::OPERATION_MATCH ? Schema\BasicError|array{code:int} : ($call is Operation\Issues\RemoveLabel::OPERATION_MATCH ? Observable<Schema\Label>|Schema\BasicError : ($call is Operation\Issues\Lock::OPERATION_MATCH ? array{code:int} : ($call is Operation\Issues\Unlock::OPERATION_MATCH ? array{code:int} : ($call is Operation\Reactions\ListForIssue::OPERATION_MATCH ? Observable<Schema\Reaction> : ($call is Operation\Reactions\ListForIssueListing::OPERATION_MATCH ? Observable<Schema\Reaction> : ($call is Operation\Reactions\CreateForIssue::OPERATION_MATCH ?  : ($call is Operation\Reactions\DeleteForIssue::OPERATION_MATCH ? array{code:int} : ($call is Operation\Issues\ListEventsForTimeline::OPERATION_MATCH ? Observable<Schema\LabeledIssueEvent|Schema\UnlabeledIssueEvent|Schema\MilestonedIssueEvent|Schema\DemilestonedIssueEvent|Schema\RenamedIssueEvent|Schema\ReviewRequestedIssueEvent|Schema\ReviewRequestRemovedIssueEvent|Schema\ReviewDismissedIssueEvent|Schema\LockedIssueEvent|Schema\AddedToProjectIssueEvent|Schema\MovedColumnInProjectIssueEvent|Schema\RemovedFromProjectIssueEvent|Schema\ConvertedNoteToIssueIssueEvent|Schema\TimelineCommentEvent|Schema\TimelineCrossReferencedEvent|Schema\TimelineCommittedEvent|Schema\TimelineReviewedEvent|Schema\TimelineLineCommentedEvent|Schema\TimelineCommitCommentedEvent|Schema\TimelineAssignedIssueEvent|Schema\TimelineUnassignedIssueEvent|Schema\StateChangeIssueEvent> : ($call is Operation\Issues\ListEventsForTimelineListing::OPERATION_MATCH ? Observable<Schema\LabeledIssueEvent|Schema\UnlabeledIssueEvent|Schema\MilestonedIssueEvent|Schema\DemilestonedIssueEvent|Schema\RenamedIssueEvent|Schema\ReviewRequestedIssueEvent|Schema\ReviewRequestRemovedIssueEvent|Schema\ReviewDismissedIssueEvent|Schema\LockedIssueEvent|Schema\AddedToProjectIssueEvent|Schema\MovedColumnInProjectIssueEvent|Schema\RemovedFromProjectIssueEvent|Schema\ConvertedNoteToIssueIssueEvent|Schema\TimelineCommentEvent|Schema\TimelineCrossReferencedEvent|Schema\TimelineCommittedEvent|Schema\TimelineReviewedEvent|Schema\TimelineLineCommentedEvent|Schema\TimelineCommitCommentedEvent|Schema\TimelineAssignedIssueEvent|Schema\TimelineUnassignedIssueEvent|Schema\StateChangeIssueEvent> : ($call is Operation\Repos\ListDeployKeys::OPERATION_MATCH ? Observable<Schema\DeployKey> : ($call is Operation\Repos\ListDeployKeysListing::OPERATION_MATCH ? Observable<Schema\DeployKey> : ($call is Operation\Repos\CreateDeployKey::OPERATION_MATCH ?  : ($call is Operation\Repos\GetDeployKey::OPERATION_MATCH ?  : ($call is Operation\Repos\DeleteDeployKey::OPERATION_MATCH ? array{code:int} : ($call is Operation\Issues\ListLabelsForRepo::OPERATION_MATCH ? Observable<Schema\Label> : ($call is Operation\Issues\ListLabelsForRepoListing::OPERATION_MATCH ? Observable<Schema\Label> : ($call is Operation\Issues\CreateLabel::OPERATION_MATCH ?  : ($call is Operation\Issues\GetLabel::OPERATION_MATCH ?  : ($call is Operation\Issues\DeleteLabel::OPERATION_MATCH ? array{code:int} : ($call is Operation\Issues\UpdateLabel::OPERATION_MATCH ?  : ($call is Operation\Repos\ListLanguages::OPERATION_MATCH ?  : ($call is Operation\Licenses\GetForRepo::OPERATION_MATCH ?  : ($call is Operation\Repos\MergeUpstream::OPERATION_MATCH ? Schema\MergedUpstream|array{code:int} : ($call is Operation\Repos\Merge::OPERATION_MATCH ? Schema\Commit|array{code:int} : ($call is Operation\Issues\ListMilestones::OPERATION_MATCH ? Observable<Schema\Milestone> : ($call is Operation\Issues\ListMilestonesListing::OPERATION_MATCH ? Observable<Schema\Milestone> : ($call is Operation\Issues\CreateMilestone::OPERATION_MATCH ?  : ($call is Operation\Issues\GetMilestone::OPERATION_MATCH ?  : ($call is Operation\Issues\DeleteMilestone::OPERATION_MATCH ? array{code:int} : ($call is Operation\Issues\UpdateMilestone::OPERATION_MATCH ?  : ($call is Operation\Issues\ListLabelsForMilestone::OPERATION_MATCH ? Observable<Schema\Label> : ($call is Operation\Issues\ListLabelsForMilestoneListing::OPERATION_MATCH ? Observable<Schema\Label> : ($call is Operation\Activity\ListRepoNotificationsForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\Thread> : ($call is Operation\Activity\ListRepoNotificationsForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\Thread> : ($call is Operation\Activity\MarkRepoNotificationsAsRead::OPERATION_MATCH ? Schema\Operations\Activity\MarkRepoNotificationsAsRead\Response\ApplicationJson\Accepted|array{code:int} : ($call is Operation\Repos\GetPages::OPERATION_MATCH ?  : ($call is Operation\Repos\UpdateInformationAboutPagesSite::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\CreatePagesSite::OPERATION_MATCH ?  : ($call is Operation\Repos\DeletePagesSite::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\ListPagesBuilds::OPERATION_MATCH ? Observable<Schema\PageBuild> : ($call is Operation\Repos\ListPagesBuildsListing::OPERATION_MATCH ? Observable<Schema\PageBuild> : ($call is Operation\Repos\RequestPagesBuild::OPERATION_MATCH ?  : ($call is Operation\Repos\GetLatestPagesBuild::OPERATION_MATCH ?  : ($call is Operation\Repos\GetPagesBuild::OPERATION_MATCH ?  : ($call is Operation\Repos\CreatePagesDeployment::OPERATION_MATCH ?  : ($call is Operation\Repos\GetPagesHealthCheck::OPERATION_MATCH ? Schema\PagesHealthCheck|Schema\EmptyObject|array{code:int} : ($call is Operation\Repos\EnablePrivateVulnerabilityReporting::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\DisablePrivateVulnerabilityReporting::OPERATION_MATCH ? array{code:int} : ($call is Operation\Projects\ListForRepo::OPERATION_MATCH ? Observable<Schema\Project> : ($call is Operation\Projects\ListForRepoListing::OPERATION_MATCH ? Observable<Schema\Project> : ($call is Operation\Projects\CreateForRepo::OPERATION_MATCH ?  : ($call is Operation\Pulls\List_::OPERATION_MATCH ? Observable<Schema\PullRequestSimple>|array{code:int} : ($call is Operation\Pulls\ListListing::OPERATION_MATCH ? Observable<Schema\PullRequestSimple>|array{code:int} : ($call is Operation\Pulls\Create::OPERATION_MATCH ?  : ($call is Operation\Pulls\ListReviewCommentsForRepo::OPERATION_MATCH ? Observable<Schema\PullRequestReviewComment> : ($call is Operation\Pulls\ListReviewCommentsForRepoListing::OPERATION_MATCH ? Observable<Schema\PullRequestReviewComment> : ($call is Operation\Pulls\GetReviewComment::OPERATION_MATCH ?  : ($call is Operation\Pulls\DeleteReviewComment::OPERATION_MATCH ? array{code:int} : ($call is Operation\Pulls\UpdateReviewComment::OPERATION_MATCH ?  : ($call is Operation\Reactions\ListForPullRequestReviewComment::OPERATION_MATCH ? Observable<Schema\Reaction> : ($call is Operation\Reactions\ListForPullRequestReviewCommentListing::OPERATION_MATCH ? Observable<Schema\Reaction> : ($call is Operation\Reactions\CreateForPullRequestReviewComment::OPERATION_MATCH ?  : ($call is Operation\Reactions\DeleteForPullRequestComment::OPERATION_MATCH ? array{code:int} : ($call is Operation\Pulls\Get::OPERATION_MATCH ? Schema\PullRequest|array{code:int} : ($call is Operation\Pulls\Update::OPERATION_MATCH ?  : ($call is Operation\Codespaces\CreateWithPrForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Pulls\ListReviewComments::OPERATION_MATCH ? Observable<Schema\PullRequestReviewComment> : ($call is Operation\Pulls\ListReviewCommentsListing::OPERATION_MATCH ? Observable<Schema\PullRequestReviewComment> : ($call is Operation\Pulls\CreateReviewComment::OPERATION_MATCH ?  : ($call is Operation\Pulls\CreateReplyForReviewComment::OPERATION_MATCH ?  : ($call is Operation\Pulls\ListCommits::OPERATION_MATCH ? Observable<Schema\Commit> : ($call is Operation\Pulls\ListCommitsListing::OPERATION_MATCH ? Observable<Schema\Commit> : ($call is Operation\Pulls\ListFiles::OPERATION_MATCH ? Observable<Schema\DiffEntry> : ($call is Operation\Pulls\ListFilesListing::OPERATION_MATCH ? Observable<Schema\DiffEntry> : ($call is Operation\Pulls\CheckIfMerged::OPERATION_MATCH ? array{code:int} : ($call is Operation\Pulls\Merge::OPERATION_MATCH ?  : ($call is Operation\Pulls\ListRequestedReviewers::OPERATION_MATCH ?  : ($call is Operation\Pulls\RequestReviewers::OPERATION_MATCH ? Schema\PullRequestSimple|array{code:int} : ($call is Operation\Pulls\RemoveRequestedReviewers::OPERATION_MATCH ?  : ($call is Operation\Pulls\ListReviews::OPERATION_MATCH ? Observable<Schema\PullRequestReview> : ($call is Operation\Pulls\ListReviewsListing::OPERATION_MATCH ? Observable<Schema\PullRequestReview> : ($call is Operation\Pulls\CreateReview::OPERATION_MATCH ?  : ($call is Operation\Pulls\GetReview::OPERATION_MATCH ?  : ($call is Operation\Pulls\UpdateReview::OPERATION_MATCH ?  : ($call is Operation\Pulls\DeletePendingReview::OPERATION_MATCH ?  : ($call is Operation\Pulls\ListCommentsForReview::OPERATION_MATCH ? Observable<Schema\ReviewComment> : ($call is Operation\Pulls\ListCommentsForReviewListing::OPERATION_MATCH ? Observable<Schema\ReviewComment> : ($call is Operation\Pulls\DismissReview::OPERATION_MATCH ?  : ($call is Operation\Pulls\SubmitReview::OPERATION_MATCH ?  : ($call is Operation\Pulls\UpdateBranch::OPERATION_MATCH ?  : ($call is Operation\Repos\GetReadme::OPERATION_MATCH ?  : ($call is Operation\Repos\GetReadmeInDirectory::OPERATION_MATCH ?  : ($call is Operation\Repos\ListReleases::OPERATION_MATCH ? Observable<Schema\Release> : ($call is Operation\Repos\ListReleasesListing::OPERATION_MATCH ? Observable<Schema\Release> : ($call is Operation\Repos\CreateRelease::OPERATION_MATCH ?  : ($call is Operation\Repos\GetReleaseAsset::OPERATION_MATCH ? Schema\ReleaseAsset|array{code:int} : ($call is Operation\Repos\DeleteReleaseAsset::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\UpdateReleaseAsset::OPERATION_MATCH ?  : ($call is Operation\Repos\GenerateReleaseNotes::OPERATION_MATCH ?  : ($call is Operation\Repos\GetLatestRelease::OPERATION_MATCH ?  : ($call is Operation\Repos\GetReleaseByTag::OPERATION_MATCH ?  : ($call is Operation\Repos\GetRelease::OPERATION_MATCH ? Schema\Release|array{code:int} : ($call is Operation\Repos\DeleteRelease::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\UpdateRelease::OPERATION_MATCH ?  : ($call is Operation\Repos\ListReleaseAssets::OPERATION_MATCH ? Observable<Schema\ReleaseAsset> : ($call is Operation\Repos\ListReleaseAssetsListing::OPERATION_MATCH ? Observable<Schema\ReleaseAsset> : ($call is Operation\Repos\UploadReleaseAsset::OPERATION_MATCH ? Schema\ReleaseAsset|array{code:int} : ($call is Operation\Reactions\ListForRelease::OPERATION_MATCH ? Observable<Schema\Reaction> : ($call is Operation\Reactions\ListForReleaseListing::OPERATION_MATCH ? Observable<Schema\Reaction> : ($call is Operation\Reactions\CreateForRelease::OPERATION_MATCH ?  : ($call is Operation\Reactions\DeleteForRelease::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\GetBranchRules::OPERATION_MATCH ? Observable<Schema\RepositoryRuleCreation|Schema\RepositoryRuleUpdate|Schema\RepositoryRuleDeletion|Schema\RepositoryRuleRequiredLinearHistory|Schema\RepositoryRuleRequiredDeployments|Schema\RepositoryRuleRequiredSignatures|Schema\RepositoryRulePullRequest|Schema\RepositoryRuleRequiredStatusChecks|Schema\RepositoryRuleNonFastForward|Schema\RepositoryRuleCommitMessagePattern|Schema\RepositoryRuleCommitAuthorEmailPattern|Schema\RepositoryRuleCommitterEmailPattern|Schema\RepositoryRuleBranchNamePattern|Schema\RepositoryRuleTagNamePattern> : ($call is Operation\Repos\GetBranchRulesListing::OPERATION_MATCH ? Observable<Schema\RepositoryRuleCreation|Schema\RepositoryRuleUpdate|Schema\RepositoryRuleDeletion|Schema\RepositoryRuleRequiredLinearHistory|Schema\RepositoryRuleRequiredDeployments|Schema\RepositoryRuleRequiredSignatures|Schema\RepositoryRulePullRequest|Schema\RepositoryRuleRequiredStatusChecks|Schema\RepositoryRuleNonFastForward|Schema\RepositoryRuleCommitMessagePattern|Schema\RepositoryRuleCommitAuthorEmailPattern|Schema\RepositoryRuleCommitterEmailPattern|Schema\RepositoryRuleBranchNamePattern|Schema\RepositoryRuleTagNamePattern> : ($call is Operation\Repos\GetRepoRulesets::OPERATION_MATCH ? Observable<Schema\RepositoryRuleset> : ($call is Operation\Repos\GetRepoRulesetsListing::OPERATION_MATCH ? Observable<Schema\RepositoryRuleset> : ($call is Operation\Repos\CreateRepoRuleset::OPERATION_MATCH ?  : ($call is Operation\Repos\GetRepoRuleset::OPERATION_MATCH ?  : ($call is Operation\Repos\UpdateRepoRuleset::OPERATION_MATCH ?  : ($call is Operation\Repos\DeleteRepoRuleset::OPERATION_MATCH ? array{code:int} : ($call is Operation\SecretScanning\ListAlertsForRepo::OPERATION_MATCH ? Observable<Schema\SecretScanningAlert>|array{code:int} : ($call is Operation\SecretScanning\ListAlertsForRepoListing::OPERATION_MATCH ? Observable<Schema\SecretScanningAlert>|array{code:int} : ($call is Operation\SecretScanning\GetAlert::OPERATION_MATCH ? Schema\SecretScanningAlert|array{code:int} : ($call is Operation\SecretScanning\UpdateAlert::OPERATION_MATCH ? Schema\SecretScanningAlert|array{code:int} : ($call is Operation\SecretScanning\ListLocationsForAlert::OPERATION_MATCH ? Observable<Schema\SecretScanningLocation>|array{code:int} : ($call is Operation\SecretScanning\ListLocationsForAlertListing::OPERATION_MATCH ? Observable<Schema\SecretScanningLocation>|array{code:int} : ($call is Operation\SecurityAdvisories\ListRepositoryAdvisories::OPERATION_MATCH ? Observable<Schema\RepositoryAdvisory> : ($call is Operation\SecurityAdvisories\CreateRepositoryAdvisory::OPERATION_MATCH ?  : ($call is Operation\SecurityAdvisories\CreatePrivateVulnerabilityReport::OPERATION_MATCH ?  : ($call is Operation\SecurityAdvisories\GetRepositoryAdvisory::OPERATION_MATCH ?  : ($call is Operation\SecurityAdvisories\UpdateRepositoryAdvisory::OPERATION_MATCH ?  : ($call is Operation\SecurityAdvisories\CreateRepositoryAdvisoryCveRequest::OPERATION_MATCH ?  : ($call is Operation\Activity\ListStargazersForRepo::OPERATION_MATCH ?  : ($call is Operation\Repos\GetCodeFrequencyStats::OPERATION_MATCH ? Observable<int>|Schema\Operations\Repos\GetCodeFrequencyStats\Response\ApplicationJson\Accepted\Application\Json|array{code:int} : ($call is Operation\Repos\GetCommitActivityStats::OPERATION_MATCH ? Observable<Schema\CommitActivity>|Schema\Operations\Repos\GetCommitActivityStats\Response\ApplicationJson\Accepted\Application\Json|array{code:int} : ($call is Operation\Repos\GetContributorsStats::OPERATION_MATCH ? Observable<Schema\ContributorActivity>|Schema\Operations\Repos\GetContributorsStats\Response\ApplicationJson\Accepted\Application\Json|array{code:int} : ($call is Operation\Repos\GetParticipationStats::OPERATION_MATCH ?  : ($call is Operation\Repos\GetPunchCardStats::OPERATION_MATCH ? Observable<int>|array{code:int} : ($call is Operation\Repos\CreateCommitStatus::OPERATION_MATCH ?  : ($call is Operation\Activity\ListWatchersForRepo::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Activity\ListWatchersForRepoListing::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Activity\GetRepoSubscription::OPERATION_MATCH ? Schema\RepositorySubscription|array{code:int} : ($call is Operation\Activity\SetRepoSubscription::OPERATION_MATCH ?  : ($call is Operation\Activity\DeleteRepoSubscription::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\ListTags::OPERATION_MATCH ? Observable<Schema\Tag> : ($call is Operation\Repos\ListTagsListing::OPERATION_MATCH ? Observable<Schema\Tag> : ($call is Operation\Repos\ListTagProtection::OPERATION_MATCH ? Observable<Schema\TagProtection> : ($call is Operation\Repos\CreateTagProtection::OPERATION_MATCH ?  : ($call is Operation\Repos\DeleteTagProtection::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\DownloadTarballArchive::OPERATION_MATCH ? array{code:int,location:string} : ($call is Operation\Repos\DownloadTarballArchiveStreaming::OPERATION_MATCH ? Observable<string> : ($call is Operation\Repos\ListTeams::OPERATION_MATCH ? Observable<Schema\Team> : ($call is Operation\Repos\ListTeamsListing::OPERATION_MATCH ? Observable<Schema\Team> : ($call is Operation\Repos\GetAllTopics::OPERATION_MATCH ?  : ($call is Operation\Repos\ReplaceAllTopics::OPERATION_MATCH ?  : ($call is Operation\Repos\GetClones::OPERATION_MATCH ?  : ($call is Operation\Repos\GetTopPaths::OPERATION_MATCH ? Observable<Schema\ContentTraffic> : ($call is Operation\Repos\GetTopReferrers::OPERATION_MATCH ? Observable<Schema\ReferrerTraffic> : ($call is Operation\Repos\GetViews::OPERATION_MATCH ?  : ($call is Operation\Repos\Transfer::OPERATION_MATCH ?  : ($call is Operation\Repos\CheckVulnerabilityAlerts::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\EnableVulnerabilityAlerts::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\DisableVulnerabilityAlerts::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\DownloadZipballArchive::OPERATION_MATCH ? array{code:int,location:string} : ($call is Operation\Repos\DownloadZipballArchiveStreaming::OPERATION_MATCH ? Observable<string> : ($call is Operation\Repos\CreateUsingTemplate::OPERATION_MATCH ?  : ($call is Operation\Repos\ListPublic::OPERATION_MATCH ? Observable<Schema\MinimalRepository>|array{code:int} : ($call is Operation\Actions\ListEnvironmentSecrets::OPERATION_MATCH ?  : ($call is Operation\Actions\GetEnvironmentPublicKey::OPERATION_MATCH ?  : ($call is Operation\Actions\GetEnvironmentSecret::OPERATION_MATCH ?  : ($call is Operation\Actions\CreateOrUpdateEnvironmentSecret::OPERATION_MATCH ? Schema\EmptyObject|array{code:int} : ($call is Operation\Actions\DeleteEnvironmentSecret::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\ListEnvironmentVariables::OPERATION_MATCH ?  : ($call is Operation\Actions\CreateEnvironmentVariable::OPERATION_MATCH ?  : ($call is Operation\Actions\GetEnvironmentVariable::OPERATION_MATCH ?  : ($call is Operation\Actions\DeleteEnvironmentVariable::OPERATION_MATCH ? array{code:int} : ($call is Operation\Actions\UpdateEnvironmentVariable::OPERATION_MATCH ? array{code:int} : ($call is Operation\Search\Code::OPERATION_MATCH ? Schema\Operations\Search\Code\Response\ApplicationJson\Ok|array{code:int} : ($call is Operation\Search\Commits::OPERATION_MATCH ? Schema\Operations\Search\Commits\Response\ApplicationJson\Ok|array{code:int} : ($call is Operation\Search\IssuesAndPullRequests::OPERATION_MATCH ? Schema\Operations\Search\IssuesAndPullRequests\Response\ApplicationJson\Ok|array{code:int} : ($call is Operation\Search\Labels::OPERATION_MATCH ? Schema\Operations\Search\Labels\Response\ApplicationJson\Ok|array{code:int} : ($call is Operation\Search\Repos::OPERATION_MATCH ? Schema\Operations\Search\Repos\Response\ApplicationJson\Ok|array{code:int} : ($call is Operation\Search\Topics::OPERATION_MATCH ? Schema\Operations\Search\Topics\Response\ApplicationJson\Ok|array{code:int} : ($call is Operation\Search\Users::OPERATION_MATCH ? Schema\Operations\Search\Users\Response\ApplicationJson\Ok|array{code:int} : ($call is Operation\Teams\GetLegacy::OPERATION_MATCH ?  : ($call is Operation\Teams\DeleteLegacy::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\UpdateLegacy::OPERATION_MATCH ?  : ($call is Operation\Teams\ListDiscussionsLegacy::OPERATION_MATCH ? Observable<Schema\TeamDiscussion> : ($call is Operation\Teams\ListDiscussionsLegacyListing::OPERATION_MATCH ? Observable<Schema\TeamDiscussion> : ($call is Operation\Teams\CreateDiscussionLegacy::OPERATION_MATCH ?  : ($call is Operation\Teams\GetDiscussionLegacy::OPERATION_MATCH ?  : ($call is Operation\Teams\DeleteDiscussionLegacy::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\UpdateDiscussionLegacy::OPERATION_MATCH ?  : ($call is Operation\Teams\ListDiscussionCommentsLegacy::OPERATION_MATCH ? Observable<Schema\TeamDiscussionComment> : ($call is Operation\Teams\ListDiscussionCommentsLegacyListing::OPERATION_MATCH ? Observable<Schema\TeamDiscussionComment> : ($call is Operation\Teams\CreateDiscussionCommentLegacy::OPERATION_MATCH ?  : ($call is Operation\Teams\GetDiscussionCommentLegacy::OPERATION_MATCH ?  : ($call is Operation\Teams\DeleteDiscussionCommentLegacy::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\UpdateDiscussionCommentLegacy::OPERATION_MATCH ?  : ($call is Operation\Reactions\ListForTeamDiscussionCommentLegacy::OPERATION_MATCH ? Observable<Schema\Reaction> : ($call is Operation\Reactions\ListForTeamDiscussionCommentLegacyListing::OPERATION_MATCH ? Observable<Schema\Reaction> : ($call is Operation\Reactions\CreateForTeamDiscussionCommentLegacy::OPERATION_MATCH ?  : ($call is Operation\Reactions\ListForTeamDiscussionLegacy::OPERATION_MATCH ? Observable<Schema\Reaction> : ($call is Operation\Reactions\ListForTeamDiscussionLegacyListing::OPERATION_MATCH ? Observable<Schema\Reaction> : ($call is Operation\Reactions\CreateForTeamDiscussionLegacy::OPERATION_MATCH ?  : ($call is Operation\Teams\ListPendingInvitationsLegacy::OPERATION_MATCH ? Observable<Schema\OrganizationInvitation> : ($call is Operation\Teams\ListPendingInvitationsLegacyListing::OPERATION_MATCH ? Observable<Schema\OrganizationInvitation> : ($call is Operation\Teams\ListMembersLegacy::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Teams\ListMembersLegacyListing::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Teams\GetMemberLegacy::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\AddMemberLegacy::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\RemoveMemberLegacy::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\GetMembershipForUserLegacy::OPERATION_MATCH ?  : ($call is Operation\Teams\AddOrUpdateMembershipForUserLegacy::OPERATION_MATCH ? Schema\TeamMembership|array{code:int} : ($call is Operation\Teams\RemoveMembershipForUserLegacy::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\ListProjectsLegacy::OPERATION_MATCH ? Observable<Schema\TeamProject> : ($call is Operation\Teams\ListProjectsLegacyListing::OPERATION_MATCH ? Observable<Schema\TeamProject> : ($call is Operation\Teams\CheckPermissionsForProjectLegacy::OPERATION_MATCH ? Schema\TeamProject|array{code:int} : ($call is Operation\Teams\AddOrUpdateProjectPermissionsLegacy::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\RemoveProjectLegacy::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\ListReposLegacy::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Teams\ListReposLegacyListing::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Teams\CheckPermissionsForRepoLegacy::OPERATION_MATCH ? Schema\TeamRepository|array{code:int} : ($call is Operation\Teams\AddOrUpdateRepoPermissionsLegacy::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\RemoveRepoLegacy::OPERATION_MATCH ? array{code:int} : ($call is Operation\Teams\ListChildLegacy::OPERATION_MATCH ? Observable<Schema\Team> : ($call is Operation\Teams\ListChildLegacyListing::OPERATION_MATCH ? Observable<Schema\Team> : ($call is Operation\Users\GetAuthenticated::OPERATION_MATCH ? Schema\PrivateUser|Schema\PublicUser|array{code:int} : ($call is Operation\Users\UpdateAuthenticated::OPERATION_MATCH ? Schema\PrivateUser|array{code:int} : ($call is Operation\Users\ListBlockedByAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\SimpleUser>|array{code:int} : ($call is Operation\Users\ListBlockedByAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\SimpleUser>|array{code:int} : ($call is Operation\Users\CheckBlocked::OPERATION_MATCH ? array{code:int} : ($call is Operation\Users\Block::OPERATION_MATCH ? array{code:int} : ($call is Operation\Users\Unblock::OPERATION_MATCH ? array{code:int} : ($call is Operation\Codespaces\ListForAuthenticatedUser::OPERATION_MATCH ? Schema\Operations\Codespaces\ListForAuthenticatedUser\Response\ApplicationJson\Ok\Application\Json|array{code:int} : ($call is Operation\Codespaces\CreateForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Codespaces\ListSecretsForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Codespaces\GetPublicKeyForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Codespaces\GetSecretForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Codespaces\CreateOrUpdateSecretForAuthenticatedUser::OPERATION_MATCH ? Schema\EmptyObject|array{code:int} : ($call is Operation\Codespaces\DeleteSecretForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Codespaces\ListRepositoriesForSecretForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Codespaces\SetRepositoriesForSecretForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Codespaces\AddRepositoryForSecretForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Codespaces\RemoveRepositoryForSecretForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Codespaces\GetForAuthenticatedUser::OPERATION_MATCH ? Schema\Codespace|array{code:int} : ($call is Operation\Codespaces\DeleteForAuthenticatedUser::OPERATION_MATCH ? Schema\Operations\Codespaces\DeleteForAuthenticatedUser\Response\ApplicationJson\Accepted\Application\Json|array{code:int} : ($call is Operation\Codespaces\UpdateForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Codespaces\ExportForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Codespaces\GetExportDetailsForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Codespaces\CodespaceMachinesForAuthenticatedUser::OPERATION_MATCH ? Schema\Operations\Codespaces\CodespaceMachinesForAuthenticatedUser\Response\ApplicationJson\Ok\Application\Json|array{code:int} : ($call is Operation\Codespaces\PublishForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Codespaces\StartForAuthenticatedUser::OPERATION_MATCH ? Schema\Codespace|array{code:int} : ($call is Operation\Codespaces\StopForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Packages\ListDockerMigrationConflictingPackagesForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\Package> : ($call is Operation\Users\SetPrimaryEmailVisibilityForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\Email>|array{code:int} : ($call is Operation\Users\ListEmailsForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\Email>|array{code:int} : ($call is Operation\Users\ListEmailsForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\Email>|array{code:int} : ($call is Operation\Users\AddEmailForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\Email>|array{code:int} : ($call is Operation\Users\DeleteEmailForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Users\ListFollowersForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\SimpleUser>|array{code:int} : ($call is Operation\Users\ListFollowersForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\SimpleUser>|array{code:int} : ($call is Operation\Users\ListFollowedByAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\SimpleUser>|array{code:int} : ($call is Operation\Users\ListFollowedByAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\SimpleUser>|array{code:int} : ($call is Operation\Users\CheckPersonIsFollowedByAuthenticated::OPERATION_MATCH ? array{code:int} : ($call is Operation\Users\Follow::OPERATION_MATCH ? array{code:int} : ($call is Operation\Users\Unfollow::OPERATION_MATCH ? array{code:int} : ($call is Operation\Users\ListGpgKeysForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\GpgKey>|array{code:int} : ($call is Operation\Users\ListGpgKeysForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\GpgKey>|array{code:int} : ($call is Operation\Users\CreateGpgKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\GpgKey|array{code:int} : ($call is Operation\Users\GetGpgKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\GpgKey|array{code:int} : ($call is Operation\Users\DeleteGpgKeyForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Apps\ListInstallationsForAuthenticatedUser::OPERATION_MATCH ? Schema\Operations\Apps\ListInstallationsForAuthenticatedUser\Response\ApplicationJson\Ok\Application\Json|array{code:int} : ($call is Operation\Apps\ListInstallationReposForAuthenticatedUser::OPERATION_MATCH ? Schema\Operations\Apps\ListInstallationReposForAuthenticatedUser\Response\ApplicationJson\Ok|array{code:int} : ($call is Operation\Apps\AddRepoToInstallationForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Apps\RemoveRepoFromInstallationForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Interactions\GetRestrictionsForAuthenticatedUser::OPERATION_MATCH ? Schema\InteractionLimitResponse|Schema\Operations\Interactions\GetRestrictionsForAuthenticatedUser\Response\ApplicationJson\Ok\Application\Json\One|array{code:int} : ($call is Operation\Interactions\SetRestrictionsForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Interactions\RemoveRestrictionsForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Issues\ListForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\Issue>|array{code:int} : ($call is Operation\Issues\ListForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\Issue>|array{code:int} : ($call is Operation\Users\ListPublicSshKeysForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\Key>|array{code:int} : ($call is Operation\Users\ListPublicSshKeysForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\Key>|array{code:int} : ($call is Operation\Users\CreatePublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\Key|array{code:int} : ($call is Operation\Users\GetPublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\Key|array{code:int} : ($call is Operation\Users\DeletePublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Apps\ListSubscriptionsForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\UserMarketplacePurchase>|array{code:int} : ($call is Operation\Apps\ListSubscriptionsForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\UserMarketplacePurchase>|array{code:int} : ($call is Operation\Apps\ListSubscriptionsForAuthenticatedUserStubbed::OPERATION_MATCH ? Observable<Schema\UserMarketplacePurchase>|array{code:int} : ($call is Operation\Apps\ListSubscriptionsForAuthenticatedUserStubbedListing::OPERATION_MATCH ? Observable<Schema\UserMarketplacePurchase>|array{code:int} : ($call is Operation\Orgs\ListMembershipsForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\OrgMembership>|array{code:int} : ($call is Operation\Orgs\ListMembershipsForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\OrgMembership>|array{code:int} : ($call is Operation\Orgs\GetMembershipForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Orgs\UpdateMembershipForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Migrations\ListForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\Migration>|array{code:int} : ($call is Operation\Migrations\ListForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\Migration>|array{code:int} : ($call is Operation\Migrations\StartForAuthenticatedUser::OPERATION_MATCH ? Schema\Migration|array{code:int} : ($call is Operation\Migrations\GetStatusForAuthenticatedUser::OPERATION_MATCH ? Schema\Migration|array{code:int} : ($call is Operation\Migrations\GetArchiveForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Migrations\DeleteArchiveForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Migrations\UnlockRepoForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Migrations\ListReposForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Migrations\ListReposForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Orgs\ListForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\OrganizationSimple>|array{code:int} : ($call is Operation\Orgs\ListForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\OrganizationSimple>|array{code:int} : ($call is Operation\Packages\ListPackagesForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\Package>|array{code:int} : ($call is Operation\Packages\ListPackagesForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\Package>|array{code:int} : ($call is Operation\Packages\GetPackageForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Packages\DeletePackageForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Packages\RestorePackageForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Packages\GetAllPackageVersionsForPackageOwnedByAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\PackageVersion> : ($call is Operation\Packages\GetAllPackageVersionsForPackageOwnedByAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\PackageVersion> : ($call is Operation\Packages\GetPackageVersionForAuthenticatedUser::OPERATION_MATCH ?  : ($call is Operation\Packages\DeletePackageVersionForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Packages\RestorePackageVersionForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Projects\CreateForAuthenticatedUser::OPERATION_MATCH ? Schema\Project|array{code:int} : ($call is Operation\Users\ListPublicEmailsForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\Email>|array{code:int} : ($call is Operation\Users\ListPublicEmailsForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\Email>|array{code:int} : ($call is Operation\Repos\ListForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\Repository>|array{code:int} : ($call is Operation\Repos\ListForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\Repository>|array{code:int} : ($call is Operation\Repos\CreateForAuthenticatedUser::OPERATION_MATCH ? Schema\Repository|array{code:int} : ($call is Operation\Repos\ListInvitationsForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\RepositoryInvitation>|array{code:int} : ($call is Operation\Repos\ListInvitationsForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\RepositoryInvitation>|array{code:int} : ($call is Operation\Repos\DeclineInvitationForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Repos\AcceptInvitationForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Users\ListSocialAccountsForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\SocialAccount>|array{code:int} : ($call is Operation\Users\ListSocialAccountsForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\SocialAccount>|array{code:int} : ($call is Operation\Users\AddSocialAccountForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\SocialAccount>|array{code:int} : ($call is Operation\Users\DeleteSocialAccountForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Users\ListSshSigningKeysForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\SshSigningKey>|array{code:int} : ($call is Operation\Users\ListSshSigningKeysForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\SshSigningKey>|array{code:int} : ($call is Operation\Users\CreateSshSigningKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\SshSigningKey|array{code:int} : ($call is Operation\Users\GetSshSigningKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\SshSigningKey|array{code:int} : ($call is Operation\Users\DeleteSshSigningKeyForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Activity\ListReposStarredByAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\Repository>|array{code:int} : ($call is Operation\Activity\ListReposStarredByAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\Repository>|array{code:int} : ($call is Operation\Activity\CheckRepoIsStarredByAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Activity\StarRepoForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Activity\UnstarRepoForAuthenticatedUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Activity\ListWatchedReposForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\MinimalRepository>|array{code:int} : ($call is Operation\Activity\ListWatchedReposForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\MinimalRepository>|array{code:int} : ($call is Operation\Teams\ListForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\TeamFull>|array{code:int} : ($call is Operation\Teams\ListForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\TeamFull>|array{code:int} : ($call is Operation\Users\List_::OPERATION_MATCH ? Observable<Schema\SimpleUser>|array{code:int} : ($call is Operation\Users\GetByUsername::OPERATION_MATCH ?  : ($call is Operation\Packages\ListDockerMigrationConflictingPackagesForUser::OPERATION_MATCH ? Observable<Schema\Package> : ($call is Operation\Activity\ListEventsForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\Event> : ($call is Operation\Activity\ListEventsForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\Event> : ($call is Operation\Activity\ListOrgEventsForAuthenticatedUser::OPERATION_MATCH ? Observable<Schema\Event> : ($call is Operation\Activity\ListOrgEventsForAuthenticatedUserListing::OPERATION_MATCH ? Observable<Schema\Event> : ($call is Operation\Activity\ListPublicEventsForUser::OPERATION_MATCH ? Observable<Schema\Event> : ($call is Operation\Activity\ListPublicEventsForUserListing::OPERATION_MATCH ? Observable<Schema\Event> : ($call is Operation\Users\ListFollowersForUser::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Users\ListFollowersForUserListing::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Users\ListFollowingForUser::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Users\ListFollowingForUserListing::OPERATION_MATCH ? Observable<Schema\SimpleUser> : ($call is Operation\Users\CheckFollowingForUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Gists\ListForUser::OPERATION_MATCH ? Observable<Schema\BaseGist> : ($call is Operation\Gists\ListForUserListing::OPERATION_MATCH ? Observable<Schema\BaseGist> : ($call is Operation\Users\ListGpgKeysForUser::OPERATION_MATCH ? Observable<Schema\GpgKey> : ($call is Operation\Users\ListGpgKeysForUserListing::OPERATION_MATCH ? Observable<Schema\GpgKey> : ($call is Operation\Users\GetContextForUser::OPERATION_MATCH ?  : ($call is Operation\Apps\GetUserInstallation::OPERATION_MATCH ?  : ($call is Operation\Users\ListPublicKeysForUser::OPERATION_MATCH ? Observable<Schema\KeySimple> : ($call is Operation\Users\ListPublicKeysForUserListing::OPERATION_MATCH ? Observable<Schema\KeySimple> : ($call is Operation\Orgs\ListForUser::OPERATION_MATCH ? Observable<Schema\OrganizationSimple> : ($call is Operation\Orgs\ListForUserListing::OPERATION_MATCH ? Observable<Schema\OrganizationSimple> : ($call is Operation\Packages\ListPackagesForUser::OPERATION_MATCH ? Observable<Schema\Package>|array{code:int} : ($call is Operation\Packages\ListPackagesForUserListing::OPERATION_MATCH ? Observable<Schema\Package>|array{code:int} : ($call is Operation\Packages\GetPackageForUser::OPERATION_MATCH ?  : ($call is Operation\Packages\DeletePackageForUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Packages\RestorePackageForUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Packages\GetAllPackageVersionsForPackageOwnedByUser::OPERATION_MATCH ? Observable<Schema\PackageVersion> : ($call is Operation\Packages\GetPackageVersionForUser::OPERATION_MATCH ?  : ($call is Operation\Packages\DeletePackageVersionForUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Packages\RestorePackageVersionForUser::OPERATION_MATCH ? array{code:int} : ($call is Operation\Projects\ListForUser::OPERATION_MATCH ? Observable<Schema\Project> : ($call is Operation\Projects\ListForUserListing::OPERATION_MATCH ? Observable<Schema\Project> : ($call is Operation\Activity\ListReceivedEventsForUser::OPERATION_MATCH ? Observable<Schema\Event> : ($call is Operation\Activity\ListReceivedEventsForUserListing::OPERATION_MATCH ? Observable<Schema\Event> : ($call is Operation\Activity\ListReceivedPublicEventsForUser::OPERATION_MATCH ? Observable<Schema\Event> : ($call is Operation\Activity\ListReceivedPublicEventsForUserListing::OPERATION_MATCH ? Observable<Schema\Event> : ($call is Operation\Repos\ListForUser::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Repos\ListForUserListing::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Billing\GetGithubActionsBillingUser::OPERATION_MATCH ?  : ($call is Operation\Billing\GetGithubPackagesBillingUser::OPERATION_MATCH ?  : ($call is Operation\Billing\GetSharedStorageBillingUser::OPERATION_MATCH ?  : ($call is Operation\Users\ListSocialAccountsForUser::OPERATION_MATCH ? Observable<Schema\SocialAccount> : ($call is Operation\Users\ListSocialAccountsForUserListing::OPERATION_MATCH ? Observable<Schema\SocialAccount> : ($call is Operation\Users\ListSshSigningKeysForUser::OPERATION_MATCH ? Observable<Schema\SshSigningKey> : ($call is Operation\Users\ListSshSigningKeysForUserListing::OPERATION_MATCH ? Observable<Schema\SshSigningKey> : ($call is Operation\Activity\ListReposStarredByUser::OPERATION_MATCH ?  : ($call is Operation\Activity\ListReposWatchedByUser::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Activity\ListReposWatchedByUserListing::OPERATION_MATCH ? Observable<Schema\MinimalRepository> : ($call is Operation\Meta\GetAllVersions::OPERATION_MATCH ? Observable<string
     */
    // phpcs:enable
    public function call(string $call, array $params = []): Root|iterable|GlobalAdvisory|Integration|WebhookConfig|HookDelivery|Json|Installation|InstallationToken|Authorization|ClassroomAssignment|Classroom|CodeOfConduct|\ApiClients\Client\GitHub\Schema\Operations\Emojis\Get\Response\ApplicationJson\Ok\Application\Json|Feed|GistSimple|GistComment|BaseGist|GitignoreTemplate|Ok|License|string|MarketplacePurchase|ApiOverview|BasicError|Accepted|Thread|ThreadSubscription|ResponseInterface|OrganizationFull|\ApiClients\Client\GitHub\Schema\Operations\Orgs\Delete\Response\ApplicationJson\Accepted\Application\Json|ActionsCacheUsageOrgEnterprise|\ApiClients\Client\GitHub\Schema\Operations\Actions\GetActionsCacheUsageByRepoForOrg\Response\ApplicationJson\Ok|OidcCustomSub|EmptyObject|ActionsOrganizationPermissions|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization\Response\ApplicationJson\Ok|SelectedActions|ActionsGetDefaultWorkflowPermissions|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListSelfHostedRunnersForOrg\Response\ApplicationJson\Ok|Created|AuthenticationToken|Runner|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListLabelsForSelfHostedRunnerForOrg\Response\ApplicationJson\Ok|\ApiClients\Client\GitHub\Schema\Operations\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForOrg\Response\ApplicationJson\Ok\Application\Json|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListOrgSecrets\Response\ApplicationJson\Ok|ActionsPublicKey|OrganizationActionsSecret|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListSelectedReposForOrgSecret\Response\ApplicationJson\Ok|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListOrgVariables\Response\ApplicationJson\Ok|OrganizationActionsVariable|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListSelectedReposForOrgVariable\Response\ApplicationJson\Ok\Application\Json|\ApiClients\Client\GitHub\Schema\Operations\Codespaces\ListInOrganization\Response\ApplicationJson\Ok|\ApiClients\Client\GitHub\Schema\Operations\Codespaces\ListOrgSecrets\Response\ApplicationJson\Ok|CodespacesPublicKey|CodespacesOrgSecret|\ApiClients\Client\GitHub\Schema\Operations\Codespaces\ListSelectedReposForOrgSecret\Response\ApplicationJson\Ok\Application\Json|CopilotOrganizationDetails|\ApiClients\Client\GitHub\Schema\Operations\Copilot\ListCopilotSeats\Response\ApplicationJson\Ok|\ApiClients\Client\GitHub\Schema\Operations\Copilot\AddCopilotForBusinessSeatsForTeams\Response\ApplicationJson\Created|\ApiClients\Client\GitHub\Schema\Operations\Copilot\CancelCopilotSeatAssignmentForTeams\Response\ApplicationJson\Ok|\ApiClients\Client\GitHub\Schema\Operations\Copilot\AddCopilotForBusinessSeatsForUsers\Response\ApplicationJson\Created\Application\Json|\ApiClients\Client\GitHub\Schema\Operations\Copilot\CancelCopilotSeatAssignmentForUsers\Response\ApplicationJson\Ok\Application\Json|\ApiClients\Client\GitHub\Schema\Operations\Dependabot\ListOrgSecrets\Response\ApplicationJson\Ok|DependabotPublicKey|OrganizationDependabotSecret|\ApiClients\Client\GitHub\Schema\Operations\Dependabot\ListSelectedReposForOrgSecret\Response\ApplicationJson\Ok\Application\Json|OrgHook|\ApiClients\Client\GitHub\Schema\Operations\Orgs\RedeliverWebhookDelivery\Response\ApplicationJson\Accepted\Application\Json|\ApiClients\Client\GitHub\Schema\Operations\Orgs\ListAppInstallations\Response\ApplicationJson\Ok|InteractionLimitResponse|One|OrganizationInvitation|\ApiClients\Client\GitHub\Schema\Operations\Codespaces\GetCodespacesForUserInOrg\Response\ApplicationJson\Ok\Application\Json|\ApiClients\Client\GitHub\Schema\Operations\Codespaces\DeleteFromOrganization\Response\ApplicationJson\Accepted\Application\Json|Codespace|CopilotSeatDetails|OrgMembership|Migration|\ApiClients\Client\GitHub\Schema\Operations\Orgs\ConvertMemberToOutsideCollaborator\Response\ApplicationJson\Accepted\Application\Json|Package|PackageVersion|\ApiClients\Client\GitHub\Schema\Operations\Orgs\ReviewPatGrantRequestsInBulk\Response\ApplicationJson\Accepted\Application\Json|\ApiClients\Client\GitHub\Schema\Operations\Orgs\UpdatePatAccesses\Response\ApplicationJson\Accepted\Application\Json|Project|Repository|RepositoryRuleset|ActionsBillingUsage|PackagesBillingUsage|CombinedBillingUsage|TeamFull|TeamDiscussion|TeamDiscussionComment|Reaction|TeamMembership|TeamProject|TeamRepository|ProjectCard|\ApiClients\Client\GitHub\Schema\Operations\Projects\MoveCard\Response\ApplicationJson\Created\Application\Json|ProjectColumn|\ApiClients\Client\GitHub\Schema\Operations\Projects\MoveColumn\Response\ApplicationJson\Created\Application\Json|ProjectCollaboratorPermission|RateLimitOverview|FullRepository|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListArtifactsForRepo\Response\ApplicationJson\Ok|Artifact|ActionsCacheUsageByRepository|ActionsCacheList|Job|OidcCustomSubRepo|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListRepoOrganizationSecrets\Response\ApplicationJson\Ok|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListRepoOrganizationVariables\Response\ApplicationJson\Ok|ActionsRepositoryPermissions|ActionsWorkflowAccessToRepository|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListSelfHostedRunnersForRepo\Response\ApplicationJson\Ok\Application\Json|\ApiClients\Client\GitHub\Schema\Operations\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForRepo\Response\ApplicationJson\Ok\Application\Json|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListWorkflowRunsForRepo\Response\ApplicationJson\Ok|WorkflowRun|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListWorkflowRunArtifacts\Response\ApplicationJson\Ok\Application\Json|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListJobsForWorkflowRunAttempt\Response\ApplicationJson\Ok|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListJobsForWorkflowRun\Response\ApplicationJson\Ok\Application\Json|WorkflowRunUsage|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListRepoSecrets\Response\ApplicationJson\Ok\Application\Json|ActionsSecret|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListRepoVariables\Response\ApplicationJson\Ok\Application\Json|ActionsVariable|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListRepoWorkflows\Response\ApplicationJson\Ok|Workflow|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListWorkflowRuns\Response\ApplicationJson\Ok\Application\Json|WorkflowUsage|Autolink|CheckAutomatedSecurityFixes|BranchWithProtection|BranchProtection|ProtectedBranch|ProtectedBranchAdminEnforced|ProtectedBranchPullRequestReview|StatusCheckPolicy|BranchRestrictionPolicy|CheckRun|CheckSuite|CheckSuitePreference|\ApiClients\Client\GitHub\Schema\Operations\Checks\ListForSuite\Response\ApplicationJson\Ok|CodeScanningAlert|CodeScanningAnalysis|CodeScanningAnalysisDeletion|CodeScanningCodeqlDatabase|CodeScanningDefaultSetup|CodeScanningDefaultSetupUpdateResponse|CodeScanningSarifsReceipt|CodeScanningSarifsStatus|CodeownersErrors|\ApiClients\Client\GitHub\Schema\Operations\Codespaces\ListInRepositoryForAuthenticatedUser\Response\ApplicationJson\Ok\Application\Json|\ApiClients\Client\GitHub\Schema\Operations\Codespaces\ListDevcontainersInRepositoryForAuthenticatedUser\Response\ApplicationJson\Ok|\ApiClients\Client\GitHub\Schema\Operations\Codespaces\RepoMachinesForAuthenticatedUser\Response\ApplicationJson\Ok|\ApiClients\Client\GitHub\Schema\Operations\Codespaces\PreFlightWithRepoForAuthenticatedUser\Response\ApplicationJson\Ok|\ApiClients\Client\GitHub\Schema\Operations\Codespaces\ListRepoSecrets\Response\ApplicationJson\Ok|RepoCodespacesSecret|RepositoryInvitation|RepositoryCollaboratorPermission|CommitComment|Commit|\ApiClients\Client\GitHub\Schema\Operations\Checks\ListForRef\Response\ApplicationJson\Ok\Application\Json|\ApiClients\Client\GitHub\Schema\Operations\Checks\ListSuitesForRef\Response\ApplicationJson\Ok|CombinedCommitStatus|CommunityProfile|CommitComparison|ContentDirectory|ContentFile|ContentSymlink|ContentSubmodule|FileCommit|DependabotAlert|\ApiClients\Client\GitHub\Schema\Operations\Dependabot\ListRepoSecrets\Response\ApplicationJson\Ok|DependabotSecret|DependencyGraphSpdxSbom|\ApiClients\Client\GitHub\Schema\Operations\DependencyGraph\CreateRepositorySnapshot\Response\ApplicationJson\Created|Deployment|\ApiClients\Client\GitHub\Schema\Operations\Repos\CreateDeployment\Response\ApplicationJson\Accepted\Application\Json|DeploymentStatus|\ApiClients\Client\GitHub\Schema\Operations\Repos\GetAllEnvironments\Response\ApplicationJson\Ok|Environment|\ApiClients\Client\GitHub\Schema\Operations\Repos\ListDeploymentBranchPolicies\Response\ApplicationJson\Ok|DeploymentBranchPolicy|\ApiClients\Client\GitHub\Schema\Operations\Repos\GetAllDeploymentProtectionRules\Response\ApplicationJson\Ok|DeploymentProtectionRule|\ApiClients\Client\GitHub\Schema\Operations\Repos\ListCustomDeploymentRuleIntegrations\Response\ApplicationJson\Ok|ShortBlob|Blob|GitCommit|GitRef|GitTag|GitTree|Hook|\ApiClients\Client\GitHub\Schema\Operations\Repos\RedeliverWebhookDelivery\Response\ApplicationJson\Accepted\Application\Json|Import|PorterAuthor|\ApiClients\Client\GitHub\Schema\Operations\Interactions\GetRestrictionsForRepo\Response\ApplicationJson\Ok\Application\Json\One|Issue|IssueComment|IssueEvent|DeployKey|Label|Language|LicenseContent|MergedUpstream|Milestone|\ApiClients\Client\GitHub\Schema\Operations\Activity\MarkRepoNotificationsAsRead\Response\ApplicationJson\Accepted|Page|PageBuildStatus|PageBuild|PageDeployment|PagesHealthCheck|PullRequest|PullRequestReviewComment|PullRequestMergeResult|PullRequestReviewRequest|PullRequestSimple|PullRequestReview|\ApiClients\Client\GitHub\Schema\Operations\Pulls\UpdateBranch\Response\ApplicationJson\Accepted\Application\Json|Release|ReleaseAsset|ReleaseNotesContent|SecretScanningAlert|RepositoryAdvisory|\ApiClients\Client\GitHub\Schema\Operations\SecurityAdvisories\CreateRepositoryAdvisoryCveRequest\Response\ApplicationJson\Accepted\Application\Json|SimpleUser|Stargazer|\ApiClients\Client\GitHub\Schema\Operations\Repos\GetCodeFrequencyStats\Response\ApplicationJson\Accepted\Application\Json|\ApiClients\Client\GitHub\Schema\Operations\Repos\GetCommitActivityStats\Response\ApplicationJson\Accepted\Application\Json|\ApiClients\Client\GitHub\Schema\Operations\Repos\GetContributorsStats\Response\ApplicationJson\Accepted\Application\Json|ParticipationStats|Status|RepositorySubscription|TagProtection|Topic|CloneTraffic|ViewTraffic|MinimalRepository|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListEnvironmentSecrets\Response\ApplicationJson\Ok\Application\Json|\ApiClients\Client\GitHub\Schema\Operations\Actions\ListEnvironmentVariables\Response\ApplicationJson\Ok\Application\Json|\ApiClients\Client\GitHub\Schema\Operations\Search\Code\Response\ApplicationJson\Ok|\ApiClients\Client\GitHub\Schema\Operations\Search\Commits\Response\ApplicationJson\Ok|\ApiClients\Client\GitHub\Schema\Operations\Search\IssuesAndPullRequests\Response\ApplicationJson\Ok|\ApiClients\Client\GitHub\Schema\Operations\Search\Labels\Response\ApplicationJson\Ok|\ApiClients\Client\GitHub\Schema\Operations\Search\Repos\Response\ApplicationJson\Ok|\ApiClients\Client\GitHub\Schema\Operations\Search\Topics\Response\ApplicationJson\Ok|\ApiClients\Client\GitHub\Schema\Operations\Search\Users\Response\ApplicationJson\Ok|PrivateUser|PublicUser|\ApiClients\Client\GitHub\Schema\Operations\Codespaces\ListForAuthenticatedUser\Response\ApplicationJson\Ok\Application\Json|\ApiClients\Client\GitHub\Schema\Operations\Codespaces\ListSecretsForAuthenticatedUser\Response\ApplicationJson\Ok|CodespacesUserPublicKey|CodespacesSecret|\ApiClients\Client\GitHub\Schema\Operations\Codespaces\ListRepositoriesForSecretForAuthenticatedUser\Response\ApplicationJson\Ok\Application\Json|\ApiClients\Client\GitHub\Schema\Operations\Codespaces\DeleteForAuthenticatedUser\Response\ApplicationJson\Accepted\Application\Json|CodespaceExportDetails|\ApiClients\Client\GitHub\Schema\Operations\Codespaces\CodespaceMachinesForAuthenticatedUser\Response\ApplicationJson\Ok\Application\Json|CodespaceWithFullRepository|GpgKey|\ApiClients\Client\GitHub\Schema\Operations\Apps\ListInstallationsForAuthenticatedUser\Response\ApplicationJson\Ok\Application\Json|\ApiClients\Client\GitHub\Schema\Operations\Apps\ListInstallationReposForAuthenticatedUser\Response\ApplicationJson\Ok|\ApiClients\Client\GitHub\Schema\Operations\Interactions\GetRestrictionsForAuthenticatedUser\Response\ApplicationJson\Ok\Application\Json\One|Key|SshSigningKey|Hovercard|StarredRepository
    {
        [$method, $path] = explode(' ', $call);
        $pathChunks      = explode('/', $path);
        $pathChunksCount = count($pathChunks);
        if ($method === 'GET') {
            if ($pathChunksCount === 1) {
                if (array_key_exists(Internal\Router\Get\One::class, $this->router) === false) {
                    $this->router[Internal\Router\Get\One::class] = new Internal\Router\Get\One(routers: $this->routers);
                }

                return $this->router[Internal\Router\Get\One::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 2) {
                if (array_key_exists(Internal\Router\Get\Two::class, $this->router) === false) {
                    $this->router[Internal\Router\Get\Two::class] = new Internal\Router\Get\Two(routers: $this->routers);
                }

                return $this->router[Internal\Router\Get\Two::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 3) {
                if (array_key_exists(Internal\Router\Get\Three::class, $this->router) === false) {
                    $this->router[Internal\Router\Get\Three::class] = new Internal\Router\Get\Three(routers: $this->routers);
                }

                return $this->router[Internal\Router\Get\Three::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 4) {
                if (array_key_exists(Internal\Router\Get\Four::class, $this->router) === false) {
                    $this->router[Internal\Router\Get\Four::class] = new Internal\Router\Get\Four(routers: $this->routers);
                }

                return $this->router[Internal\Router\Get\Four::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 5) {
                if (array_key_exists(Internal\Router\Get\Five::class, $this->router) === false) {
                    $this->router[Internal\Router\Get\Five::class] = new Internal\Router\Get\Five(routers: $this->routers);
                }

                return $this->router[Internal\Router\Get\Five::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 6) {
                if (array_key_exists(Internal\Router\Get\Six::class, $this->router) === false) {
                    $this->router[Internal\Router\Get\Six::class] = new Internal\Router\Get\Six(routers: $this->routers);
                }

                return $this->router[Internal\Router\Get\Six::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 7) {
                if (array_key_exists(Internal\Router\Get\Seven::class, $this->router) === false) {
                    $this->router[Internal\Router\Get\Seven::class] = new Internal\Router\Get\Seven(routers: $this->routers);
                }

                return $this->router[Internal\Router\Get\Seven::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 8) {
                if (array_key_exists(Internal\Router\Get\Eight::class, $this->router) === false) {
                    $this->router[Internal\Router\Get\Eight::class] = new Internal\Router\Get\Eight(routers: $this->routers);
                }

                return $this->router[Internal\Router\Get\Eight::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 9) {
                if (array_key_exists(Internal\Router\Get\Nine::class, $this->router) === false) {
                    $this->router[Internal\Router\Get\Nine::class] = new Internal\Router\Get\Nine(routers: $this->routers);
                }

                return $this->router[Internal\Router\Get\Nine::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 10) {
                if (array_key_exists(Internal\Router\Get\Ten::class, $this->router) === false) {
                    $this->router[Internal\Router\Get\Ten::class] = new Internal\Router\Get\Ten(routers: $this->routers);
                }

                return $this->router[Internal\Router\Get\Ten::class]->call($call, $params, $pathChunks);
            }
        } elseif ($method === 'POST') {
            if ($pathChunksCount === 4) {
                if (array_key_exists(Internal\Router\Post\Four::class, $this->router) === false) {
                    $this->router[Internal\Router\Post\Four::class] = new Internal\Router\Post\Four(routers: $this->routers);
                }

                return $this->router[Internal\Router\Post\Four::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 6) {
                if (array_key_exists(Internal\Router\Post\Six::class, $this->router) === false) {
                    $this->router[Internal\Router\Post\Six::class] = new Internal\Router\Post\Six(routers: $this->routers);
                }

                return $this->router[Internal\Router\Post\Six::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 5) {
                if (array_key_exists(Internal\Router\Post\Five::class, $this->router) === false) {
                    $this->router[Internal\Router\Post\Five::class] = new Internal\Router\Post\Five(routers: $this->routers);
                }

                return $this->router[Internal\Router\Post\Five::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 2) {
                if (array_key_exists(Internal\Router\Post\Two::class, $this->router) === false) {
                    $this->router[Internal\Router\Post\Two::class] = new Internal\Router\Post\Two(routers: $this->routers);
                }

                return $this->router[Internal\Router\Post\Two::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 3) {
                if (array_key_exists(Internal\Router\Post\Three::class, $this->router) === false) {
                    $this->router[Internal\Router\Post\Three::class] = new Internal\Router\Post\Three(routers: $this->routers);
                }

                return $this->router[Internal\Router\Post\Three::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 7) {
                if (array_key_exists(Internal\Router\Post\Seven::class, $this->router) === false) {
                    $this->router[Internal\Router\Post\Seven::class] = new Internal\Router\Post\Seven(routers: $this->routers);
                }

                return $this->router[Internal\Router\Post\Seven::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 8) {
                if (array_key_exists(Internal\Router\Post\Eight::class, $this->router) === false) {
                    $this->router[Internal\Router\Post\Eight::class] = new Internal\Router\Post\Eight(routers: $this->routers);
                }

                return $this->router[Internal\Router\Post\Eight::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 9) {
                if (array_key_exists(Internal\Router\Post\Nine::class, $this->router) === false) {
                    $this->router[Internal\Router\Post\Nine::class] = new Internal\Router\Post\Nine(routers: $this->routers);
                }

                return $this->router[Internal\Router\Post\Nine::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 10) {
                if (array_key_exists(Internal\Router\Post\Ten::class, $this->router) === false) {
                    $this->router[Internal\Router\Post\Ten::class] = new Internal\Router\Post\Ten(routers: $this->routers);
                }

                return $this->router[Internal\Router\Post\Ten::class]->call($call, $params, $pathChunks);
            }
        } elseif ($method === 'PATCH') {
            if ($pathChunksCount === 4) {
                if (array_key_exists(Internal\Router\Patch\Four::class, $this->router) === false) {
                    $this->router[Internal\Router\Patch\Four::class] = new Internal\Router\Patch\Four(routers: $this->routers);
                }

                return $this->router[Internal\Router\Patch\Four::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 3) {
                if (array_key_exists(Internal\Router\Patch\Three::class, $this->router) === false) {
                    $this->router[Internal\Router\Patch\Three::class] = new Internal\Router\Patch\Three(routers: $this->routers);
                }

                return $this->router[Internal\Router\Patch\Three::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 5) {
                if (array_key_exists(Internal\Router\Patch\Five::class, $this->router) === false) {
                    $this->router[Internal\Router\Patch\Five::class] = new Internal\Router\Patch\Five(routers: $this->routers);
                }

                return $this->router[Internal\Router\Patch\Five::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 6) {
                if (array_key_exists(Internal\Router\Patch\Six::class, $this->router) === false) {
                    $this->router[Internal\Router\Patch\Six::class] = new Internal\Router\Patch\Six(routers: $this->routers);
                }

                return $this->router[Internal\Router\Patch\Six::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 7) {
                if (array_key_exists(Internal\Router\Patch\Seven::class, $this->router) === false) {
                    $this->router[Internal\Router\Patch\Seven::class] = new Internal\Router\Patch\Seven(routers: $this->routers);
                }

                return $this->router[Internal\Router\Patch\Seven::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 9) {
                if (array_key_exists(Internal\Router\Patch\Nine::class, $this->router) === false) {
                    $this->router[Internal\Router\Patch\Nine::class] = new Internal\Router\Patch\Nine(routers: $this->routers);
                }

                return $this->router[Internal\Router\Patch\Nine::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 8) {
                if (array_key_exists(Internal\Router\Patch\Eight::class, $this->router) === false) {
                    $this->router[Internal\Router\Patch\Eight::class] = new Internal\Router\Patch\Eight(routers: $this->routers);
                }

                return $this->router[Internal\Router\Patch\Eight::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 2) {
                if (array_key_exists(Internal\Router\Patch\Two::class, $this->router) === false) {
                    $this->router[Internal\Router\Patch\Two::class] = new Internal\Router\Patch\Two(routers: $this->routers);
                }

                return $this->router[Internal\Router\Patch\Two::class]->call($call, $params, $pathChunks);
            }
        } elseif ($method === 'LIST') {
            if ($pathChunksCount === 3) {
                if (array_key_exists(Internal\Router\List\Three::class, $this->router) === false) {
                    $this->router[Internal\Router\List\Three::class] = new Internal\Router\List\Three(routers: $this->routers);
                }

                return $this->router[Internal\Router\List\Three::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 4) {
                if (array_key_exists(Internal\Router\List\Four::class, $this->router) === false) {
                    $this->router[Internal\Router\List\Four::class] = new Internal\Router\List\Four(routers: $this->routers);
                }

                return $this->router[Internal\Router\List\Four::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 2) {
                if (array_key_exists(Internal\Router\List\Two::class, $this->router) === false) {
                    $this->router[Internal\Router\List\Two::class] = new Internal\Router\List\Two(routers: $this->routers);
                }

                return $this->router[Internal\Router\List\Two::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 5) {
                if (array_key_exists(Internal\Router\List\Five::class, $this->router) === false) {
                    $this->router[Internal\Router\List\Five::class] = new Internal\Router\List\Five(routers: $this->routers);
                }

                return $this->router[Internal\Router\List\Five::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 6) {
                if (array_key_exists(Internal\Router\List\Six::class, $this->router) === false) {
                    $this->router[Internal\Router\List\Six::class] = new Internal\Router\List\Six(routers: $this->routers);
                }

                return $this->router[Internal\Router\List\Six::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 7) {
                if (array_key_exists(Internal\Router\List\Seven::class, $this->router) === false) {
                    $this->router[Internal\Router\List\Seven::class] = new Internal\Router\List\Seven(routers: $this->routers);
                }

                return $this->router[Internal\Router\List\Seven::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 8) {
                if (array_key_exists(Internal\Router\List\Eight::class, $this->router) === false) {
                    $this->router[Internal\Router\List\Eight::class] = new Internal\Router\List\Eight(routers: $this->routers);
                }

                return $this->router[Internal\Router\List\Eight::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 10) {
                if (array_key_exists(Internal\Router\List\Ten::class, $this->router) === false) {
                    $this->router[Internal\Router\List\Ten::class] = new Internal\Router\List\Ten(routers: $this->routers);
                }

                return $this->router[Internal\Router\List\Ten::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 9) {
                if (array_key_exists(Internal\Router\List\Nine::class, $this->router) === false) {
                    $this->router[Internal\Router\List\Nine::class] = new Internal\Router\List\Nine(routers: $this->routers);
                }

                return $this->router[Internal\Router\List\Nine::class]->call($call, $params, $pathChunks);
            }
        } elseif ($method === 'DELETE') {
            if ($pathChunksCount === 4) {
                if (array_key_exists(Internal\Router\Delete\Four::class, $this->router) === false) {
                    $this->router[Internal\Router\Delete\Four::class] = new Internal\Router\Delete\Four(routers: $this->routers);
                }

                return $this->router[Internal\Router\Delete\Four::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 5) {
                if (array_key_exists(Internal\Router\Delete\Five::class, $this->router) === false) {
                    $this->router[Internal\Router\Delete\Five::class] = new Internal\Router\Delete\Five(routers: $this->routers);
                }

                return $this->router[Internal\Router\Delete\Five::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 3) {
                if (array_key_exists(Internal\Router\Delete\Three::class, $this->router) === false) {
                    $this->router[Internal\Router\Delete\Three::class] = new Internal\Router\Delete\Three(routers: $this->routers);
                }

                return $this->router[Internal\Router\Delete\Three::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 7) {
                if (array_key_exists(Internal\Router\Delete\Seven::class, $this->router) === false) {
                    $this->router[Internal\Router\Delete\Seven::class] = new Internal\Router\Delete\Seven(routers: $this->routers);
                }

                return $this->router[Internal\Router\Delete\Seven::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 6) {
                if (array_key_exists(Internal\Router\Delete\Six::class, $this->router) === false) {
                    $this->router[Internal\Router\Delete\Six::class] = new Internal\Router\Delete\Six(routers: $this->routers);
                }

                return $this->router[Internal\Router\Delete\Six::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 8) {
                if (array_key_exists(Internal\Router\Delete\Eight::class, $this->router) === false) {
                    $this->router[Internal\Router\Delete\Eight::class] = new Internal\Router\Delete\Eight(routers: $this->routers);
                }

                return $this->router[Internal\Router\Delete\Eight::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 9) {
                if (array_key_exists(Internal\Router\Delete\Nine::class, $this->router) === false) {
                    $this->router[Internal\Router\Delete\Nine::class] = new Internal\Router\Delete\Nine(routers: $this->routers);
                }

                return $this->router[Internal\Router\Delete\Nine::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 11) {
                if (array_key_exists(Internal\Router\Delete\Eleven::class, $this->router) === false) {
                    $this->router[Internal\Router\Delete\Eleven::class] = new Internal\Router\Delete\Eleven(routers: $this->routers);
                }

                return $this->router[Internal\Router\Delete\Eleven::class]->call($call, $params, $pathChunks);
            }
        } elseif ($method === 'PUT') {
            if ($pathChunksCount === 5) {
                if (array_key_exists(Internal\Router\Put\Five::class, $this->router) === false) {
                    $this->router[Internal\Router\Put\Five::class] = new Internal\Router\Put\Five(routers: $this->routers);
                }

                return $this->router[Internal\Router\Put\Five::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 4) {
                if (array_key_exists(Internal\Router\Put\Four::class, $this->router) === false) {
                    $this->router[Internal\Router\Put\Four::class] = new Internal\Router\Put\Four(routers: $this->routers);
                }

                return $this->router[Internal\Router\Put\Four::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 2) {
                if (array_key_exists(Internal\Router\Put\Two::class, $this->router) === false) {
                    $this->router[Internal\Router\Put\Two::class] = new Internal\Router\Put\Two(routers: $this->routers);
                }

                return $this->router[Internal\Router\Put\Two::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 7) {
                if (array_key_exists(Internal\Router\Put\Seven::class, $this->router) === false) {
                    $this->router[Internal\Router\Put\Seven::class] = new Internal\Router\Put\Seven(routers: $this->routers);
                }

                return $this->router[Internal\Router\Put\Seven::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 6) {
                if (array_key_exists(Internal\Router\Put\Six::class, $this->router) === false) {
                    $this->router[Internal\Router\Put\Six::class] = new Internal\Router\Put\Six(routers: $this->routers);
                }

                return $this->router[Internal\Router\Put\Six::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 8) {
                if (array_key_exists(Internal\Router\Put\Eight::class, $this->router) === false) {
                    $this->router[Internal\Router\Put\Eight::class] = new Internal\Router\Put\Eight(routers: $this->routers);
                }

                return $this->router[Internal\Router\Put\Eight::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 9) {
                if (array_key_exists(Internal\Router\Put\Nine::class, $this->router) === false) {
                    $this->router[Internal\Router\Put\Nine::class] = new Internal\Router\Put\Nine(routers: $this->routers);
                }

                return $this->router[Internal\Router\Put\Nine::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 3) {
                if (array_key_exists(Internal\Router\Put\Three::class, $this->router) === false) {
                    $this->router[Internal\Router\Put\Three::class] = new Internal\Router\Put\Three(routers: $this->routers);
                }

                return $this->router[Internal\Router\Put\Three::class]->call($call, $params, $pathChunks);
            }
        } elseif ($method === 'STREAM') {
            if ($pathChunksCount === 6) {
                if (array_key_exists(Internal\Router\Stream\Six::class, $this->router) === false) {
                    $this->router[Internal\Router\Stream\Six::class] = new Internal\Router\Stream\Six(routers: $this->routers);
                }

                return $this->router[Internal\Router\Stream\Six::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 8) {
                if (array_key_exists(Internal\Router\Stream\Eight::class, $this->router) === false) {
                    $this->router[Internal\Router\Stream\Eight::class] = new Internal\Router\Stream\Eight(routers: $this->routers);
                }

                return $this->router[Internal\Router\Stream\Eight::class]->call($call, $params, $pathChunks);
            } elseif ($pathChunksCount === 10) {
                if (array_key_exists(Internal\Router\Stream\Ten::class, $this->router) === false) {
                    $this->router[Internal\Router\Stream\Ten::class] = new Internal\Router\Stream\Ten(routers: $this->routers);
                }

                return $this->router[Internal\Router\Stream\Ten::class]->call($call, $params, $pathChunks);
            }
        }

        throw new InvalidArgumentException();
    }

    public function operations(): OperationsInterface
    {
        return $this->operations;
    }

    public function webHooks(): WebHooksInterface
    {
        return $this->webHooks;
    }
}
