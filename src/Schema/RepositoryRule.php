<?php

declare(strict_types=1);

namespace ApiClients\Client\GitHub\Schema;

final readonly class RepositoryRule
{
    public const SCHEMA_JSON         = '{"title":"Repository Rule","type":"object","oneOf":[{"title":"creation","required":["type"],"type":"object","properties":{"type":{"enum":["creation"],"type":"string"}},"description":"Parameters to be used for the creation rule"},{"title":"update","required":["type"],"type":"object","properties":{"type":{"enum":["update"],"type":"string"},"parameters":{"required":["update_allows_fetch_and_merge"],"type":"object","properties":{"update_allows_fetch_and_merge":{"type":"boolean","description":"Branch can pull changes from its upstream repository"}}}},"description":"Parameters to be used for the update rule"},{"title":"deletion","required":["type"],"type":"object","properties":{"type":{"enum":["deletion"],"type":"string"}},"description":"Parameters to be used for the deletion rule"},{"title":"required_linear_history","required":["type"],"type":"object","properties":{"type":{"enum":["required_linear_history"],"type":"string"}},"description":"Parameters to be used for the required_linear_history rule"},{"title":"required_deployments","required":["type"],"type":"object","properties":{"type":{"enum":["required_deployments"],"type":"string"},"parameters":{"required":["required_deployment_environments"],"type":"object","properties":{"required_deployment_environments":{"type":"array","items":{"type":"string"},"description":"The environments that must be successfully deployed to before branches can be merged."}}}},"description":"Parameters to be used for the required_deployments rule"},{"title":"required_signatures","required":["type"],"type":"object","properties":{"type":{"enum":["required_signatures"],"type":"string"}},"description":"Parameters to be used for the required_signatures rule"},{"title":"pull_request","required":["type"],"type":"object","properties":{"type":{"enum":["pull_request"],"type":"string"},"parameters":{"required":["dismiss_stale_reviews_on_push","require_code_owner_review","require_last_push_approval","required_approving_review_count","required_review_thread_resolution"],"type":"object","properties":{"dismiss_stale_reviews_on_push":{"type":"boolean","description":"New, reviewable commits pushed will dismiss previous pull request review approvals."},"require_code_owner_review":{"type":"boolean","description":"Require an approving review in pull requests that modify files that have a designated code owner."},"require_last_push_approval":{"type":"boolean","description":"Whether the most recent reviewable push must be approved by someone other than the person who pushed it."},"required_approving_review_count":{"maximum":10,"minimum":0,"type":"integer","description":"The number of approving reviews that are required before a pull request can be merged."},"required_review_thread_resolution":{"type":"boolean","description":"All conversations on code must be resolved before a pull request can be merged."}}}},"description":"Parameters to be used for the pull_request rule"},{"title":"required_status_checks","required":["type"],"type":"object","properties":{"type":{"enum":["required_status_checks"],"type":"string"},"parameters":{"required":["required_status_checks","strict_required_status_checks_policy"],"type":"object","properties":{"required_status_checks":{"type":"array","items":{"title":"StatusCheckConfiguration","required":["context"],"type":"object","properties":{"context":{"type":"string","description":"The status check context name that must be present on the commit."},"integration_id":{"type":"integer","description":"The optional integration ID that this status check must originate from."}},"description":"Required status check"},"description":"Status checks that are required."},"strict_required_status_checks_policy":{"type":"boolean","description":"Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled."}}}},"description":"Parameters to be used for the required_status_checks rule"},{"title":"non_fast_forward","required":["type"],"type":"object","properties":{"type":{"enum":["non_fast_forward"],"type":"string"}},"description":"Parameters to be used for the non_fast_forward rule"},{"title":"commit_message_pattern","required":["type"],"type":"object","properties":{"type":{"enum":["commit_message_pattern"],"type":"string"},"parameters":{"required":["operator","pattern"],"type":"object","properties":{"name":{"type":"string","description":"How this rule will appear to users."},"negate":{"type":"boolean","description":"If true, the rule will fail if the pattern matches."},"operator":{"enum":["starts_with","ends_with","contains","regex"],"type":"string","description":"The operator to use for matching."},"pattern":{"type":"string","description":"The pattern to match with."}}}},"description":"Parameters to be used for the commit_message_pattern rule"},{"title":"commit_author_email_pattern","required":["type"],"type":"object","properties":{"type":{"enum":["commit_author_email_pattern"],"type":"string"},"parameters":{"required":["operator","pattern"],"type":"object","properties":{"name":{"type":"string","description":"How this rule will appear to users."},"negate":{"type":"boolean","description":"If true, the rule will fail if the pattern matches."},"operator":{"enum":["starts_with","ends_with","contains","regex"],"type":"string","description":"The operator to use for matching."},"pattern":{"type":"string","description":"The pattern to match with."}}}},"description":"Parameters to be used for the commit_author_email_pattern rule"},{"title":"committer_email_pattern","required":["type"],"type":"object","properties":{"type":{"enum":["committer_email_pattern"],"type":"string"},"parameters":{"required":["operator","pattern"],"type":"object","properties":{"name":{"type":"string","description":"How this rule will appear to users."},"negate":{"type":"boolean","description":"If true, the rule will fail if the pattern matches."},"operator":{"enum":["starts_with","ends_with","contains","regex"],"type":"string","description":"The operator to use for matching."},"pattern":{"type":"string","description":"The pattern to match with."}}}},"description":"Parameters to be used for the committer_email_pattern rule"},{"title":"branch_name_pattern","required":["type"],"type":"object","properties":{"type":{"enum":["branch_name_pattern"],"type":"string"},"parameters":{"required":["operator","pattern"],"type":"object","properties":{"name":{"type":"string","description":"How this rule will appear to users."},"negate":{"type":"boolean","description":"If true, the rule will fail if the pattern matches."},"operator":{"enum":["starts_with","ends_with","contains","regex"],"type":"string","description":"The operator to use for matching."},"pattern":{"type":"string","description":"The pattern to match with."}}}},"description":"Parameters to be used for the branch_name_pattern rule"},{"title":"tag_name_pattern","required":["type"],"type":"object","properties":{"type":{"enum":["tag_name_pattern"],"type":"string"},"parameters":{"required":["operator","pattern"],"type":"object","properties":{"name":{"type":"string","description":"How this rule will appear to users."},"negate":{"type":"boolean","description":"If true, the rule will fail if the pattern matches."},"operator":{"enum":["starts_with","ends_with","contains","regex"],"type":"string","description":"The operator to use for matching."},"pattern":{"type":"string","description":"The pattern to match with."}}}},"description":"Parameters to be used for the tag_name_pattern rule"}],"description":"A repository rule."}';
    public const SCHEMA_TITLE        = 'Repository Rule';
    public const SCHEMA_DESCRIPTION  = 'A repository rule.';
    public const SCHEMA_EXAMPLE_DATA = '[]';

    public function __construct()
    {
    }
}
