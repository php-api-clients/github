<?php

declare(strict_types=1);

namespace ApiClients\Tests\Client\GitHub\Types;

use ApiClients\Client\GitHub\Client;
use ApiClients\Contracts\HTTP\Headers\AuthenticationInterface;
use React\Http\Browser;

use function PHPStan\Testing\assertType;

$client = new Client(new class implements AuthenticationInterface
{
    function authHeader(): string
    {
        return 'Saturn V';
    }
}, new Browser());
assertType('', $client->call('GET /'));
assertType('iterable<int,Schema\\GlobalAdvisory>', $client->call('GET /advisories'));
assertType('', $client->call('GET /advisories/{ghsa_id}'));
assertType('', $client->call('GET /app'));
assertType('', $client->call('POST /app-manifests/{code}/conversions'));
assertType('', $client->call('GET /app/hook/config'));
assertType('', $client->call('PATCH /app/hook/config'));
assertType('iterable<int,Schema\\HookDeliveryItem>', $client->call('GET /app/hook/deliveries'));
assertType('', $client->call('GET /app/hook/deliveries/{delivery_id}'));
assertType('', $client->call('POST /app/hook/deliveries/{delivery_id}/attempts'));
assertType('iterable<int,Schema\\IntegrationInstallationRequest>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /app/installation-requests'));
assertType('iterable<int,Schema\\IntegrationInstallationRequest>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /app/installation-requests'));
assertType('iterable<int,Schema\\Installation>', $client->call('GET /app/installations'));
assertType('iterable<int,Schema\\Installation>', $client->call('LIST /app/installations'));
assertType('', $client->call('GET /app/installations/{installation_id}'));
assertType('', $client->call('DELETE /app/installations/{installation_id}'));
assertType('', $client->call('POST /app/installations/{installation_id}/access_tokens'));
assertType('', $client->call('PUT /app/installations/{installation_id}/suspended'));
assertType('', $client->call('DELETE /app/installations/{installation_id}/suspended'));
assertType('', $client->call('DELETE /applications/{client_id}/grant'));
assertType('', $client->call('POST /applications/{client_id}/token'));
assertType('', $client->call('DELETE /applications/{client_id}/token'));
assertType('', $client->call('PATCH /applications/{client_id}/token'));
assertType('', $client->call('POST /applications/{client_id}/token/scoped'));
assertType('', $client->call('GET /apps/{app_slug}'));
assertType('', $client->call('GET /assignments/{assignment_id}'));
assertType('iterable<int,Schema\\ClassroomAcceptedAssignment>', $client->call('GET /assignments/{assignment_id}/accepted_assignments'));
assertType('iterable<int,Schema\\ClassroomAcceptedAssignment>', $client->call('LIST /assignments/{assignment_id}/accepted_assignments'));
assertType('Observable<Schema\\ClassroomAssignmentGrade>', $client->call('GET /assignments/{assignment_id}/grades'));
assertType('iterable<int,Schema\\SimpleClassroom>', $client->call('GET /classrooms'));
assertType('iterable<int,Schema\\SimpleClassroom>', $client->call('LIST /classrooms'));
assertType('', $client->call('GET /classrooms/{classroom_id}'));
assertType('iterable<int,Schema\\SimpleClassroomAssignment>', $client->call('GET /classrooms/{classroom_id}/assignments'));
assertType('iterable<int,Schema\\SimpleClassroomAssignment>', $client->call('LIST /classrooms/{classroom_id}/assignments'));
assertType('Observable<Schema\\CodeOfConduct>|WithoutBody', $client->call('GET /codes_of_conduct'));
assertType('', $client->call('GET /codes_of_conduct/{key}'));
assertType('', $client->call('GET /emojis'));
assertType('iterable<int,Schema\\DependabotAlertWithRepository>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /enterprises/{enterprise}/dependabot/alerts'));
assertType('iterable<int,Schema\\OrganizationSecretScanningAlert>', $client->call('GET /enterprises/{enterprise}/secret-scanning/alerts'));
assertType('iterable<int,Schema\\Event>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /events'));
assertType('iterable<int,Schema\\Event>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /events'));
assertType('', $client->call('GET /feeds'));
assertType('iterable<int,Schema\\BaseGist>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /gists'));
assertType('iterable<int,Schema\\BaseGist>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /gists'));
assertType('', $client->call('POST /gists'));
assertType('iterable<int,Schema\\BaseGist>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /gists/public'));
assertType('iterable<int,Schema\\BaseGist>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /gists/public'));
assertType('iterable<int,Schema\\BaseGist>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /gists/starred'));
assertType('iterable<int,Schema\\BaseGist>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /gists/starred'));
assertType('', $client->call('GET /gists/{gist_id}'));
assertType('', $client->call('DELETE /gists/{gist_id}'));
assertType('', $client->call('PATCH /gists/{gist_id}'));
assertType('iterable<int,Schema\\GistComment>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /gists/{gist_id}/comments'));
assertType('iterable<int,Schema\\GistComment>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /gists/{gist_id}/comments'));
assertType('', $client->call('POST /gists/{gist_id}/comments'));
assertType('', $client->call('GET /gists/{gist_id}/comments/{comment_id}'));
assertType('', $client->call('DELETE /gists/{gist_id}/comments/{comment_id}'));
assertType('', $client->call('PATCH /gists/{gist_id}/comments/{comment_id}'));
assertType('iterable<int,Schema\\GistCommit>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /gists/{gist_id}/commits'));
assertType('iterable<int,Schema\\GistCommit>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /gists/{gist_id}/commits'));
assertType('iterable<int,Schema\\GistSimple>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /gists/{gist_id}/forks'));
assertType('iterable<int,Schema\\GistSimple>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /gists/{gist_id}/forks'));
assertType('', $client->call('POST /gists/{gist_id}/forks'));
assertType('', $client->call('GET /gists/{gist_id}/star'));
assertType('', $client->call('PUT /gists/{gist_id}/star'));
assertType('', $client->call('DELETE /gists/{gist_id}/star'));
assertType('', $client->call('GET /gists/{gist_id}/{sha}'));
assertType('Observable<string>|WithoutBody', $client->call('GET /gitignore/templates'));
assertType('', $client->call('GET /gitignore/templates/{name}'));
assertType('Schema\\Operations\\Apps\\ListReposAccessibleToInstallation\\Response\\ApplicationJson\\Ok|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /installation/repositories'));
assertType('', $client->call('DELETE /installation/token'));
assertType('iterable<int,Schema\\Issue>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /issues'));
assertType('iterable<int,Schema\\Issue>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /issues'));
assertType('iterable<int,Schema\\LicenseSimple>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /licenses'));
assertType('iterable<int,Schema\\LicenseSimple>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /licenses'));
assertType('', $client->call('GET /licenses/{license}'));
assertType('', $client->call('POST /markdown'));
assertType('', $client->call('POST /markdown/raw'));
assertType('', $client->call('GET /marketplace_listing/accounts/{account_id}'));
assertType('iterable<int,Schema\\MarketplaceListingPlan>', $client->call('GET /marketplace_listing/plans'));
assertType('iterable<int,Schema\\MarketplaceListingPlan>', $client->call('LIST /marketplace_listing/plans'));
assertType('iterable<int,Schema\\MarketplacePurchase>', $client->call('GET /marketplace_listing/plans/{plan_id}/accounts'));
assertType('iterable<int,Schema\\MarketplacePurchase>', $client->call('LIST /marketplace_listing/plans/{plan_id}/accounts'));
assertType('', $client->call('GET /marketplace_listing/stubbed/accounts/{account_id}'));
assertType('iterable<int,Schema\\MarketplaceListingPlan>', $client->call('GET /marketplace_listing/stubbed/plans'));
assertType('iterable<int,Schema\\MarketplaceListingPlan>', $client->call('LIST /marketplace_listing/stubbed/plans'));
assertType('iterable<int,Schema\\MarketplacePurchase>', $client->call('GET /marketplace_listing/stubbed/plans/{plan_id}/accounts'));
assertType('iterable<int,Schema\\MarketplacePurchase>', $client->call('LIST /marketplace_listing/stubbed/plans/{plan_id}/accounts'));
assertType('', $client->call('GET /meta'));
assertType('iterable<int,Schema\\Event>|Schema\\BasicError|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /networks/{owner}/{repo}/events'));
assertType('iterable<int,Schema\\Event>|Schema\\BasicError|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /networks/{owner}/{repo}/events'));
assertType('iterable<int,Schema\\Thread>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /notifications'));
assertType('iterable<int,Schema\\Thread>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /notifications'));
assertType('', $client->call('PUT /notifications'));
assertType('', $client->call('GET /notifications/threads/{thread_id}'));
assertType('', $client->call('DELETE /notifications/threads/{thread_id}'));
assertType('', $client->call('PATCH /notifications/threads/{thread_id}'));
assertType('', $client->call('GET /notifications/threads/{thread_id}/subscription'));
assertType('', $client->call('PUT /notifications/threads/{thread_id}/subscription'));
assertType('', $client->call('DELETE /notifications/threads/{thread_id}/subscription'));
assertType('', $client->call('GET /octocat'));
assertType('iterable<int,Schema\\OrganizationSimple>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /organizations'));
assertType('', $client->call('GET /orgs/{org}'));
assertType('', $client->call('DELETE /orgs/{org}'));
assertType('', $client->call('PATCH /orgs/{org}'));
assertType('', $client->call('GET /orgs/{org}/actions/cache/usage'));
assertType('Schema\\Operations\\Actions\\GetActionsCacheUsageByRepoForOrg\\Response\\ApplicationJson\\Ok', $client->call('GET /orgs/{org}/actions/cache/usage-by-repository'));
assertType('', $client->call('GET /orgs/{org}/actions/oidc/customization/sub'));
assertType('', $client->call('PUT /orgs/{org}/actions/oidc/customization/sub'));
assertType('', $client->call('GET /orgs/{org}/actions/permissions'));
assertType('', $client->call('PUT /orgs/{org}/actions/permissions'));
assertType('Schema\\Operations\\Actions\\ListSelectedRepositoriesEnabledGithubActionsOrganization\\Response\\ApplicationJson\\Ok', $client->call('GET /orgs/{org}/actions/permissions/repositories'));
assertType('', $client->call('PUT /orgs/{org}/actions/permissions/repositories'));
assertType('', $client->call('PUT /orgs/{org}/actions/permissions/repositories/{repository_id}'));
assertType('', $client->call('DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}'));
assertType('', $client->call('GET /orgs/{org}/actions/permissions/selected-actions'));
assertType('', $client->call('PUT /orgs/{org}/actions/permissions/selected-actions'));
assertType('', $client->call('GET /orgs/{org}/actions/permissions/workflow'));
assertType('', $client->call('PUT /orgs/{org}/actions/permissions/workflow'));
assertType('Schema\\Operations\\Actions\\ListSelfHostedRunnersForOrg\\Response\\ApplicationJson\\Ok', $client->call('GET /orgs/{org}/actions/runners'));
assertType('Observable<Schema\\RunnerApplication>', $client->call('GET /orgs/{org}/actions/runners/downloads'));
assertType('', $client->call('POST /orgs/{org}/actions/runners/generate-jitconfig'));
assertType('', $client->call('POST /orgs/{org}/actions/runners/registration-token'));
assertType('', $client->call('POST /orgs/{org}/actions/runners/remove-token'));
assertType('', $client->call('GET /orgs/{org}/actions/runners/{runner_id}'));
assertType('', $client->call('DELETE /orgs/{org}/actions/runners/{runner_id}'));
assertType('', $client->call('GET /orgs/{org}/actions/runners/{runner_id}/labels'));
assertType('', $client->call('PUT /orgs/{org}/actions/runners/{runner_id}/labels'));
assertType('', $client->call('POST /orgs/{org}/actions/runners/{runner_id}/labels'));
assertType('', $client->call('DELETE /orgs/{org}/actions/runners/{runner_id}/labels'));
assertType('', $client->call('DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}'));
assertType('Schema\\Operations\\Actions\\ListOrgSecrets\\Response\\ApplicationJson\\Ok', $client->call('GET /orgs/{org}/actions/secrets'));
assertType('', $client->call('GET /orgs/{org}/actions/secrets/public-key'));
assertType('', $client->call('GET /orgs/{org}/actions/secrets/{secret_name}'));
assertType('', $client->call('PUT /orgs/{org}/actions/secrets/{secret_name}'));
assertType('', $client->call('DELETE /orgs/{org}/actions/secrets/{secret_name}'));
assertType('Schema\\Operations\\Actions\\ListSelectedReposForOrgSecret\\Response\\ApplicationJson\\Ok', $client->call('GET /orgs/{org}/actions/secrets/{secret_name}/repositories'));
assertType('', $client->call('PUT /orgs/{org}/actions/secrets/{secret_name}/repositories'));
assertType('', $client->call('PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}'));
assertType('', $client->call('DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}'));
assertType('Schema\\Operations\\Actions\\ListOrgVariables\\Response\\ApplicationJson\\Ok', $client->call('GET /orgs/{org}/actions/variables'));
assertType('', $client->call('POST /orgs/{org}/actions/variables'));
assertType('', $client->call('GET /orgs/{org}/actions/variables/{name}'));
assertType('', $client->call('DELETE /orgs/{org}/actions/variables/{name}'));
assertType('', $client->call('PATCH /orgs/{org}/actions/variables/{name}'));
assertType('Schema\\Operations\\Actions\\ListSelectedReposForOrgVariable\\Response\\ApplicationJson\\Ok\\Application\\Json|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /orgs/{org}/actions/variables/{name}/repositories'));
assertType('', $client->call('PUT /orgs/{org}/actions/variables/{name}/repositories'));
assertType('', $client->call('PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}'));
assertType('', $client->call('DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('GET /orgs/{org}/blocks'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('LIST /orgs/{org}/blocks'));
assertType('', $client->call('GET /orgs/{org}/blocks/{username}'));
assertType('', $client->call('PUT /orgs/{org}/blocks/{username}'));
assertType('', $client->call('DELETE /orgs/{org}/blocks/{username}'));
assertType('iterable<int,Schema\\CodeScanningOrganizationAlertItems>', $client->call('GET /orgs/{org}/code-scanning/alerts'));
assertType('iterable<int,Schema\\CodeScanningOrganizationAlertItems>', $client->call('LIST /orgs/{org}/code-scanning/alerts'));
assertType('Schema\\Operations\\Codespaces\\ListInOrganization\\Response\\ApplicationJson\\Ok|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /orgs/{org}/codespaces'));
assertType('', $client->call('PUT /orgs/{org}/codespaces/access'));
assertType('', $client->call('POST /orgs/{org}/codespaces/access/selected_users'));
assertType('', $client->call('DELETE /orgs/{org}/codespaces/access/selected_users'));
assertType('Schema\\Operations\\Codespaces\\ListOrgSecrets\\Response\\ApplicationJson\\Ok', $client->call('GET /orgs/{org}/codespaces/secrets'));
assertType('', $client->call('GET /orgs/{org}/codespaces/secrets/public-key'));
assertType('', $client->call('GET /orgs/{org}/codespaces/secrets/{secret_name}'));
assertType('', $client->call('PUT /orgs/{org}/codespaces/secrets/{secret_name}'));
assertType('', $client->call('DELETE /orgs/{org}/codespaces/secrets/{secret_name}'));
assertType('Schema\\Operations\\Codespaces\\ListSelectedReposForOrgSecret\\Response\\ApplicationJson\\Ok\\Application\\Json', $client->call('GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories'));
assertType('', $client->call('PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories'));
assertType('', $client->call('PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}'));
assertType('', $client->call('DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}'));
assertType('', $client->call('GET /orgs/{org}/copilot/billing'));
assertType('Schema\\Operations\\Copilot\\ListCopilotSeats\\Response\\ApplicationJson\\Ok', $client->call('GET /orgs/{org}/copilot/billing/seats'));
assertType('', $client->call('POST /orgs/{org}/copilot/billing/selected_teams'));
assertType('', $client->call('DELETE /orgs/{org}/copilot/billing/selected_teams'));
assertType('', $client->call('POST /orgs/{org}/copilot/billing/selected_users'));
assertType('', $client->call('DELETE /orgs/{org}/copilot/billing/selected_users'));
assertType('iterable<int,Schema\\DependabotAlertWithRepository>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /orgs/{org}/dependabot/alerts'));
assertType('Schema\\Operations\\Dependabot\\ListOrgSecrets\\Response\\ApplicationJson\\Ok', $client->call('GET /orgs/{org}/dependabot/secrets'));
assertType('', $client->call('GET /orgs/{org}/dependabot/secrets/public-key'));
assertType('', $client->call('GET /orgs/{org}/dependabot/secrets/{secret_name}'));
assertType('', $client->call('PUT /orgs/{org}/dependabot/secrets/{secret_name}'));
assertType('', $client->call('DELETE /orgs/{org}/dependabot/secrets/{secret_name}'));
assertType('Schema\\Operations\\Dependabot\\ListSelectedReposForOrgSecret\\Response\\ApplicationJson\\Ok\\Application\\Json', $client->call('GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories'));
assertType('', $client->call('PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories'));
assertType('', $client->call('PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}'));
assertType('', $client->call('DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}'));
assertType('Observable<Schema\\Package>', $client->call('GET /orgs/{org}/docker/conflicts'));
assertType('iterable<int,Schema\\Event>', $client->call('GET /orgs/{org}/events'));
assertType('iterable<int,Schema\\Event>', $client->call('LIST /orgs/{org}/events'));
assertType('iterable<int,Schema\\OrganizationInvitation>', $client->call('GET /orgs/{org}/failed_invitations'));
assertType('iterable<int,Schema\\OrganizationInvitation>', $client->call('LIST /orgs/{org}/failed_invitations'));
assertType('iterable<int,Schema\\OrgHook>', $client->call('GET /orgs/{org}/hooks'));
assertType('iterable<int,Schema\\OrgHook>', $client->call('LIST /orgs/{org}/hooks'));
assertType('', $client->call('POST /orgs/{org}/hooks'));
assertType('', $client->call('GET /orgs/{org}/hooks/{hook_id}'));
assertType('', $client->call('DELETE /orgs/{org}/hooks/{hook_id}'));
assertType('', $client->call('PATCH /orgs/{org}/hooks/{hook_id}'));
assertType('', $client->call('GET /orgs/{org}/hooks/{hook_id}/config'));
assertType('', $client->call('PATCH /orgs/{org}/hooks/{hook_id}/config'));
assertType('iterable<int,Schema\\HookDeliveryItem>', $client->call('GET /orgs/{org}/hooks/{hook_id}/deliveries'));
assertType('', $client->call('GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}'));
assertType('', $client->call('POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts'));
assertType('', $client->call('POST /orgs/{org}/hooks/{hook_id}/pings'));
assertType('', $client->call('GET /orgs/{org}/installation'));
assertType('Schema\\Operations\\Orgs\\ListAppInstallations\\Response\\ApplicationJson\\Ok', $client->call('GET /orgs/{org}/installations'));
assertType('', $client->call('GET /orgs/{org}/interaction-limits'));
assertType('', $client->call('PUT /orgs/{org}/interaction-limits'));
assertType('', $client->call('DELETE /orgs/{org}/interaction-limits'));
assertType('iterable<int,Schema\\OrganizationInvitation>', $client->call('GET /orgs/{org}/invitations'));
assertType('iterable<int,Schema\\OrganizationInvitation>', $client->call('LIST /orgs/{org}/invitations'));
assertType('', $client->call('POST /orgs/{org}/invitations'));
assertType('', $client->call('DELETE /orgs/{org}/invitations/{invitation_id}'));
assertType('iterable<int,Schema\\Team>', $client->call('GET /orgs/{org}/invitations/{invitation_id}/teams'));
assertType('iterable<int,Schema\\Team>', $client->call('LIST /orgs/{org}/invitations/{invitation_id}/teams'));
assertType('iterable<int,Schema\\Issue>', $client->call('GET /orgs/{org}/issues'));
assertType('iterable<int,Schema\\Issue>', $client->call('LIST /orgs/{org}/issues'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('GET /orgs/{org}/members'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('LIST /orgs/{org}/members'));
assertType('', $client->call('GET /orgs/{org}/members/{username}'));
assertType('', $client->call('DELETE /orgs/{org}/members/{username}'));
assertType('Schema\\Operations\\Codespaces\\GetCodespacesForUserInOrg\\Response\\ApplicationJson\\Ok\\Application\\Json|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /orgs/{org}/members/{username}/codespaces'));
assertType('', $client->call('DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}'));
assertType('', $client->call('POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop'));
assertType('', $client->call('GET /orgs/{org}/members/{username}/copilot'));
assertType('', $client->call('GET /orgs/{org}/memberships/{username}'));
assertType('', $client->call('PUT /orgs/{org}/memberships/{username}'));
assertType('', $client->call('DELETE /orgs/{org}/memberships/{username}'));
assertType('iterable<int,Schema\\Migration>', $client->call('GET /orgs/{org}/migrations'));
assertType('iterable<int,Schema\\Migration>', $client->call('LIST /orgs/{org}/migrations'));
assertType('', $client->call('POST /orgs/{org}/migrations'));
assertType('', $client->call('GET /orgs/{org}/migrations/{migration_id}'));
assertType('', $client->call('GET /orgs/{org}/migrations/{migration_id}/archive'));
assertType('Observable<string>', $client->call('STREAM /orgs/{org}/migrations/{migration_id}/archive'));
assertType('', $client->call('DELETE /orgs/{org}/migrations/{migration_id}/archive'));
assertType('', $client->call('DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('GET /orgs/{org}/migrations/{migration_id}/repositories'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('LIST /orgs/{org}/migrations/{migration_id}/repositories'));
assertType('Observable<Schema\\OrganizationFineGrainedPermission>', $client->call('GET /orgs/{org}/organization-fine-grained-permissions'));
assertType('', $client->call('GET /orgs/{org}/organization-roles'));
assertType('', $client->call('POST /orgs/{org}/organization-roles'));
assertType('', $client->call('DELETE /orgs/{org}/organization-roles/teams/{team_slug}'));
assertType('', $client->call('PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}'));
assertType('', $client->call('DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}'));
assertType('', $client->call('DELETE /orgs/{org}/organization-roles/users/{username}'));
assertType('', $client->call('PUT /orgs/{org}/organization-roles/users/{username}/{role_id}'));
assertType('', $client->call('DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}'));
assertType('', $client->call('GET /orgs/{org}/organization-roles/{role_id}'));
assertType('', $client->call('DELETE /orgs/{org}/organization-roles/{role_id}'));
assertType('', $client->call('PATCH /orgs/{org}/organization-roles/{role_id}'));
assertType('iterable<int,Schema\\Team>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /orgs/{org}/organization-roles/{role_id}/teams'));
assertType('iterable<int,Schema\\Team>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /orgs/{org}/organization-roles/{role_id}/teams'));
assertType('iterable<int,Schema\\SimpleUser>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /orgs/{org}/organization-roles/{role_id}/users'));
assertType('iterable<int,Schema\\SimpleUser>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /orgs/{org}/organization-roles/{role_id}/users'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('GET /orgs/{org}/outside_collaborators'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('LIST /orgs/{org}/outside_collaborators'));
assertType('', $client->call('PUT /orgs/{org}/outside_collaborators/{username}'));
assertType('', $client->call('DELETE /orgs/{org}/outside_collaborators/{username}'));
assertType('iterable<int,Schema\\Package>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /orgs/{org}/packages'));
assertType('iterable<int,Schema\\Package>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /orgs/{org}/packages'));
assertType('', $client->call('GET /orgs/{org}/packages/{package_type}/{package_name}'));
assertType('', $client->call('DELETE /orgs/{org}/packages/{package_type}/{package_name}'));
assertType('', $client->call('POST /orgs/{org}/packages/{package_type}/{package_name}/restore'));
assertType('iterable<int,Schema\\PackageVersion>', $client->call('GET /orgs/{org}/packages/{package_type}/{package_name}/versions'));
assertType('iterable<int,Schema\\PackageVersion>', $client->call('LIST /orgs/{org}/packages/{package_type}/{package_name}/versions'));
assertType('', $client->call('GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}'));
assertType('', $client->call('DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}'));
assertType('', $client->call('POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore'));
assertType('iterable<int,Schema\\OrganizationProgrammaticAccessGrantRequest>', $client->call('GET /orgs/{org}/personal-access-token-requests'));
assertType('iterable<int,Schema\\OrganizationProgrammaticAccessGrantRequest>', $client->call('LIST /orgs/{org}/personal-access-token-requests'));
assertType('', $client->call('POST /orgs/{org}/personal-access-token-requests'));
assertType('', $client->call('POST /orgs/{org}/personal-access-token-requests/{pat_request_id}'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('LIST /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories'));
assertType('iterable<int,Schema\\OrganizationProgrammaticAccessGrant>', $client->call('GET /orgs/{org}/personal-access-tokens'));
assertType('iterable<int,Schema\\OrganizationProgrammaticAccessGrant>', $client->call('LIST /orgs/{org}/personal-access-tokens'));
assertType('', $client->call('POST /orgs/{org}/personal-access-tokens'));
assertType('', $client->call('POST /orgs/{org}/personal-access-tokens/{pat_id}'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('LIST /orgs/{org}/personal-access-tokens/{pat_id}/repositories'));
assertType('iterable<int,Schema\\Project>', $client->call('GET /orgs/{org}/projects'));
assertType('iterable<int,Schema\\Project>', $client->call('LIST /orgs/{org}/projects'));
assertType('', $client->call('POST /orgs/{org}/projects'));
assertType('Observable<Schema\\OrgCustomProperty>', $client->call('GET /orgs/{org}/properties/schema'));
assertType('Observable<Schema\\OrgCustomProperty>', $client->call('PATCH /orgs/{org}/properties/schema'));
assertType('', $client->call('GET /orgs/{org}/properties/schema/{custom_property_name}'));
assertType('', $client->call('PUT /orgs/{org}/properties/schema/{custom_property_name}'));
assertType('', $client->call('DELETE /orgs/{org}/properties/schema/{custom_property_name}'));
assertType('iterable<int,Schema\\OrgRepoCustomPropertyValues>', $client->call('GET /orgs/{org}/properties/values'));
assertType('iterable<int,Schema\\OrgRepoCustomPropertyValues>', $client->call('LIST /orgs/{org}/properties/values'));
assertType('', $client->call('PATCH /orgs/{org}/properties/values'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('GET /orgs/{org}/public_members'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('LIST /orgs/{org}/public_members'));
assertType('', $client->call('GET /orgs/{org}/public_members/{username}'));
assertType('', $client->call('PUT /orgs/{org}/public_members/{username}'));
assertType('', $client->call('DELETE /orgs/{org}/public_members/{username}'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('GET /orgs/{org}/repos'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('LIST /orgs/{org}/repos'));
assertType('', $client->call('POST /orgs/{org}/repos'));
assertType('iterable<int,Schema\\RepositoryRuleset>', $client->call('GET /orgs/{org}/rulesets'));
assertType('iterable<int,Schema\\RepositoryRuleset>', $client->call('LIST /orgs/{org}/rulesets'));
assertType('', $client->call('POST /orgs/{org}/rulesets'));
assertType('iterable<int,Schema\\RuleSuites>', $client->call('GET /orgs/{org}/rulesets/rule-suites'));
assertType('iterable<int,Schema\\RuleSuites>', $client->call('LIST /orgs/{org}/rulesets/rule-suites'));
assertType('', $client->call('GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}'));
assertType('', $client->call('GET /orgs/{org}/rulesets/{ruleset_id}'));
assertType('', $client->call('PUT /orgs/{org}/rulesets/{ruleset_id}'));
assertType('', $client->call('DELETE /orgs/{org}/rulesets/{ruleset_id}'));
assertType('iterable<int,Schema\\OrganizationSecretScanningAlert>', $client->call('GET /orgs/{org}/secret-scanning/alerts'));
assertType('iterable<int,Schema\\OrganizationSecretScanningAlert>', $client->call('LIST /orgs/{org}/secret-scanning/alerts'));
assertType('iterable<int,Schema\\RepositoryAdvisory>', $client->call('GET /orgs/{org}/security-advisories'));
assertType('Observable<Schema\\TeamSimple>', $client->call('GET /orgs/{org}/security-managers'));
assertType('', $client->call('PUT /orgs/{org}/security-managers/teams/{team_slug}'));
assertType('', $client->call('DELETE /orgs/{org}/security-managers/teams/{team_slug}'));
assertType('', $client->call('GET /orgs/{org}/settings/billing/actions'));
assertType('', $client->call('GET /orgs/{org}/settings/billing/packages'));
assertType('', $client->call('GET /orgs/{org}/settings/billing/shared-storage'));
assertType('iterable<int,Schema\\Team>', $client->call('GET /orgs/{org}/teams'));
assertType('iterable<int,Schema\\Team>', $client->call('LIST /orgs/{org}/teams'));
assertType('', $client->call('POST /orgs/{org}/teams'));
assertType('', $client->call('GET /orgs/{org}/teams/{team_slug}'));
assertType('', $client->call('DELETE /orgs/{org}/teams/{team_slug}'));
assertType('', $client->call('PATCH /orgs/{org}/teams/{team_slug}'));
assertType('iterable<int,Schema\\TeamDiscussion>', $client->call('GET /orgs/{org}/teams/{team_slug}/discussions'));
assertType('iterable<int,Schema\\TeamDiscussion>', $client->call('LIST /orgs/{org}/teams/{team_slug}/discussions'));
assertType('', $client->call('POST /orgs/{org}/teams/{team_slug}/discussions'));
assertType('', $client->call('GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'));
assertType('', $client->call('DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'));
assertType('', $client->call('PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'));
assertType('iterable<int,Schema\\TeamDiscussionComment>', $client->call('GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments'));
assertType('iterable<int,Schema\\TeamDiscussionComment>', $client->call('LIST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments'));
assertType('', $client->call('POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments'));
assertType('', $client->call('GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'));
assertType('', $client->call('DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'));
assertType('', $client->call('PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'));
assertType('iterable<int,Schema\\Reaction>', $client->call('GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions'));
assertType('iterable<int,Schema\\Reaction>', $client->call('LIST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions'));
assertType('', $client->call('POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions'));
assertType('', $client->call('DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}'));
assertType('iterable<int,Schema\\Reaction>', $client->call('GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions'));
assertType('iterable<int,Schema\\Reaction>', $client->call('LIST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions'));
assertType('', $client->call('POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions'));
assertType('', $client->call('DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}'));
assertType('iterable<int,Schema\\OrganizationInvitation>', $client->call('GET /orgs/{org}/teams/{team_slug}/invitations'));
assertType('iterable<int,Schema\\OrganizationInvitation>', $client->call('LIST /orgs/{org}/teams/{team_slug}/invitations'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('GET /orgs/{org}/teams/{team_slug}/members'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('LIST /orgs/{org}/teams/{team_slug}/members'));
assertType('', $client->call('GET /orgs/{org}/teams/{team_slug}/memberships/{username}'));
assertType('', $client->call('PUT /orgs/{org}/teams/{team_slug}/memberships/{username}'));
assertType('', $client->call('DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}'));
assertType('iterable<int,Schema\\TeamProject>', $client->call('GET /orgs/{org}/teams/{team_slug}/projects'));
assertType('iterable<int,Schema\\TeamProject>', $client->call('LIST /orgs/{org}/teams/{team_slug}/projects'));
assertType('', $client->call('GET /orgs/{org}/teams/{team_slug}/projects/{project_id}'));
assertType('', $client->call('PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}'));
assertType('', $client->call('DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('GET /orgs/{org}/teams/{team_slug}/repos'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('LIST /orgs/{org}/teams/{team_slug}/repos'));
assertType('', $client->call('GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'));
assertType('', $client->call('PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'));
assertType('', $client->call('DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'));
assertType('iterable<int,Schema\\Team>', $client->call('GET /orgs/{org}/teams/{team_slug}/teams'));
assertType('iterable<int,Schema\\Team>', $client->call('LIST /orgs/{org}/teams/{team_slug}/teams'));
assertType('', $client->call('POST /orgs/{org}/{security_product}/{enablement}'));
assertType('', $client->call('GET /projects/columns/cards/{card_id}'));
assertType('', $client->call('DELETE /projects/columns/cards/{card_id}'));
assertType('', $client->call('PATCH /projects/columns/cards/{card_id}'));
assertType('', $client->call('POST /projects/columns/cards/{card_id}/moves'));
assertType('', $client->call('GET /projects/columns/{column_id}'));
assertType('', $client->call('DELETE /projects/columns/{column_id}'));
assertType('', $client->call('PATCH /projects/columns/{column_id}'));
assertType('iterable<int,Schema\\ProjectCard>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /projects/columns/{column_id}/cards'));
assertType('iterable<int,Schema\\ProjectCard>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /projects/columns/{column_id}/cards'));
assertType('', $client->call('POST /projects/columns/{column_id}/cards'));
assertType('', $client->call('POST /projects/columns/{column_id}/moves'));
assertType('', $client->call('GET /projects/{project_id}'));
assertType('', $client->call('DELETE /projects/{project_id}'));
assertType('', $client->call('PATCH /projects/{project_id}'));
assertType('iterable<int,Schema\\SimpleUser>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /projects/{project_id}/collaborators'));
assertType('iterable<int,Schema\\SimpleUser>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /projects/{project_id}/collaborators'));
assertType('', $client->call('PUT /projects/{project_id}/collaborators/{username}'));
assertType('', $client->call('DELETE /projects/{project_id}/collaborators/{username}'));
assertType('', $client->call('GET /projects/{project_id}/collaborators/{username}/permission'));
assertType('iterable<int,Schema\\ProjectColumn>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /projects/{project_id}/columns'));
assertType('iterable<int,Schema\\ProjectColumn>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /projects/{project_id}/columns'));
assertType('', $client->call('POST /projects/{project_id}/columns'));
assertType('', $client->call('GET /rate_limit'));
assertType('', $client->call('GET /repos/{owner}/{repo}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}'));
assertType('Schema\\Operations\\Actions\\ListArtifactsForRepo\\Response\\ApplicationJson\\Ok', $client->call('GET /repos/{owner}/{repo}/actions/artifacts'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}'));
assertType('Observable<string>', $client->call('STREAM /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/cache/usage'));
assertType('Schema\\ActionsCacheList', $client->call('GET /repos/{owner}/{repo}/actions/caches'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/actions/caches'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/jobs/{job_id}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs'));
assertType('Observable<string>', $client->call('STREAM /repos/{owner}/{repo}/actions/jobs/{job_id}/logs'));
assertType('', $client->call('POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/oidc/customization/sub'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/actions/oidc/customization/sub'));
assertType('Schema\\Operations\\Actions\\ListRepoOrganizationSecrets\\Response\\ApplicationJson\\Ok', $client->call('GET /repos/{owner}/{repo}/actions/organization-secrets'));
assertType('Schema\\Operations\\Actions\\ListRepoOrganizationVariables\\Response\\ApplicationJson\\Ok', $client->call('GET /repos/{owner}/{repo}/actions/organization-variables'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/permissions'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/actions/permissions'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/permissions/access'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/actions/permissions/access'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/permissions/selected-actions'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/actions/permissions/selected-actions'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/permissions/workflow'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/actions/permissions/workflow'));
assertType('Schema\\Operations\\Actions\\ListSelfHostedRunnersForRepo\\Response\\ApplicationJson\\Ok\\Application\\Json', $client->call('GET /repos/{owner}/{repo}/actions/runners'));
assertType('Observable<Schema\\RunnerApplication>', $client->call('GET /repos/{owner}/{repo}/actions/runners/downloads'));
assertType('', $client->call('POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig'));
assertType('', $client->call('POST /repos/{owner}/{repo}/actions/runners/registration-token'));
assertType('', $client->call('POST /repos/{owner}/{repo}/actions/runners/remove-token'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/runners/{runner_id}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels'));
assertType('', $client->call('POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}'));
assertType('Schema\\Operations\\Actions\\ListWorkflowRunsForRepo\\Response\\ApplicationJson\\Ok', $client->call('GET /repos/{owner}/{repo}/actions/runs'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/runs/{run_id}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/actions/runs/{run_id}'));
assertType('Observable<Schema\\EnvironmentApprovals>', $client->call('GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals'));
assertType('', $client->call('POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve'));
assertType('Schema\\Operations\\Actions\\ListWorkflowRunArtifacts\\Response\\ApplicationJson\\Ok\\Application\\Json', $client->call('GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}'));
assertType('Schema\\Operations\\Actions\\ListJobsForWorkflowRunAttempt\\Response\\ApplicationJson\\Ok', $client->call('GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs'));
assertType('Observable<string>', $client->call('STREAM /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs'));
assertType('', $client->call('POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel'));
assertType('', $client->call('POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule'));
assertType('', $client->call('POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel'));
assertType('Schema\\Operations\\Actions\\ListJobsForWorkflowRun\\Response\\ApplicationJson\\Ok\\Application\\Json', $client->call('GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs'));
assertType('Observable<string>', $client->call('STREAM /repos/{owner}/{repo}/actions/runs/{run_id}/logs'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs'));
assertType('Observable<Schema\\PendingDeployment>', $client->call('GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments'));
assertType('Observable<Schema\\Deployment>', $client->call('POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments'));
assertType('', $client->call('POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun'));
assertType('', $client->call('POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing'));
assertType('Schema\\Operations\\Actions\\ListRepoSecrets\\Response\\ApplicationJson\\Ok\\Application\\Json', $client->call('GET /repos/{owner}/{repo}/actions/secrets'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/secrets/public-key'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/secrets/{secret_name}'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}'));
assertType('Schema\\Operations\\Actions\\ListRepoVariables\\Response\\ApplicationJson\\Ok\\Application\\Json', $client->call('GET /repos/{owner}/{repo}/actions/variables'));
assertType('', $client->call('POST /repos/{owner}/{repo}/actions/variables'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/variables/{name}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/actions/variables/{name}'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/actions/variables/{name}'));
assertType('Schema\\Operations\\Actions\\ListRepoWorkflows\\Response\\ApplicationJson\\Ok', $client->call('GET /repos/{owner}/{repo}/actions/workflows'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable'));
assertType('', $client->call('POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable'));
assertType('Schema\\Operations\\Actions\\ListWorkflowRuns\\Response\\ApplicationJson\\Ok\\Application\\Json', $client->call('GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs'));
assertType('', $client->call('GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing'));
assertType('iterable<int,Schema\\Activity>', $client->call('GET /repos/{owner}/{repo}/activity'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('GET /repos/{owner}/{repo}/assignees'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('LIST /repos/{owner}/{repo}/assignees'));
assertType('', $client->call('GET /repos/{owner}/{repo}/assignees/{assignee}'));
assertType('iterable<int,Schema\\Autolink>', $client->call('GET /repos/{owner}/{repo}/autolinks'));
assertType('', $client->call('POST /repos/{owner}/{repo}/autolinks'));
assertType('', $client->call('GET /repos/{owner}/{repo}/autolinks/{autolink_id}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/automated-security-fixes'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/automated-security-fixes'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/automated-security-fixes'));
assertType('iterable<int,Schema\\ShortBranch>', $client->call('GET /repos/{owner}/{repo}/branches'));
assertType('iterable<int,Schema\\ShortBranch>', $client->call('LIST /repos/{owner}/{repo}/branches'));
assertType('', $client->call('GET /repos/{owner}/{repo}/branches/{branch}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/branches/{branch}/protection'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/branches/{branch}/protection'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/branches/{branch}/protection'));
assertType('', $client->call('GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'));
assertType('', $client->call('POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'));
assertType('', $client->call('GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'));
assertType('', $client->call('GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'));
assertType('', $client->call('POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'));
assertType('', $client->call('GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'));
assertType('Observable<string>', $client->call('GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'));
assertType('Observable<string>', $client->call('PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'));
assertType('Observable<string>', $client->call('POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'));
assertType('Observable<string>', $client->call('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'));
assertType('', $client->call('GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions'));
assertType('Observable<Schema\\Integration>', $client->call('GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'));
assertType('Observable<Schema\\Integration>', $client->call('PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'));
assertType('Observable<Schema\\Integration>', $client->call('POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'));
assertType('Observable<Schema\\Integration>', $client->call('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'));
assertType('Observable<Schema\\Team>', $client->call('GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'));
assertType('Observable<Schema\\Team>', $client->call('PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'));
assertType('Observable<Schema\\Team>', $client->call('POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'));
assertType('Observable<Schema\\Team>', $client->call('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'));
assertType('Observable<Schema\\SimpleUser>', $client->call('GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'));
assertType('Observable<Schema\\SimpleUser>', $client->call('PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'));
assertType('Observable<Schema\\SimpleUser>', $client->call('POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'));
assertType('Observable<Schema\\SimpleUser>', $client->call('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'));
assertType('', $client->call('POST /repos/{owner}/{repo}/branches/{branch}/rename'));
assertType('', $client->call('POST /repos/{owner}/{repo}/check-runs'));
assertType('', $client->call('GET /repos/{owner}/{repo}/check-runs/{check_run_id}'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}'));
assertType('iterable<int,Schema\\CheckAnnotation>', $client->call('GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations'));
assertType('iterable<int,Schema\\CheckAnnotation>', $client->call('LIST /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations'));
assertType('', $client->call('POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest'));
assertType('', $client->call('POST /repos/{owner}/{repo}/check-suites'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/check-suites/preferences'));
assertType('', $client->call('GET /repos/{owner}/{repo}/check-suites/{check_suite_id}'));
assertType('Schema\\Operations\\Checks\\ListForSuite\\Response\\ApplicationJson\\Ok', $client->call('GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs'));
assertType('', $client->call('POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest'));
assertType('iterable<int,Schema\\CodeScanningAlertItems>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /repos/{owner}/{repo}/code-scanning/alerts'));
assertType('iterable<int,Schema\\CodeScanningAlertItems>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /repos/{owner}/{repo}/code-scanning/alerts'));
assertType('', $client->call('GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}'));
assertType('iterable<int,Schema\\CodeScanningAlertInstance>', $client->call('GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances'));
assertType('iterable<int,Schema\\CodeScanningAlertInstance>', $client->call('LIST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances'));
assertType('iterable<int,Schema\\CodeScanningAnalysis>', $client->call('GET /repos/{owner}/{repo}/code-scanning/analyses'));
assertType('iterable<int,Schema\\CodeScanningAnalysis>', $client->call('LIST /repos/{owner}/{repo}/code-scanning/analyses'));
assertType('', $client->call('GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}'));
assertType('Observable<Schema\\CodeScanningCodeqlDatabase>', $client->call('GET /repos/{owner}/{repo}/code-scanning/codeql/databases'));
assertType('', $client->call('GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/code-scanning/default-setup'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/code-scanning/default-setup'));
assertType('', $client->call('POST /repos/{owner}/{repo}/code-scanning/sarifs'));
assertType('', $client->call('GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/codeowners/errors'));
assertType('Schema\\Operations\\Codespaces\\ListInRepositoryForAuthenticatedUser\\Response\\ApplicationJson\\Ok\\Application\\Json', $client->call('GET /repos/{owner}/{repo}/codespaces'));
assertType('', $client->call('POST /repos/{owner}/{repo}/codespaces'));
assertType('Schema\\Operations\\Codespaces\\ListDevcontainersInRepositoryForAuthenticatedUser\\Response\\ApplicationJson\\Ok', $client->call('GET /repos/{owner}/{repo}/codespaces/devcontainers'));
assertType('', $client->call('GET /repos/{owner}/{repo}/codespaces/machines'));
assertType('', $client->call('GET /repos/{owner}/{repo}/codespaces/new'));
assertType('', $client->call('GET /repos/{owner}/{repo}/codespaces/permissions_check'));
assertType('Schema\\Operations\\Codespaces\\ListRepoSecrets\\Response\\ApplicationJson\\Ok', $client->call('GET /repos/{owner}/{repo}/codespaces/secrets'));
assertType('', $client->call('GET /repos/{owner}/{repo}/codespaces/secrets/public-key'));
assertType('', $client->call('GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}'));
assertType('iterable<int,Schema\\Collaborator>', $client->call('GET /repos/{owner}/{repo}/collaborators'));
assertType('iterable<int,Schema\\Collaborator>', $client->call('LIST /repos/{owner}/{repo}/collaborators'));
assertType('', $client->call('GET /repos/{owner}/{repo}/collaborators/{username}'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/collaborators/{username}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/collaborators/{username}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/collaborators/{username}/permission'));
assertType('iterable<int,Schema\\CommitComment>', $client->call('GET /repos/{owner}/{repo}/comments'));
assertType('iterable<int,Schema\\CommitComment>', $client->call('LIST /repos/{owner}/{repo}/comments'));
assertType('', $client->call('GET /repos/{owner}/{repo}/comments/{comment_id}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/comments/{comment_id}'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/comments/{comment_id}'));
assertType('iterable<int,Schema\\Reaction>', $client->call('GET /repos/{owner}/{repo}/comments/{comment_id}/reactions'));
assertType('iterable<int,Schema\\Reaction>', $client->call('LIST /repos/{owner}/{repo}/comments/{comment_id}/reactions'));
assertType('', $client->call('POST /repos/{owner}/{repo}/comments/{comment_id}/reactions'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}'));
assertType('iterable<int,Schema\\Commit>', $client->call('GET /repos/{owner}/{repo}/commits'));
assertType('iterable<int,Schema\\Commit>', $client->call('LIST /repos/{owner}/{repo}/commits'));
assertType('Observable<Schema\\BranchShort>', $client->call('GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head'));
assertType('iterable<int,Schema\\CommitComment>', $client->call('GET /repos/{owner}/{repo}/commits/{commit_sha}/comments'));
assertType('iterable<int,Schema\\CommitComment>', $client->call('LIST /repos/{owner}/{repo}/commits/{commit_sha}/comments'));
assertType('', $client->call('POST /repos/{owner}/{repo}/commits/{commit_sha}/comments'));
assertType('iterable<int,Schema\\PullRequestSimple>', $client->call('GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls'));
assertType('iterable<int,Schema\\PullRequestSimple>', $client->call('LIST /repos/{owner}/{repo}/commits/{commit_sha}/pulls'));
assertType('Schema\\Commit', $client->call('GET /repos/{owner}/{repo}/commits/{ref}'));
assertType('Schema\\Operations\\Checks\\ListForRef\\Response\\ApplicationJson\\Ok\\Application\\Json', $client->call('GET /repos/{owner}/{repo}/commits/{ref}/check-runs'));
assertType('Schema\\Operations\\Checks\\ListSuitesForRef\\Response\\ApplicationJson\\Ok', $client->call('GET /repos/{owner}/{repo}/commits/{ref}/check-suites'));
assertType('Schema\\CombinedCommitStatus', $client->call('GET /repos/{owner}/{repo}/commits/{ref}/status'));
assertType('iterable<int,Schema\\Status>|Schema\\BasicError', $client->call('GET /repos/{owner}/{repo}/commits/{ref}/statuses'));
assertType('iterable<int,Schema\\Status>|Schema\\BasicError', $client->call('LIST /repos/{owner}/{repo}/commits/{ref}/statuses'));
assertType('', $client->call('GET /repos/{owner}/{repo}/community/profile'));
assertType('Schema\\CommitComparison', $client->call('GET /repos/{owner}/{repo}/compare/{basehead}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/contents/{path}'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/contents/{path}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/contents/{path}'));
assertType('iterable<int,Schema\\Contributor>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /repos/{owner}/{repo}/contributors'));
assertType('iterable<int,Schema\\Contributor>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /repos/{owner}/{repo}/contributors'));
assertType('iterable<int,Schema\\DependabotAlert>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /repos/{owner}/{repo}/dependabot/alerts'));
assertType('iterable<int,Schema\\DependabotAlert>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /repos/{owner}/{repo}/dependabot/alerts'));
assertType('', $client->call('GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}'));
assertType('Schema\\Operations\\Dependabot\\ListRepoSecrets\\Response\\ApplicationJson\\Ok', $client->call('GET /repos/{owner}/{repo}/dependabot/secrets'));
assertType('', $client->call('GET /repos/{owner}/{repo}/dependabot/secrets/public-key'));
assertType('', $client->call('GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}'));
assertType('Observable<Schema\\DependencyGraphDiff>', $client->call('GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/dependency-graph/sbom'));
assertType('', $client->call('POST /repos/{owner}/{repo}/dependency-graph/snapshots'));
assertType('iterable<int,Schema\\Deployment>', $client->call('GET /repos/{owner}/{repo}/deployments'));
assertType('iterable<int,Schema\\Deployment>', $client->call('LIST /repos/{owner}/{repo}/deployments'));
assertType('', $client->call('POST /repos/{owner}/{repo}/deployments'));
assertType('', $client->call('GET /repos/{owner}/{repo}/deployments/{deployment_id}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/deployments/{deployment_id}'));
assertType('iterable<int,Schema\\DeploymentStatus>', $client->call('GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses'));
assertType('iterable<int,Schema\\DeploymentStatus>', $client->call('LIST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses'));
assertType('', $client->call('POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses'));
assertType('', $client->call('GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}'));
assertType('', $client->call('POST /repos/{owner}/{repo}/dispatches'));
assertType('Schema\\Operations\\Repos\\GetAllEnvironments\\Response\\ApplicationJson\\Ok', $client->call('GET /repos/{owner}/{repo}/environments'));
assertType('', $client->call('GET /repos/{owner}/{repo}/environments/{environment_name}'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/environments/{environment_name}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/environments/{environment_name}'));
assertType('Schema\\Operations\\Repos\\ListDeploymentBranchPolicies\\Response\\ApplicationJson\\Ok', $client->call('GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies'));
assertType('', $client->call('POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies'));
assertType('', $client->call('GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules'));
assertType('', $client->call('POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules'));
assertType('Schema\\Operations\\Repos\\ListCustomDeploymentRuleIntegrations\\Response\\ApplicationJson\\Ok', $client->call('GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps'));
assertType('', $client->call('GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}'));
assertType('iterable<int,Schema\\Event>', $client->call('GET /repos/{owner}/{repo}/events'));
assertType('iterable<int,Schema\\Event>', $client->call('LIST /repos/{owner}/{repo}/events'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('GET /repos/{owner}/{repo}/forks'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('LIST /repos/{owner}/{repo}/forks'));
assertType('', $client->call('POST /repos/{owner}/{repo}/forks'));
assertType('', $client->call('POST /repos/{owner}/{repo}/git/blobs'));
assertType('', $client->call('GET /repos/{owner}/{repo}/git/blobs/{file_sha}'));
assertType('', $client->call('POST /repos/{owner}/{repo}/git/commits'));
assertType('', $client->call('GET /repos/{owner}/{repo}/git/commits/{commit_sha}'));
assertType('Observable<Schema\\GitRef>', $client->call('GET /repos/{owner}/{repo}/git/matching-refs/{ref}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/git/ref/{ref}'));
assertType('', $client->call('POST /repos/{owner}/{repo}/git/refs'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/git/refs/{ref}'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/git/refs/{ref}'));
assertType('', $client->call('POST /repos/{owner}/{repo}/git/tags'));
assertType('', $client->call('GET /repos/{owner}/{repo}/git/tags/{tag_sha}'));
assertType('', $client->call('POST /repos/{owner}/{repo}/git/trees'));
assertType('', $client->call('GET /repos/{owner}/{repo}/git/trees/{tree_sha}'));
assertType('iterable<int,Schema\\Hook>', $client->call('GET /repos/{owner}/{repo}/hooks'));
assertType('iterable<int,Schema\\Hook>', $client->call('LIST /repos/{owner}/{repo}/hooks'));
assertType('', $client->call('POST /repos/{owner}/{repo}/hooks'));
assertType('', $client->call('GET /repos/{owner}/{repo}/hooks/{hook_id}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/hooks/{hook_id}'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/hooks/{hook_id}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/hooks/{hook_id}/config'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config'));
assertType('iterable<int,Schema\\HookDeliveryItem>', $client->call('GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries'));
assertType('', $client->call('GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}'));
assertType('', $client->call('POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts'));
assertType('', $client->call('POST /repos/{owner}/{repo}/hooks/{hook_id}/pings'));
assertType('', $client->call('POST /repos/{owner}/{repo}/hooks/{hook_id}/tests'));
assertType('', $client->call('GET /repos/{owner}/{repo}/import'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/import'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/import'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/import'));
assertType('Observable<Schema\\PorterAuthor>', $client->call('GET /repos/{owner}/{repo}/import/authors'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/import/authors/{author_id}'));
assertType('Observable<Schema\\PorterLargeFile>', $client->call('GET /repos/{owner}/{repo}/import/large_files'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/import/lfs'));
assertType('', $client->call('GET /repos/{owner}/{repo}/installation'));
assertType('', $client->call('GET /repos/{owner}/{repo}/interaction-limits'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/interaction-limits'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/interaction-limits'));
assertType('iterable<int,Schema\\RepositoryInvitation>', $client->call('GET /repos/{owner}/{repo}/invitations'));
assertType('iterable<int,Schema\\RepositoryInvitation>', $client->call('LIST /repos/{owner}/{repo}/invitations'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/invitations/{invitation_id}'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/invitations/{invitation_id}'));
assertType('iterable<int,Schema\\Issue>|Schema\\BasicError', $client->call('GET /repos/{owner}/{repo}/issues'));
assertType('iterable<int,Schema\\Issue>|Schema\\BasicError', $client->call('LIST /repos/{owner}/{repo}/issues'));
assertType('', $client->call('POST /repos/{owner}/{repo}/issues'));
assertType('iterable<int,Schema\\IssueComment>', $client->call('GET /repos/{owner}/{repo}/issues/comments'));
assertType('iterable<int,Schema\\IssueComment>', $client->call('LIST /repos/{owner}/{repo}/issues/comments'));
assertType('', $client->call('GET /repos/{owner}/{repo}/issues/comments/{comment_id}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}'));
assertType('iterable<int,Schema\\Reaction>', $client->call('GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions'));
assertType('iterable<int,Schema\\Reaction>', $client->call('LIST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions'));
assertType('', $client->call('POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}'));
assertType('iterable<int,Schema\\IssueEvent>', $client->call('GET /repos/{owner}/{repo}/issues/events'));
assertType('iterable<int,Schema\\IssueEvent>', $client->call('LIST /repos/{owner}/{repo}/issues/events'));
assertType('', $client->call('GET /repos/{owner}/{repo}/issues/events/{event_id}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/issues/{issue_number}'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/issues/{issue_number}'));
assertType('', $client->call('POST /repos/{owner}/{repo}/issues/{issue_number}/assignees'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees'));
assertType('', $client->call('GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}'));
assertType('iterable<int,Schema\\IssueComment>', $client->call('GET /repos/{owner}/{repo}/issues/{issue_number}/comments'));
assertType('iterable<int,Schema\\IssueComment>', $client->call('LIST /repos/{owner}/{repo}/issues/{issue_number}/comments'));
assertType('', $client->call('POST /repos/{owner}/{repo}/issues/{issue_number}/comments'));
assertType('iterable<int,Schema\\LabeledIssueEvent|Schema\\UnlabeledIssueEvent|Schema\\AssignedIssueEvent|Schema\\UnassignedIssueEvent|Schema\\MilestonedIssueEvent|Schema\\DemilestonedIssueEvent|Schema\\RenamedIssueEvent|Schema\\ReviewRequestedIssueEvent|Schema\\ReviewRequestRemovedIssueEvent|Schema\\ReviewDismissedIssueEvent|Schema\\LockedIssueEvent|Schema\\AddedToProjectIssueEvent|Schema\\MovedColumnInProjectIssueEvent|Schema\\RemovedFromProjectIssueEvent|Schema\\ConvertedNoteToIssueIssueEvent>', $client->call('GET /repos/{owner}/{repo}/issues/{issue_number}/events'));
assertType('iterable<int,Schema\\LabeledIssueEvent|Schema\\UnlabeledIssueEvent|Schema\\AssignedIssueEvent|Schema\\UnassignedIssueEvent|Schema\\MilestonedIssueEvent|Schema\\DemilestonedIssueEvent|Schema\\RenamedIssueEvent|Schema\\ReviewRequestedIssueEvent|Schema\\ReviewRequestRemovedIssueEvent|Schema\\ReviewDismissedIssueEvent|Schema\\LockedIssueEvent|Schema\\AddedToProjectIssueEvent|Schema\\MovedColumnInProjectIssueEvent|Schema\\RemovedFromProjectIssueEvent|Schema\\ConvertedNoteToIssueIssueEvent>', $client->call('LIST /repos/{owner}/{repo}/issues/{issue_number}/events'));
assertType('iterable<int,Schema\\Label>|Schema\\BasicError', $client->call('GET /repos/{owner}/{repo}/issues/{issue_number}/labels'));
assertType('iterable<int,Schema\\Label>|Schema\\BasicError', $client->call('LIST /repos/{owner}/{repo}/issues/{issue_number}/labels'));
assertType('Observable<Schema\\Label>|Schema\\BasicError', $client->call('PUT /repos/{owner}/{repo}/issues/{issue_number}/labels'));
assertType('Observable<Schema\\Label>|Schema\\BasicError', $client->call('POST /repos/{owner}/{repo}/issues/{issue_number}/labels'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels'));
assertType('Observable<Schema\\Label>|Schema\\BasicError', $client->call('DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/issues/{issue_number}/lock'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock'));
assertType('iterable<int,Schema\\Reaction>', $client->call('GET /repos/{owner}/{repo}/issues/{issue_number}/reactions'));
assertType('iterable<int,Schema\\Reaction>', $client->call('LIST /repos/{owner}/{repo}/issues/{issue_number}/reactions'));
assertType('', $client->call('POST /repos/{owner}/{repo}/issues/{issue_number}/reactions'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}'));
assertType('iterable<int,Schema\\LabeledIssueEvent|Schema\\UnlabeledIssueEvent|Schema\\MilestonedIssueEvent|Schema\\DemilestonedIssueEvent|Schema\\RenamedIssueEvent|Schema\\ReviewRequestedIssueEvent|Schema\\ReviewRequestRemovedIssueEvent|Schema\\ReviewDismissedIssueEvent|Schema\\LockedIssueEvent|Schema\\AddedToProjectIssueEvent|Schema\\MovedColumnInProjectIssueEvent|Schema\\RemovedFromProjectIssueEvent|Schema\\ConvertedNoteToIssueIssueEvent|Schema\\TimelineCommentEvent|Schema\\TimelineCrossReferencedEvent|Schema\\TimelineCommittedEvent|Schema\\TimelineReviewedEvent|Schema\\TimelineLineCommentedEvent|Schema\\TimelineCommitCommentedEvent|Schema\\TimelineAssignedIssueEvent|Schema\\TimelineUnassignedIssueEvent|Schema\\StateChangeIssueEvent>', $client->call('GET /repos/{owner}/{repo}/issues/{issue_number}/timeline'));
assertType('iterable<int,Schema\\LabeledIssueEvent|Schema\\UnlabeledIssueEvent|Schema\\MilestonedIssueEvent|Schema\\DemilestonedIssueEvent|Schema\\RenamedIssueEvent|Schema\\ReviewRequestedIssueEvent|Schema\\ReviewRequestRemovedIssueEvent|Schema\\ReviewDismissedIssueEvent|Schema\\LockedIssueEvent|Schema\\AddedToProjectIssueEvent|Schema\\MovedColumnInProjectIssueEvent|Schema\\RemovedFromProjectIssueEvent|Schema\\ConvertedNoteToIssueIssueEvent|Schema\\TimelineCommentEvent|Schema\\TimelineCrossReferencedEvent|Schema\\TimelineCommittedEvent|Schema\\TimelineReviewedEvent|Schema\\TimelineLineCommentedEvent|Schema\\TimelineCommitCommentedEvent|Schema\\TimelineAssignedIssueEvent|Schema\\TimelineUnassignedIssueEvent|Schema\\StateChangeIssueEvent>', $client->call('LIST /repos/{owner}/{repo}/issues/{issue_number}/timeline'));
assertType('iterable<int,Schema\\DeployKey>', $client->call('GET /repos/{owner}/{repo}/keys'));
assertType('iterable<int,Schema\\DeployKey>', $client->call('LIST /repos/{owner}/{repo}/keys'));
assertType('', $client->call('POST /repos/{owner}/{repo}/keys'));
assertType('', $client->call('GET /repos/{owner}/{repo}/keys/{key_id}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/keys/{key_id}'));
assertType('iterable<int,Schema\\Label>', $client->call('GET /repos/{owner}/{repo}/labels'));
assertType('iterable<int,Schema\\Label>', $client->call('LIST /repos/{owner}/{repo}/labels'));
assertType('', $client->call('POST /repos/{owner}/{repo}/labels'));
assertType('', $client->call('GET /repos/{owner}/{repo}/labels/{name}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/labels/{name}'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/labels/{name}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/languages'));
assertType('', $client->call('GET /repos/{owner}/{repo}/license'));
assertType('', $client->call('POST /repos/{owner}/{repo}/merge-upstream'));
assertType('', $client->call('POST /repos/{owner}/{repo}/merges'));
assertType('iterable<int,Schema\\Milestone>', $client->call('GET /repos/{owner}/{repo}/milestones'));
assertType('iterable<int,Schema\\Milestone>', $client->call('LIST /repos/{owner}/{repo}/milestones'));
assertType('', $client->call('POST /repos/{owner}/{repo}/milestones'));
assertType('', $client->call('GET /repos/{owner}/{repo}/milestones/{milestone_number}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/milestones/{milestone_number}'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/milestones/{milestone_number}'));
assertType('iterable<int,Schema\\Label>', $client->call('GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels'));
assertType('iterable<int,Schema\\Label>', $client->call('LIST /repos/{owner}/{repo}/milestones/{milestone_number}/labels'));
assertType('iterable<int,Schema\\Thread>', $client->call('GET /repos/{owner}/{repo}/notifications'));
assertType('iterable<int,Schema\\Thread>', $client->call('LIST /repos/{owner}/{repo}/notifications'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/notifications'));
assertType('', $client->call('GET /repos/{owner}/{repo}/pages'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/pages'));
assertType('', $client->call('POST /repos/{owner}/{repo}/pages'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/pages'));
assertType('iterable<int,Schema\\PageBuild>', $client->call('GET /repos/{owner}/{repo}/pages/builds'));
assertType('iterable<int,Schema\\PageBuild>', $client->call('LIST /repos/{owner}/{repo}/pages/builds'));
assertType('', $client->call('POST /repos/{owner}/{repo}/pages/builds'));
assertType('', $client->call('GET /repos/{owner}/{repo}/pages/builds/latest'));
assertType('', $client->call('GET /repos/{owner}/{repo}/pages/builds/{build_id}'));
assertType('', $client->call('POST /repos/{owner}/{repo}/pages/deployment'));
assertType('', $client->call('GET /repos/{owner}/{repo}/pages/health'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/private-vulnerability-reporting'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/private-vulnerability-reporting'));
assertType('iterable<int,Schema\\Project>', $client->call('GET /repos/{owner}/{repo}/projects'));
assertType('iterable<int,Schema\\Project>', $client->call('LIST /repos/{owner}/{repo}/projects'));
assertType('', $client->call('POST /repos/{owner}/{repo}/projects'));
assertType('Observable<Schema\\CustomPropertyValue>', $client->call('GET /repos/{owner}/{repo}/properties/values'));
assertType('iterable<int,Schema\\PullRequestSimple>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /repos/{owner}/{repo}/pulls'));
assertType('iterable<int,Schema\\PullRequestSimple>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /repos/{owner}/{repo}/pulls'));
assertType('', $client->call('POST /repos/{owner}/{repo}/pulls'));
assertType('iterable<int,Schema\\PullRequestReviewComment>', $client->call('GET /repos/{owner}/{repo}/pulls/comments'));
assertType('iterable<int,Schema\\PullRequestReviewComment>', $client->call('LIST /repos/{owner}/{repo}/pulls/comments'));
assertType('', $client->call('GET /repos/{owner}/{repo}/pulls/comments/{comment_id}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}'));
assertType('iterable<int,Schema\\Reaction>', $client->call('GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions'));
assertType('iterable<int,Schema\\Reaction>', $client->call('LIST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions'));
assertType('', $client->call('POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/pulls/{pull_number}'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/pulls/{pull_number}'));
assertType('', $client->call('POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces'));
assertType('iterable<int,Schema\\PullRequestReviewComment>', $client->call('GET /repos/{owner}/{repo}/pulls/{pull_number}/comments'));
assertType('iterable<int,Schema\\PullRequestReviewComment>', $client->call('LIST /repos/{owner}/{repo}/pulls/{pull_number}/comments'));
assertType('', $client->call('POST /repos/{owner}/{repo}/pulls/{pull_number}/comments'));
assertType('', $client->call('POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies'));
assertType('iterable<int,Schema\\Commit>', $client->call('GET /repos/{owner}/{repo}/pulls/{pull_number}/commits'));
assertType('iterable<int,Schema\\Commit>', $client->call('LIST /repos/{owner}/{repo}/pulls/{pull_number}/commits'));
assertType('iterable<int,Schema\\DiffEntry>', $client->call('GET /repos/{owner}/{repo}/pulls/{pull_number}/files'));
assertType('iterable<int,Schema\\DiffEntry>', $client->call('LIST /repos/{owner}/{repo}/pulls/{pull_number}/files'));
assertType('', $client->call('GET /repos/{owner}/{repo}/pulls/{pull_number}/merge'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge'));
assertType('', $client->call('GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'));
assertType('', $client->call('POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'));
assertType('iterable<int,Schema\\PullRequestReview>', $client->call('GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews'));
assertType('iterable<int,Schema\\PullRequestReview>', $client->call('LIST /repos/{owner}/{repo}/pulls/{pull_number}/reviews'));
assertType('', $client->call('POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews'));
assertType('', $client->call('GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'));
assertType('iterable<int,Schema\\ReviewComment>', $client->call('GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments'));
assertType('iterable<int,Schema\\ReviewComment>', $client->call('LIST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals'));
assertType('', $client->call('POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch'));
assertType('', $client->call('GET /repos/{owner}/{repo}/readme'));
assertType('', $client->call('GET /repos/{owner}/{repo}/readme/{dir}'));
assertType('iterable<int,Schema\\Release>', $client->call('GET /repos/{owner}/{repo}/releases'));
assertType('iterable<int,Schema\\Release>', $client->call('LIST /repos/{owner}/{repo}/releases'));
assertType('', $client->call('POST /repos/{owner}/{repo}/releases'));
assertType('', $client->call('GET /repos/{owner}/{repo}/releases/assets/{asset_id}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}'));
assertType('', $client->call('POST /repos/{owner}/{repo}/releases/generate-notes'));
assertType('', $client->call('GET /repos/{owner}/{repo}/releases/latest'));
assertType('', $client->call('GET /repos/{owner}/{repo}/releases/tags/{tag}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/releases/{release_id}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/releases/{release_id}'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/releases/{release_id}'));
assertType('iterable<int,Schema\\ReleaseAsset>', $client->call('GET /repos/{owner}/{repo}/releases/{release_id}/assets'));
assertType('iterable<int,Schema\\ReleaseAsset>', $client->call('LIST /repos/{owner}/{repo}/releases/{release_id}/assets'));
assertType('', $client->call('POST /repos/{owner}/{repo}/releases/{release_id}/assets'));
assertType('iterable<int,Schema\\Reaction>', $client->call('GET /repos/{owner}/{repo}/releases/{release_id}/reactions'));
assertType('iterable<int,Schema\\Reaction>', $client->call('LIST /repos/{owner}/{repo}/releases/{release_id}/reactions'));
assertType('', $client->call('POST /repos/{owner}/{repo}/releases/{release_id}/reactions'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}'));
assertType('iterable<int,Schema\\RepositoryRuleCreation|Schema\\RepositoryRuleUpdate|Schema\\RepositoryRuleDeletion|Schema\\RepositoryRuleRequiredLinearHistory|Schema\\RepositoryRuleRequiredDeployments|Schema\\RepositoryRuleRequiredSignatures|Schema\\RepositoryRulePullRequest|Schema\\RepositoryRuleRequiredStatusChecks|Schema\\RepositoryRuleNonFastForward|Schema\\RepositoryRuleCommitMessagePattern|Schema\\RepositoryRuleCommitAuthorEmailPattern|Schema\\RepositoryRuleCommitterEmailPattern|Schema\\RepositoryRuleBranchNamePattern|Schema\\RepositoryRuleTagNamePattern|Schema\\RepositoryRuleWorkflows>', $client->call('GET /repos/{owner}/{repo}/rules/branches/{branch}'));
assertType('iterable<int,Schema\\RepositoryRuleCreation|Schema\\RepositoryRuleUpdate|Schema\\RepositoryRuleDeletion|Schema\\RepositoryRuleRequiredLinearHistory|Schema\\RepositoryRuleRequiredDeployments|Schema\\RepositoryRuleRequiredSignatures|Schema\\RepositoryRulePullRequest|Schema\\RepositoryRuleRequiredStatusChecks|Schema\\RepositoryRuleNonFastForward|Schema\\RepositoryRuleCommitMessagePattern|Schema\\RepositoryRuleCommitAuthorEmailPattern|Schema\\RepositoryRuleCommitterEmailPattern|Schema\\RepositoryRuleBranchNamePattern|Schema\\RepositoryRuleTagNamePattern|Schema\\RepositoryRuleWorkflows>', $client->call('LIST /repos/{owner}/{repo}/rules/branches/{branch}'));
assertType('iterable<int,Schema\\RepositoryRuleset>', $client->call('GET /repos/{owner}/{repo}/rulesets'));
assertType('iterable<int,Schema\\RepositoryRuleset>', $client->call('LIST /repos/{owner}/{repo}/rulesets'));
assertType('', $client->call('POST /repos/{owner}/{repo}/rulesets'));
assertType('iterable<int,Schema\\RuleSuites>', $client->call('GET /repos/{owner}/{repo}/rulesets/rule-suites'));
assertType('iterable<int,Schema\\RuleSuites>', $client->call('LIST /repos/{owner}/{repo}/rulesets/rule-suites'));
assertType('', $client->call('GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/rulesets/{ruleset_id}'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}'));
assertType('iterable<int,Schema\\SecretScanningAlert>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /repos/{owner}/{repo}/secret-scanning/alerts'));
assertType('iterable<int,Schema\\SecretScanningAlert>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /repos/{owner}/{repo}/secret-scanning/alerts'));
assertType('', $client->call('GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}'));
assertType('iterable<int,Schema\\SecretScanningLocation>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations'));
assertType('iterable<int,Schema\\SecretScanningLocation>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations'));
assertType('iterable<int,Schema\\RepositoryAdvisory>', $client->call('GET /repos/{owner}/{repo}/security-advisories'));
assertType('', $client->call('POST /repos/{owner}/{repo}/security-advisories'));
assertType('', $client->call('POST /repos/{owner}/{repo}/security-advisories/reports'));
assertType('', $client->call('GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}'));
assertType('', $client->call('PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}'));
assertType('', $client->call('POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve'));
assertType('', $client->call('POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks'));
assertType('Schema\\SimpleUser|Schema\\Stargazer', $client->call('GET /repos/{owner}/{repo}/stargazers'));
assertType('Observable<int>|Schema\\Operations\\Repos\\GetCodeFrequencyStats\\Response\\ApplicationJson\\Accepted\\Application\\Json|WithoutBody', $client->call('GET /repos/{owner}/{repo}/stats/code_frequency'));
assertType('Observable<Schema\\CommitActivity>|Schema\\Operations\\Repos\\GetCommitActivityStats\\Response\\ApplicationJson\\Accepted\\Application\\Json|WithoutBody', $client->call('GET /repos/{owner}/{repo}/stats/commit_activity'));
assertType('Observable<Schema\\ContributorActivity>|Schema\\Operations\\Repos\\GetContributorsStats\\Response\\ApplicationJson\\Accepted\\Application\\Json|WithoutBody', $client->call('GET /repos/{owner}/{repo}/stats/contributors'));
assertType('', $client->call('GET /repos/{owner}/{repo}/stats/participation'));
assertType('Observable<int>|WithoutBody', $client->call('GET /repos/{owner}/{repo}/stats/punch_card'));
assertType('', $client->call('POST /repos/{owner}/{repo}/statuses/{sha}'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('GET /repos/{owner}/{repo}/subscribers'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('LIST /repos/{owner}/{repo}/subscribers'));
assertType('', $client->call('GET /repos/{owner}/{repo}/subscription'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/subscription'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/subscription'));
assertType('iterable<int,Schema\\Tag>', $client->call('GET /repos/{owner}/{repo}/tags'));
assertType('iterable<int,Schema\\Tag>', $client->call('LIST /repos/{owner}/{repo}/tags'));
assertType('Observable<Schema\\TagProtection>', $client->call('GET /repos/{owner}/{repo}/tags/protection'));
assertType('', $client->call('POST /repos/{owner}/{repo}/tags/protection'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}'));
assertType('', $client->call('GET /repos/{owner}/{repo}/tarball/{ref}'));
assertType('Observable<string>', $client->call('STREAM /repos/{owner}/{repo}/tarball/{ref}'));
assertType('iterable<int,Schema\\Team>', $client->call('GET /repos/{owner}/{repo}/teams'));
assertType('iterable<int,Schema\\Team>', $client->call('LIST /repos/{owner}/{repo}/teams'));
assertType('Schema\\Topic', $client->call('GET /repos/{owner}/{repo}/topics'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/topics'));
assertType('', $client->call('GET /repos/{owner}/{repo}/traffic/clones'));
assertType('Observable<Schema\\ContentTraffic>', $client->call('GET /repos/{owner}/{repo}/traffic/popular/paths'));
assertType('Observable<Schema\\ReferrerTraffic>', $client->call('GET /repos/{owner}/{repo}/traffic/popular/referrers'));
assertType('', $client->call('GET /repos/{owner}/{repo}/traffic/views'));
assertType('', $client->call('POST /repos/{owner}/{repo}/transfer'));
assertType('', $client->call('GET /repos/{owner}/{repo}/vulnerability-alerts'));
assertType('', $client->call('PUT /repos/{owner}/{repo}/vulnerability-alerts'));
assertType('', $client->call('DELETE /repos/{owner}/{repo}/vulnerability-alerts'));
assertType('', $client->call('GET /repos/{owner}/{repo}/zipball/{ref}'));
assertType('Observable<string>', $client->call('STREAM /repos/{owner}/{repo}/zipball/{ref}'));
assertType('', $client->call('POST /repos/{template_owner}/{template_repo}/generate'));
assertType('Observable<Schema\\MinimalRepository>|WithoutBody', $client->call('GET /repositories'));
assertType('Schema\\Operations\\Actions\\ListEnvironmentSecrets\\Response\\ApplicationJson\\Ok\\Application\\Json', $client->call('GET /repositories/{repository_id}/environments/{environment_name}/secrets'));
assertType('', $client->call('GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key'));
assertType('', $client->call('GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}'));
assertType('', $client->call('PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}'));
assertType('', $client->call('DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}'));
assertType('Schema\\Operations\\Actions\\ListEnvironmentVariables\\Response\\ApplicationJson\\Ok\\Application\\Json', $client->call('GET /repositories/{repository_id}/environments/{environment_name}/variables'));
assertType('', $client->call('POST /repositories/{repository_id}/environments/{environment_name}/variables'));
assertType('', $client->call('GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}'));
assertType('', $client->call('DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}'));
assertType('', $client->call('PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}'));
assertType('Schema\\Operations\\Search\\Code\\Response\\ApplicationJson\\Ok|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /search/code'));
assertType('Schema\\Operations\\Search\\Commits\\Response\\ApplicationJson\\Ok|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /search/commits'));
assertType('Schema\\Operations\\Search\\IssuesAndPullRequests\\Response\\ApplicationJson\\Ok|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /search/issues'));
assertType('Schema\\Operations\\Search\\Labels\\Response\\ApplicationJson\\Ok|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /search/labels'));
assertType('Schema\\Operations\\Search\\Repos\\Response\\ApplicationJson\\Ok|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /search/repositories'));
assertType('Schema\\Operations\\Search\\Topics\\Response\\ApplicationJson\\Ok|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /search/topics'));
assertType('Schema\\Operations\\Search\\Users\\Response\\ApplicationJson\\Ok|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /search/users'));
assertType('', $client->call('GET /teams/{team_id}'));
assertType('', $client->call('DELETE /teams/{team_id}'));
assertType('', $client->call('PATCH /teams/{team_id}'));
assertType('iterable<int,Schema\\TeamDiscussion>', $client->call('GET /teams/{team_id}/discussions'));
assertType('iterable<int,Schema\\TeamDiscussion>', $client->call('LIST /teams/{team_id}/discussions'));
assertType('', $client->call('POST /teams/{team_id}/discussions'));
assertType('', $client->call('GET /teams/{team_id}/discussions/{discussion_number}'));
assertType('', $client->call('DELETE /teams/{team_id}/discussions/{discussion_number}'));
assertType('', $client->call('PATCH /teams/{team_id}/discussions/{discussion_number}'));
assertType('iterable<int,Schema\\TeamDiscussionComment>', $client->call('GET /teams/{team_id}/discussions/{discussion_number}/comments'));
assertType('iterable<int,Schema\\TeamDiscussionComment>', $client->call('LIST /teams/{team_id}/discussions/{discussion_number}/comments'));
assertType('', $client->call('POST /teams/{team_id}/discussions/{discussion_number}/comments'));
assertType('', $client->call('GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}'));
assertType('', $client->call('DELETE /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}'));
assertType('', $client->call('PATCH /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}'));
assertType('iterable<int,Schema\\Reaction>', $client->call('GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions'));
assertType('iterable<int,Schema\\Reaction>', $client->call('LIST /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions'));
assertType('', $client->call('POST /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions'));
assertType('iterable<int,Schema\\Reaction>', $client->call('GET /teams/{team_id}/discussions/{discussion_number}/reactions'));
assertType('iterable<int,Schema\\Reaction>', $client->call('LIST /teams/{team_id}/discussions/{discussion_number}/reactions'));
assertType('', $client->call('POST /teams/{team_id}/discussions/{discussion_number}/reactions'));
assertType('iterable<int,Schema\\OrganizationInvitation>', $client->call('GET /teams/{team_id}/invitations'));
assertType('iterable<int,Schema\\OrganizationInvitation>', $client->call('LIST /teams/{team_id}/invitations'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('GET /teams/{team_id}/members'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('LIST /teams/{team_id}/members'));
assertType('', $client->call('GET /teams/{team_id}/members/{username}'));
assertType('', $client->call('PUT /teams/{team_id}/members/{username}'));
assertType('', $client->call('DELETE /teams/{team_id}/members/{username}'));
assertType('', $client->call('GET /teams/{team_id}/memberships/{username}'));
assertType('', $client->call('PUT /teams/{team_id}/memberships/{username}'));
assertType('', $client->call('DELETE /teams/{team_id}/memberships/{username}'));
assertType('iterable<int,Schema\\TeamProject>', $client->call('GET /teams/{team_id}/projects'));
assertType('iterable<int,Schema\\TeamProject>', $client->call('LIST /teams/{team_id}/projects'));
assertType('', $client->call('GET /teams/{team_id}/projects/{project_id}'));
assertType('', $client->call('PUT /teams/{team_id}/projects/{project_id}'));
assertType('', $client->call('DELETE /teams/{team_id}/projects/{project_id}'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('GET /teams/{team_id}/repos'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('LIST /teams/{team_id}/repos'));
assertType('', $client->call('GET /teams/{team_id}/repos/{owner}/{repo}'));
assertType('', $client->call('PUT /teams/{team_id}/repos/{owner}/{repo}'));
assertType('', $client->call('DELETE /teams/{team_id}/repos/{owner}/{repo}'));
assertType('iterable<int,Schema\\Team>', $client->call('GET /teams/{team_id}/teams'));
assertType('iterable<int,Schema\\Team>', $client->call('LIST /teams/{team_id}/teams'));
assertType('', $client->call('GET /user'));
assertType('', $client->call('PATCH /user'));
assertType('iterable<int,Schema\\SimpleUser>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/blocks'));
assertType('iterable<int,Schema\\SimpleUser>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/blocks'));
assertType('', $client->call('GET /user/blocks/{username}'));
assertType('', $client->call('PUT /user/blocks/{username}'));
assertType('', $client->call('DELETE /user/blocks/{username}'));
assertType('Schema\\Operations\\Codespaces\\ListForAuthenticatedUser\\Response\\ApplicationJson\\Ok\\Application\\Json|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/codespaces'));
assertType('', $client->call('POST /user/codespaces'));
assertType('Schema\\Operations\\Codespaces\\ListSecretsForAuthenticatedUser\\Response\\ApplicationJson\\Ok', $client->call('GET /user/codespaces/secrets'));
assertType('', $client->call('GET /user/codespaces/secrets/public-key'));
assertType('', $client->call('GET /user/codespaces/secrets/{secret_name}'));
assertType('', $client->call('PUT /user/codespaces/secrets/{secret_name}'));
assertType('', $client->call('DELETE /user/codespaces/secrets/{secret_name}'));
assertType('', $client->call('GET /user/codespaces/secrets/{secret_name}/repositories'));
assertType('', $client->call('PUT /user/codespaces/secrets/{secret_name}/repositories'));
assertType('', $client->call('PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}'));
assertType('', $client->call('DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}'));
assertType('', $client->call('GET /user/codespaces/{codespace_name}'));
assertType('', $client->call('DELETE /user/codespaces/{codespace_name}'));
assertType('', $client->call('PATCH /user/codespaces/{codespace_name}'));
assertType('', $client->call('POST /user/codespaces/{codespace_name}/exports'));
assertType('', $client->call('GET /user/codespaces/{codespace_name}/exports/{export_id}'));
assertType('', $client->call('GET /user/codespaces/{codespace_name}/machines'));
assertType('', $client->call('POST /user/codespaces/{codespace_name}/publish'));
assertType('', $client->call('POST /user/codespaces/{codespace_name}/start'));
assertType('', $client->call('POST /user/codespaces/{codespace_name}/stop'));
assertType('Observable<Schema\\Package>', $client->call('GET /user/docker/conflicts'));
assertType('Observable<Schema\\Email>|WithoutBody', $client->call('PATCH /user/email/visibility'));
assertType('iterable<int,Schema\\Email>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/emails'));
assertType('iterable<int,Schema\\Email>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/emails'));
assertType('Observable<Schema\\Email>|WithoutBody', $client->call('POST /user/emails'));
assertType('', $client->call('DELETE /user/emails'));
assertType('iterable<int,Schema\\SimpleUser>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/followers'));
assertType('iterable<int,Schema\\SimpleUser>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/followers'));
assertType('iterable<int,Schema\\SimpleUser>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/following'));
assertType('iterable<int,Schema\\SimpleUser>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/following'));
assertType('', $client->call('GET /user/following/{username}'));
assertType('', $client->call('PUT /user/following/{username}'));
assertType('', $client->call('DELETE /user/following/{username}'));
assertType('iterable<int,Schema\\GpgKey>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/gpg_keys'));
assertType('iterable<int,Schema\\GpgKey>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/gpg_keys'));
assertType('', $client->call('POST /user/gpg_keys'));
assertType('', $client->call('GET /user/gpg_keys/{gpg_key_id}'));
assertType('', $client->call('DELETE /user/gpg_keys/{gpg_key_id}'));
assertType('Schema\\Operations\\Apps\\ListInstallationsForAuthenticatedUser\\Response\\ApplicationJson\\Ok\\Application\\Json|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/installations'));
assertType('Schema\\Operations\\Apps\\ListInstallationReposForAuthenticatedUser\\Response\\ApplicationJson\\Ok|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/installations/{installation_id}/repositories'));
assertType('', $client->call('PUT /user/installations/{installation_id}/repositories/{repository_id}'));
assertType('', $client->call('DELETE /user/installations/{installation_id}/repositories/{repository_id}'));
assertType('', $client->call('GET /user/interaction-limits'));
assertType('', $client->call('PUT /user/interaction-limits'));
assertType('', $client->call('DELETE /user/interaction-limits'));
assertType('iterable<int,Schema\\Issue>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/issues'));
assertType('iterable<int,Schema\\Issue>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/issues'));
assertType('iterable<int,Schema\\Key>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/keys'));
assertType('iterable<int,Schema\\Key>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/keys'));
assertType('', $client->call('POST /user/keys'));
assertType('', $client->call('GET /user/keys/{key_id}'));
assertType('', $client->call('DELETE /user/keys/{key_id}'));
assertType('iterable<int,Schema\\UserMarketplacePurchase>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/marketplace_purchases'));
assertType('iterable<int,Schema\\UserMarketplacePurchase>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/marketplace_purchases'));
assertType('iterable<int,Schema\\UserMarketplacePurchase>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/marketplace_purchases/stubbed'));
assertType('iterable<int,Schema\\UserMarketplacePurchase>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/marketplace_purchases/stubbed'));
assertType('iterable<int,Schema\\OrgMembership>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/memberships/orgs'));
assertType('iterable<int,Schema\\OrgMembership>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/memberships/orgs'));
assertType('', $client->call('GET /user/memberships/orgs/{org}'));
assertType('', $client->call('PATCH /user/memberships/orgs/{org}'));
assertType('iterable<int,Schema\\Migration>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/migrations'));
assertType('iterable<int,Schema\\Migration>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/migrations'));
assertType('', $client->call('POST /user/migrations'));
assertType('', $client->call('GET /user/migrations/{migration_id}'));
assertType('', $client->call('GET /user/migrations/{migration_id}/archive'));
assertType('', $client->call('DELETE /user/migrations/{migration_id}/archive'));
assertType('', $client->call('DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('GET /user/migrations/{migration_id}/repositories'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('LIST /user/migrations/{migration_id}/repositories'));
assertType('iterable<int,Schema\\OrganizationSimple>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/orgs'));
assertType('iterable<int,Schema\\OrganizationSimple>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/orgs'));
assertType('iterable<int,Schema\\Package>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/packages'));
assertType('iterable<int,Schema\\Package>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/packages'));
assertType('', $client->call('GET /user/packages/{package_type}/{package_name}'));
assertType('', $client->call('DELETE /user/packages/{package_type}/{package_name}'));
assertType('', $client->call('POST /user/packages/{package_type}/{package_name}/restore'));
assertType('iterable<int,Schema\\PackageVersion>', $client->call('GET /user/packages/{package_type}/{package_name}/versions'));
assertType('iterable<int,Schema\\PackageVersion>', $client->call('LIST /user/packages/{package_type}/{package_name}/versions'));
assertType('', $client->call('GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}'));
assertType('', $client->call('DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}'));
assertType('', $client->call('POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore'));
assertType('', $client->call('POST /user/projects'));
assertType('iterable<int,Schema\\Email>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/public_emails'));
assertType('iterable<int,Schema\\Email>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/public_emails'));
assertType('iterable<int,Schema\\Repository>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/repos'));
assertType('iterable<int,Schema\\Repository>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/repos'));
assertType('', $client->call('POST /user/repos'));
assertType('iterable<int,Schema\\RepositoryInvitation>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/repository_invitations'));
assertType('iterable<int,Schema\\RepositoryInvitation>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/repository_invitations'));
assertType('', $client->call('DELETE /user/repository_invitations/{invitation_id}'));
assertType('', $client->call('PATCH /user/repository_invitations/{invitation_id}'));
assertType('iterable<int,Schema\\SocialAccount>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/social_accounts'));
assertType('iterable<int,Schema\\SocialAccount>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/social_accounts'));
assertType('Observable<Schema\\SocialAccount>|WithoutBody', $client->call('POST /user/social_accounts'));
assertType('', $client->call('DELETE /user/social_accounts'));
assertType('iterable<int,Schema\\SshSigningKey>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/ssh_signing_keys'));
assertType('iterable<int,Schema\\SshSigningKey>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/ssh_signing_keys'));
assertType('', $client->call('POST /user/ssh_signing_keys'));
assertType('', $client->call('GET /user/ssh_signing_keys/{ssh_signing_key_id}'));
assertType('', $client->call('DELETE /user/ssh_signing_keys/{ssh_signing_key_id}'));
assertType('iterable<int,Schema\\Repository>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/starred'));
assertType('iterable<int,Schema\\Repository>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/starred'));
assertType('', $client->call('GET /user/starred/{owner}/{repo}'));
assertType('', $client->call('PUT /user/starred/{owner}/{repo}'));
assertType('', $client->call('DELETE /user/starred/{owner}/{repo}'));
assertType('iterable<int,Schema\\MinimalRepository>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/subscriptions'));
assertType('iterable<int,Schema\\MinimalRepository>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/subscriptions'));
assertType('iterable<int,Schema\\TeamFull>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /user/teams'));
assertType('iterable<int,Schema\\TeamFull>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /user/teams'));
assertType('iterable<int,Schema\\SimpleUser>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /users'));
assertType('', $client->call('GET /users/{username}'));
assertType('Observable<Schema\\Package>', $client->call('GET /users/{username}/docker/conflicts'));
assertType('iterable<int,Schema\\Event>', $client->call('GET /users/{username}/events'));
assertType('iterable<int,Schema\\Event>', $client->call('LIST /users/{username}/events'));
assertType('iterable<int,Schema\\Event>', $client->call('GET /users/{username}/events/orgs/{org}'));
assertType('iterable<int,Schema\\Event>', $client->call('LIST /users/{username}/events/orgs/{org}'));
assertType('iterable<int,Schema\\Event>', $client->call('GET /users/{username}/events/public'));
assertType('iterable<int,Schema\\Event>', $client->call('LIST /users/{username}/events/public'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('GET /users/{username}/followers'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('LIST /users/{username}/followers'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('GET /users/{username}/following'));
assertType('iterable<int,Schema\\SimpleUser>', $client->call('LIST /users/{username}/following'));
assertType('', $client->call('GET /users/{username}/following/{target_user}'));
assertType('iterable<int,Schema\\BaseGist>', $client->call('GET /users/{username}/gists'));
assertType('iterable<int,Schema\\BaseGist>', $client->call('LIST /users/{username}/gists'));
assertType('iterable<int,Schema\\GpgKey>', $client->call('GET /users/{username}/gpg_keys'));
assertType('iterable<int,Schema\\GpgKey>', $client->call('LIST /users/{username}/gpg_keys'));
assertType('', $client->call('GET /users/{username}/hovercard'));
assertType('', $client->call('GET /users/{username}/installation'));
assertType('iterable<int,Schema\\KeySimple>', $client->call('GET /users/{username}/keys'));
assertType('iterable<int,Schema\\KeySimple>', $client->call('LIST /users/{username}/keys'));
assertType('iterable<int,Schema\\OrganizationSimple>', $client->call('GET /users/{username}/orgs'));
assertType('iterable<int,Schema\\OrganizationSimple>', $client->call('LIST /users/{username}/orgs'));
assertType('iterable<int,Schema\\Package>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('GET /users/{username}/packages'));
assertType('iterable<int,Schema\\Package>|\\ApiClients\\Tools\\OpenApiClient\\Utils\\Response\\WithoutBody', $client->call('LIST /users/{username}/packages'));
assertType('', $client->call('GET /users/{username}/packages/{package_type}/{package_name}'));
assertType('', $client->call('DELETE /users/{username}/packages/{package_type}/{package_name}'));
assertType('', $client->call('POST /users/{username}/packages/{package_type}/{package_name}/restore'));
assertType('Observable<Schema\\PackageVersion>', $client->call('GET /users/{username}/packages/{package_type}/{package_name}/versions'));
assertType('', $client->call('GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}'));
assertType('', $client->call('DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}'));
assertType('', $client->call('POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore'));
assertType('iterable<int,Schema\\Project>', $client->call('GET /users/{username}/projects'));
assertType('iterable<int,Schema\\Project>', $client->call('LIST /users/{username}/projects'));
assertType('iterable<int,Schema\\Event>', $client->call('GET /users/{username}/received_events'));
assertType('iterable<int,Schema\\Event>', $client->call('LIST /users/{username}/received_events'));
assertType('iterable<int,Schema\\Event>', $client->call('GET /users/{username}/received_events/public'));
assertType('iterable<int,Schema\\Event>', $client->call('LIST /users/{username}/received_events/public'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('GET /users/{username}/repos'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('LIST /users/{username}/repos'));
assertType('', $client->call('GET /users/{username}/settings/billing/actions'));
assertType('', $client->call('GET /users/{username}/settings/billing/packages'));
assertType('', $client->call('GET /users/{username}/settings/billing/shared-storage'));
assertType('iterable<int,Schema\\SocialAccount>', $client->call('GET /users/{username}/social_accounts'));
assertType('iterable<int,Schema\\SocialAccount>', $client->call('LIST /users/{username}/social_accounts'));
assertType('iterable<int,Schema\\SshSigningKey>', $client->call('GET /users/{username}/ssh_signing_keys'));
assertType('iterable<int,Schema\\SshSigningKey>', $client->call('LIST /users/{username}/ssh_signing_keys'));
assertType('Schema\\StarredRepository|Schema\\Repository', $client->call('GET /users/{username}/starred'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('GET /users/{username}/subscriptions'));
assertType('iterable<int,Schema\\MinimalRepository>', $client->call('LIST /users/{username}/subscriptions'));
assertType('Observable<string>', $client->call('GET /versions'));
assertType('', $client->call('GET /zen'));
